[
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty dictionary `primes` to store prime factors and their powers.\n4. Iterate from 2 to the square root of `n` to find prime factors.\n5. For each prime factor `i`, divide `n` by `i` as many times as possible and update the power of `i` in the `primes` dictionary.\n6. If `n` is greater than 1 after the loop, it means `n` is a prime number, so add it to the `primes` dictionary with a power of 1.\n7. Convert the `primes` dictionary keys and values to lists `k` and `v`, respectively.\n8. If the number of distinct prime factors is 3 or more, print \"YES\" and the product of the first two prime factors raised to their respective powers, followed by the product of the remaining prime factors.\n9. If the number of distinct prime factors is 1, check if the power of the only prime factor is at least 6. If so, print \"YES\" and the prime factor raised to the powers 1, 2, and the remaining power.\n10. If the number of distinct prime factors is 2, check if both powers are at least 2. If not, print \"NO\". Otherwise, print \"YES\" and the two prime factors raised to the powers of 1 and 1, respectively, and the product of the remaining prime factors.\n11. Repeat steps 2-10 for all test cases.\n\nCOMMENTED CODE:\n```python\ndef solve():\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty dictionary to store prime factors and their powers\n    primes = {}\n    \n    # Initialize a variable i to 2, which is the smallest prime number\n    i = 2\n    \n    # Iterate from 2 to the square root of n to find prime factors\n    while i * i <= n:\n        # While n is divisible by i, divide n by i and update the power of i in the primes dictionary\n        while n % i == 0:\n            primes[i] = primes.get(i, 0) + 1\n            n //= i\n        # Increment i by 1\n        i += 1\n    \n    # If n is greater than 1 after the loop, it means n is a prime number, so add it to the primes dictionary with a power of 1\n    if n > 1:\n        primes[n] = primes.get(n, 1)\n    \n    # Convert the primes dictionary keys and values to lists k and v, respectively\n    k = list(primes.keys())\n    v = list(primes.values())\n    \n    # If the number of distinct prime factors is 3 or more, print \"YES\" and the product of the first two prime factors raised to their respective powers, followed by the product of the remaining prime factors\n    if len(primes) >= 3:\n        print(\"YES\")\n        print(k[0] ** primes[k[0]], k[1] ** primes[k[1]], end=' ')\n        # Initialize a variable third to 1\n        third = 1\n        # Calculate the product of the remaining prime factors\n        for i in range(2, len(k)):\n            third *= k[i] ** primes[k[i]]\n        # Print the product of the remaining prime factors\n        print(third)\n    \n    # If the number of distinct prime factors is 1, check if the power of the only prime factor is at least 6\n    elif len(primes) == 1:\n        if sum(v) >= 6:\n            # If the power is at least 6, print \"YES\" and the prime factor raised to the powers 1, 2, and the remaining power\n            print(\"YES\")\n            print(k[0], k[0] ** 2, k[0] ** (v[0] - 3))\n        else:\n            # If the power is less than 6, print \"NO\"\n            print(\"NO\")\n    \n    # If the number of distinct prime factors is 2, check if both powers are at least 2\n    elif len(primes) == 2:\n        if v[0] <= 1 and v[1] <= 1:\n            # If either power is less than or equal to 1, print \"NO\"\n            print(\"NO\")\n        elif (v[0] == 1 and v[1] == 2) or (v[0] == 2 and v[1] == 1):\n            # If one power is 1 and the other is 2, print \"NO\"\n            print(\"NO\")\n        else:\n            # If both powers are at least 2, print \"YES\" and the two prime factors raised to the powers of 1 and 1, respectively, and the product of the remaining prime factors\n            print(\"YES\")\n            print(k[0], k[1], k[0] ** (v[0] - 1) * k[1] ** (v[1] - 1))\n\n\n# Read the number of test cases\nt = int(input())\n\n# Repeat the solve function for all test cases\nwhile t > 0:\n    solve()\n    t -= 1\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Perform prime factorization of `n` to find its distinct prime factors.\n4. Check if the number of distinct prime factors is less than 3. If so, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c`.\n5. If the number of distinct prime factors is 3 or more, try to form three distinct integers `a`, `b`, `c` such that `a * b * c = n`. If it's possible, print \"YES\" and the representation; otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt as s\n\n# Function to perform prime factorization of a number\ndef factorization(n):\n    # Initialize an empty list to store prime factors\n    a = []\n    \n    # Divide n by 2 as long as it's divisible evenly\n    while n % 2 == 0:\n        a.append(2)  # Add 2 to the list of prime factors\n        n = n // 2  # Divide n by 2\n    \n    # Iterate from 3 to the square root of n (inclusive) in steps of 2\n    for i in range(3, int(s(n)) + 1, 2):\n        # While n is divisible by i, add i to the list of prime factors and divide n by i\n        while n % i == 0:\n            a.append(i)\n            n = n // i\n    \n    # If n is greater than 2, it means n is a prime number, so add it to the list of prime factors\n    if n > 2:\n        a.append(n)\n    \n    return a\n\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Perform prime factorization of n\n    a = factorization(n)\n    \n    # Initialize a flag to track whether it's possible to represent n as a * b * c\n    flag = 'hobe'\n    \n    # Check if the number of distinct prime factors is less than 3\n    if len(a) < 3:\n        flag ='miao'  # If so, set the flag to'miao'\n    else:\n        # Initialize an empty list to store the representation of n as a * b * c\n        res = []\n        \n        # Add the first prime factor to the representation\n        res.append(a[0])\n        \n        # If the second prime factor is the same as the first, multiply the third prime factor by the second and add it to the representation\n        if a[1] == a[0]:\n            res.append(a[1] * a[2])\n            j = 3\n        else:\n            # Otherwise, add the second prime factor to the representation and set j to 2\n            res.append(a[1])\n            j = 2\n        \n        # Initialize a temporary variable to store the product of the remaining prime factors\n        temp = 1\n        \n        # Multiply the remaining prime factors and add the result to the representation if it's not already present\n        for i in range(j, len(a)):\n            temp *= a[i]\n        \n        if temp in res or temp == 1:\n            flag ='miao'  # If the product is already present in the representation or is 1, set the flag to'miao'\n    \n    # Print \"NO\" if it's impossible to represent n as a * b * c; otherwise, print \"YES\" and the representation\n    if flag =='miao':\n        print('NO')\n    else:\n        print('YES')\n        print(*res)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Initialize an empty list `l` to store the factors of `n`.\n5. Iterate from 2 to `n` (exclusive) to find factors of `n`.\n6. For each number `i` in the range, check if `n` is divisible by `i` (i.e., `n % i == 0`).\n7. If `n` is divisible by `i`, append `i` to the list `l` and divide `n` by `i`.\n8. Continue iterating until either two factors are found (`len(l) == 2`) or the square of the current number `i` is greater than `n` (`i*i > n`).\n9. After finding two factors or reaching the stopping condition, check if `n` is greater than 1 and not equal to either of the two factors found.\n10. If the conditions in step 9 are met, print \"YES\" and the three distinct integers `a`, `b`, and `c` (where `a`, `b` are the two factors found and `c` is the remaining value of `n`).\n11. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Initialize an empty list to store the factors of n\n    l = []\n    \n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Iterate from 2 to n (exclusive) to find factors of n\n    for i in range(2, n):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If n is divisible by i, append i to the list l and divide n by i\n            l.append(i)\n            n /= i\n        # Continue iterating until either two factors are found or the square of the current number i is greater than n\n        if len(l) == 2 or i*i > n:\n            break\n    \n    # Check if n is greater than 1 and not equal to either of the two factors found\n    if len(l) == 2 and n!= l[0] and n!= l[1] and n > 1:\n        # If the conditions are met, print \"YES\" and the three distinct integers a, b, and c\n        print(\"YES\")\n        print(l[0], l[1], int(n))\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case, read the integer `n`.\n3. Initialize an empty list `ans` to store the factors of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find the first factor `f1` of `n`.\n5. If `f1` is found, append it to `ans` and break the loop.\n6. If no factor is found in step 4, it means `n` is a prime number or has no factors in the given range. In this case, write \"NO\" to the output and continue to the next test case.\n7. Calculate `m` as `n` divided by the first factor `f1` found in step 4.\n8. Iterate from `f1+1` to the square root of `m` (inclusive) to find the second factor `f2` of `m`.\n9. If `f2` is found, append it to `ans` and break the loop.\n10. If no factor is found in step 8, it means `m` is a prime number or has no factors in the given range. In this case, write \"NO\" to the output and continue to the next test case.\n11. If `ans` has only one element, it means the second factor `f2` was not found. In this case, write \"NO\" to the output and continue to the next test case.\n12. Calculate `c` as `n` divided by the product of the first two factors `f1` and `f2`.\n13. Check if `c` is not equal to either `f1` or `f2`. If it is not equal, write \"YES\" to the output followed by the factors `f1`, `f2`, and `c` separated by spaces.\n14. If `c` is equal to either `f1` or `f2`, it means the factors found are not distinct. In this case, write \"NO\" to the output.\n15. Repeat steps 2-14 for all test cases.\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin, stdout\nfrom collections import defaultdict\nimport math\n\n# Read the number of test cases\ncases = rll()[0]\n\ndef main():\n    for _ in range(int(cases)):\n        # Read the integer n for the current test case\n        n = int(rl())\n\n        # Initialize an empty list to store the factors of n\n        ans = []\n\n        # Iterate from 2 to the square root of n to find the first factor\n        for f1 in range(2, math.ceil(math.sqrt(n))):\n            # Check if n is divisible by f1\n            if n % f1 == 0:\n                # Append f1 to ans and break the loop\n                ans.append(f1)\n                break\n\n        # If no factor is found, write \"NO\" to the output and continue\n        if len(ans) == 0:\n            stdout.write(\"NO\\n\")\n            continue\n\n        # Calculate m as n divided by the first factor f1\n        m = n//ans[0]\n\n        # Iterate from f1+1 to the square root of m to find the second factor\n        for f2 in range(f1+1, math.ceil(math.sqrt(m))):\n            # Check if m is divisible by f2\n            if m % f2 == 0:\n                # Append f2 to ans and break the loop\n                ans.append(f2)\n                break\n\n        # If ans has only one element, write \"NO\" to the output and continue\n        if len(ans) == 1:\n            stdout.write(\"NO\\n\")\n            continue\n\n        # Calculate a, b, and c as the factors found\n        a, b = ans[0], ans[1]\n        c = n//(a*b)\n\n        # Check if c is not equal to either a or b\n        if c not in {a, b}:\n            # Write \"YES\" to the output followed by the factors a, b, and c\n            stdout.write(\"YES\\n\")\n            stdout.write(\" \".join(str(x) for x in [a, b, c]))\n            stdout.write(\"\\n\")\n        else:\n            # Write \"NO\" to the output\n            stdout.write(\"NO\\n\")\n\n    # Close the stdout\n    stdout.close()\n\nif __name__ == \"__main__\":\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `p` to store the prime factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find its prime factors.\n6. For each number `j` in this range, check if `n` is divisible by `j`. If it is, append `j` to the list `p` and divide `n` by `j`.\n7. After the loop, if `n` is greater than 1, it means `n` itself is a prime factor, so append it to the list `p`.\n8. Check the length of `p`. If it's less than 3, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n9. If the length of `p` is exactly 3, check if all elements in `p` are distinct. If they are, print \"YES\" and the elements of `p` as the result.\n10. If the length of `p` is greater than 3, try to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`. If `p` has at least two distinct elements, set `a` to the first element of `p`, `b` to the second element, and `c` to the product of the remaining elements. If `p` has at least six elements, set `a` to the first element, `b` to the product of the second and third elements, and `c` to the product of the remaining elements. If none of these cases work, print \"NO\".\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor i in range(t):  # Iterate over each test case\n    n = int(input())  # Read the integer n for the current test case\n    p = []  # Initialize an empty list to store prime factors\n    j = 2  # Initialize the divisor to 2\n    while j * j <= n:  # Iterate from 2 to the square root of n\n        while (n % j == 0):  # Check if n is divisible by j\n            p.append(j)  # If it is, append j to the list of prime factors\n            n //= j  # Divide n by j\n        j += 1  # Increment the divisor\n    if n > 1:  # If n is greater than 1, it's a prime factor\n        p.append(n)  # Append n to the list of prime factors\n    if len(p) < 3:  # If the list of prime factors has less than 3 elements\n        print(\"NO\")  # It's impossible to represent n as a product of three distinct integers\n    elif len(p) == 3:  # If the list of prime factors has exactly 3 elements\n        if p[0]!= p[1] and p[1]!= p[2] and p[0]!= p[2]:  # Check if all elements are distinct\n            print(\"YES\")  # If they are, print \"YES\" and the elements of p as the result\n            print(p[0], p[1], p[2])\n        else:\n            print(\"NO\")  # If not, print \"NO\"\n    else:  # If the list of prime factors has more than 3 elements\n        mult = 1  # Initialize the product of remaining elements\n        for x in p:  # Calculate the product of remaining elements\n            mult *= x\n        a = p[0]  # Set a to the first element of p\n        b = -1  # Initialize b to -1\n        for x in p:  # Find the second distinct element\n            if x!= a:\n                b = x\n                break\n        if b!= -1:  # If a second distinct element is found\n            print(\"YES\")  # Print \"YES\"\n            print(a, b, mult // a // b)  # Print a, b, and the product of remaining elements\n        elif len(p) >= 6:  # If there are at least six elements in p\n            print(\"YES\")  # Print \"YES\"\n            print(p[0], p[1] * p[2], mult // p[0] // p[1] // p[2])  # Print a, b, and c\n        else:\n            print(\"NO\")  # If not, print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `c` to store the prime factors of `n`.\n5. Initialize a variable `i` to 2, which will be used to find prime factors of `n`.\n6. Iterate until `i` squared is less than `n` or until we find two prime factors.\n7. Inside the loop, check if `n` is divisible by `i` (i.e., `n % i == 0`).\n8. If `n` is divisible by `i`, append `i` to the list `c` and divide `n` by `i` to remove the factor.\n9. Increment `i` by 1 to check the next potential prime factor.\n10. After the loop, check if we have found exactly two prime factors in `c` and if `n` is not already in `c`.\n11. If the conditions in step 10 are met, print \"YES\" and the prime factors `c` along with `n`.\n12. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store prime factors\n    c = []\n    \n    # Initialize a variable to find prime factors\n    i = 2\n    \n    # Iterate until i squared is less than n or until we find two prime factors\n    while len(c) < 2 and i ** 2 < n:\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If n is divisible by i, append i to the list and divide n by i\n            c.append(i)\n            n = n // i\n        # Increment i to check the next potential prime factor\n        i += 1\n    \n    # Check if we have found exactly two prime factors and n is not already in c\n    if len(c) == 2 and n not in c:\n        # If the conditions are met, print \"YES\" and the prime factors along with n\n        print(\"YES\")\n        print(*c, int(n))\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `fatores` function.\n4. Initialize an empty list `ans` to store the three distinct integers `a`, `b`, `c`.\n5. Iterate through the prime factors of `n` and distribute them among `a`, `b`, and `c` such that `a`, `b`, and `c` are distinct and `a \u22c5 b \u22c5 c = n`.\n6. If it is possible to find `a`, `b`, and `c` that satisfy the conditions, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\ndef fatores(n):\n    # Find the prime factors of n\n    fat = {}  # Dictionary to store prime factors and their powers\n    for p in range(2, int(sqrt(n)+1)):  # Iterate from 2 to sqrt(n)\n        while n % p == 0:  # While n is divisible by p\n            n /= p  # Divide n by p\n            if not fat.get(p):  # If p is not in the dictionary\n                fat[p] = 0  # Initialize its power to 0\n            fat[p] += 1  # Increment the power of p\n        p += 1  # Move to the next number\n\n    if n > 1:  # If n is a prime number greater than 1\n        fat[int(n)] = 1  # Add it to the dictionary with power 1\n    return fat  # Return the dictionary of prime factors\n\nfor _ in range(int(input())):\n    n = int(input())  # Read the integer n for each test case\n    f = [list(i) for i in fatores(n).items()]  # Find the prime factors of n and store them in a list\n\n    q = 0  # Initialize a counter to keep track of the number of prime factors assigned to ans\n    ans = [1, 1, 1]  # Initialize ans with three 1s\n\n    for i in range(len(f)):  # Iterate through the prime factors of n\n        p, m = f[i]  # Get the current prime factor p and its power m\n        cont = 1  # Initialize a counter to distribute the power of p among ans\n\n        while cont <= f[i][1]:  # While the power of p is greater than 0\n            f[i][1] -= cont  # Decrement the power of p\n            ans[q] *= (f[i][0]**cont)  # Multiply the corresponding element in ans by p^cont\n\n            cont += 1  # Increment the counter\n            q += 1  # Move to the next element in ans\n\n            if q == 3:  # If all elements in ans have been assigned a prime factor\n                break  # Stop distributing the power of p\n\n        if q == 3:  # If all elements in ans have been assigned a prime factor\n            break  # Stop iterating through the prime factors of n\n\n    # At this point, ans contains the three distinct integers a, b, c\n    # However, some elements in ans may still have a value of 1\n    # We need to multiply the remaining elements in f by the corresponding elements in ans\n\n    for i in f:  # Iterate through the remaining prime factors of n\n        ans[2] *= i[0]**i[1]  # Multiply the last element in ans by the current prime factor raised to its power\n\n    if ans[0]!= ans[1] and ans[0]!= ans[2] and ans[1]!= ans[2] and min(ans) >= 2:  # Check if a, b, and c are distinct and greater than or equal to 2\n        print('YES')  # If the conditions are satisfied, print \"YES\"\n        print(*ans)  # Print the values of a, b, and c\n    else:\n        print('NO')  # Otherwise, print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `d` to store the prime factors of `n`.\n5. Initialize `a` as `n` and `i` as 2.\n6. Use a while loop to find all prime factors of `n`. For each prime factor `i`, divide `a` by `i` as long as `a` is divisible by `i`. Add `i` to the list `d` each time it is used to divide `a`.\n7. If `a` is not 1 after the loop, add `a` to the list `d`.\n8. Initialize `a`, `b`, and `c` as 1.\n9. Iterate over the list `d` starting from the second element (index 1).\n10. For each prime factor `d[i]`, check if `a` is equal to `b` or if `b` is 1. If either condition is true, multiply `b` by `d[i]`. Otherwise, multiply `c` by `d[i]`.\n11. After the loop, check if `a`, `b`, and `c` are all distinct and not equal to 1. If they are, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor _ in range(t):  # Iterate t times to process each test case\n    n = int(input())  # Read the integer n for the current test case\n    d = []  # Initialize an empty list to store prime factors\n    a = n  # Initialize a as n\n    i = 2  # Initialize i as 2\n    while i * i <= a:  # Use a while loop to find all prime factors of n\n        while a % i == 0:  # Divide a by i as long as a is divisible by i\n            d.append(i)  # Add i to the list d each time it is used to divide a\n            a //= i  # Divide a by i\n        i += 1  # Increment i\n    if a!= 1:  # If a is not 1 after the loop, add a to the list d\n        d.append(a)\n    a = d[0]  # Initialize a as the first element of d\n    b = 1  # Initialize b and c as 1\n    c = 1\n    for i in range(1, len(d)):  # Iterate over the list d starting from the second element\n        if a == b or b == 1:  # Check if a is equal to b or if b is 1\n            b *= d[i]  # Multiply b by d[i] if either condition is true\n        else:\n            c *= d[i]  # Multiply c by d[i] otherwise\n    if a!= b and b!= c and a!= c and a!= 1 and b!= 1 and c!= 1:  # Check if a, b, and c are all distinct and not equal to 1\n        print(\"YES\")  # Print \"YES\" if the condition is true\n        print(a, b, c)  # Print the values of a, b, and c\n    else:\n        print('NO')  # Print \"NO\" otherwise\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the function `f(n)`.\n4. If the number of distinct prime factors is 3 or more, print \"YES\" and the prime factors as `a`, `b`, and `c`.\n5. If the number of distinct prime factors is 2, check the exponents of the prime factors.\n6. If the exponents are both 2, print \"YES\" and the prime factors as `a`, `b`, and `a*b`.\n7. If one of the exponents is 3 or more, print \"YES\" and the prime factors as `a`, `a^(exponent-1)`, and `b^(exponent)`.\n8. If the number of distinct prime factors is 1, check the exponent of the prime factor.\n9. If the exponent is 6 or more, print \"YES\" and the prime factor as `a`, `a*a`, and `a^(exponent-3)`.\n10. If the exponent is less than 6, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}{}\".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \"YES\"\nNO = \"NO\"\n\ndef f(n):\n  # Find prime factors of n\n  ret, x = defaultdict(int), []\n  for i in range(2, int(n**0.5) + 1):\n    while n % i == 0:\n      # Count the exponent of each prime factor\n      ret[i] += 1\n      x.append(i)\n      n //= i\n\n  # If n is not 1, it means n is a prime number\n  if n!= 1:\n    ret[n] += 1\n    x.append(n)\n  return ret, x \n\nfor _ in range(int(input())):\n  try:\n    n = int(input())\n    arr, x = f(n)\n\n    # If there are 3 or more distinct prime factors, print \"YES\" and the prime factors\n    if len(arr) >= 3:\n      (x, xcnt), (y, ycnt), *c = list(arr.items())\n      z = 1 # Initialize z as 1\n      for i, j in c:\n        z *= (i ** j)\n      print(YES)\n      print(x**xcnt, y**ycnt, z)\n      go()\n    \n    # If there are 2 distinct prime factors, check the exponents\n    if len(arr) == 2:\n      (x, xcnt), (y, ycnt) = arr.items()\n      \n      # If the sum of exponents is less than or equal to 3, print \"NO\"\n      if xcnt + ycnt <= 3:\n        print(NO)\n        go()\n      \n      # If both exponents are 2, print \"YES\" and the prime factors\n      if xcnt == 2 and ycnt == 2:\n        print(YES)\n        print(x, y, x*y)\n        go() \n\n      # If one of the exponents is 3 or more, print \"YES\" and the prime factors\n      if xcnt >= 3:\n        print(YES)\n        print(x, x**(xcnt - 1), y**ycnt)\n        go() \n      \n      if ycnt >= 3:\n        print(YES)\n        print(y, y**(ycnt - 1), x**xcnt)\n        go() \n    \n    # If there is only 1 distinct prime factor, check the exponent\n    if len(arr) == 1:\n      #print(\"== 1\")\n      (x, xcnt) = list(arr.items())[0]\n      # If the exponent is less than or equal to 5, print \"NO\"\n      if xcnt <= 5:\n        print(NO)\n        go() \n      else:\n        # If the exponent is 6 or more, print \"YES\" and the prime factor\n        print(YES)\n        print(x, x*x, x**(xcnt - 3)) \n        go() \n\n  except Exception as e:\n    continue \n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case `tt` from `0` to `t-1`.\n3. Read the value of `n` for the current test case.\n4. Initialize an empty dictionary `d` to store prime factors of `n`.\n5. Iterate from `2` to the square root of `n` (inclusive) to find the first prime factor of `n`.\n6. If `n` is divisible by the current number `i` and `i` is not already in `d`, add `i` to `d` and update `n` by dividing it by `i`.\n7. Repeat step 6 until `n` is reduced to a prime number or `1`.\n8. If the length of `d` is less than `2` or if the remaining `n` is in `d` or if `n` is `1`, print \"NO\".\n9. Otherwise, print \"YES\" and the prime factors of `n` along with `n` itself.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor tt in range(t):\n    # Read the value of n for the current test case\n    n = int(input())\n\n    # Initialize an empty dictionary to store prime factors of n\n    d = {}\n\n    # Find the first prime factor of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if n is divisible by the current number i and i is not already in d\n        if n % i == 0 and i not in d:\n            # Add i to d and update n by dividing it by i\n            d[i] = 1\n            n = n // i\n            # Break the loop as we have found the first prime factor\n            break\n\n    # Find the second prime factor of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if n is divisible by the current number i and i is not already in d\n        if n % i == 0 and i not in d:\n            # Add i to d and update n by dividing it by i\n            d[i] = 1\n            n = n // i\n            # Break the loop as we have found the second prime factor\n            break\n\n    # Check if it is impossible to represent n as a * b * c\n    if len(d) < 2 or (n in d) or n == 1:\n        # Print \"NO\" if it is impossible\n        print(\"NO\")\n    else:\n        # Print \"YES\" and the prime factors of n along with n itself\n        print(\"YES\")\n        # Add n to d\n        d[n] = 1\n        # Iterate over the items in d and print them\n        for key, value in d.items():\n            print(key, end=\" \")\n        # Print a newline character\n        print()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `ans` to store the result.\n4. Define a recursive function `find(n, p, ans)` to find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n`.\n5. In the `find` function, iterate from `2` to the ceiling of `n^(1/p)` (inclusive) to find a divisor `i` of `n`.\n6. If `n` is divisible by `i`, check if `p` is `3`. If `p` is `3`, recursively call `find(n//i, 2, [i])` to find two more distinct integers.\n7. If `p` is `2` and `n//i > 1`, create a new list `new` by appending `n//i` and `i` to `ans`. Check if the length of the set of `new` is `3` to ensure distinct integers.\n8. If the length of `ans` is `3`, return `ans`. Otherwise, return an empty list.\n9. If `ans` is not empty after the recursive call, print \"YES\" and the elements of `ans` separated by spaces. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import ceil\n\ndef find(n, p, ans):\n    # Iterate from 2 to the ceiling of n^(1/p) to find a divisor i of n\n    for i in range(2, ceil(n**(1/p)) + 1, 1):\n        if n % i == 0:\n            # If p is 3, recursively find two more distinct integers\n            if p == 3:\n                # Recursively call find with n//i and p=2, and append i to ans\n                ans += find(n // i, 2, [i])\n                # If the length of ans is 3, return ans\n                if len(ans) == 3:\n                    return ans\n                # Otherwise, reset ans\n                ans = []\n            # If p is 2 and n//i > 1, create a new list with n//i and i\n            elif p == 2 and n // i > 1:\n                new = ans + [(n // i), i]\n                # Check if the length of the set of new is 3 to ensure distinct integers\n                if len(set(new)) == 3:\n                    return new\n    # If no solution is found, return an empty list\n    return ans\n\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the integer n for each test case\n    n = int(input())\n    # Initialize ans to store the result\n    k = find(n, 3, [])\n    # If the length of k is 3, print \"YES\" and the elements of k\n    if len(k) == 3:\n        print(\"YES\")\n        print(*k, sep=\" \")\n    # Otherwise, print \"NO\"\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize `d` as `n` and an empty list `ret` to store the factors.\n5. Iterate from 2 to the square root of `n` to find factors.\n6. If `d` is divisible by the current number `i`, divide `d` by `i` and append `i` to `ret`.\n7. If `ret` has two elements, break the loop as we have found two distinct factors.\n8. If `ret` has less than two elements, it means `n` cannot be represented as a product of three distinct integers, so print 'NO' and continue to the next test case.\n9. Otherwise, calculate the third factor `c` as `n` divided by the product of the first two factors `a` and `b`.\n10. Check if `a`, `b`, or `c` are equal, or if the product of `a`, `b`, and `c` is not equal to `n`. If any of these conditions are true, print 'NO' and continue to the next test case.\n11. If all checks pass, print 'YES' and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\n# -*- coding: utf-8 -*-\nfrom math import sqrt\n\ndef main():\n    # Read the number of test cases\n    for _ in range(int(input())):\n        # Read the integer n for the current test case\n        n = int(input())\n        # Initialize d as n and an empty list ret to store factors\n        d = n\n        ret = []\n        # Iterate from 2 to the square root of n to find factors\n        for i in range(2, int(sqrt(n))):\n            # Check if d is divisible by the current number i\n            if d % i == 0:\n                # Divide d by i and append i to ret\n                d /= i\n                ret.append(i)\n            # If ret has two elements, break the loop\n            if len(ret) == 2:\n                break\n        # If ret has less than two elements, it means n cannot be represented as a product of three distinct integers\n        if len(ret) < 2:\n            print('NO')\n            continue\n        # Calculate the third factor c as n divided by the product of the first two factors a and b\n        a, b = ret\n        c = n // (a * b)\n        # Check if a, b, or c are equal, or if the product of a, b, and c is not equal to n\n        if a == c or b == c or (a * b * c)!= n:\n            print('NO')\n            continue\n        # If all checks pass, print 'YES' and the values of a, b, and c\n        print('YES')\n        print(a, b, c)\n\nif __name__ == '__main__':\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the number `n` from the input.\n3. Initialize a flag `flag` to `True` to track whether a valid solution is found.\n4. Initialize an empty list `factors` to store the factors of `n`.\n5. Find the first factor `a` of `n` using the `find_one_factor` function. If no factor is found, set `flag` to `False` and break the loop.\n6. Find the second factor `b` of `n` using the `find_one_factor` function with `a` as the starting factor. If no factor is found, set `flag` to `False` and break the loop.\n7. If `b` is equal to `num`, it means that `n` is a perfect square of `a`, so set `flag` to `False` and break the loop.\n8. If `flag` is still `True`, print \"YES\" and the factors `a`, `b`, and `c` (which is `num`).\n9. If `flag` is `False`, print \"NO\".\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\n\ndef find_one_factor(num, a):  # Function to find one factor of num starting from a\n    for i in range(a + 1, int(num ** 0.5) + 1):  # Start from a + 1 to avoid duplicate factors\n        if num % i == 0:  # Check if i is a factor of num\n            return i, num // i  # Return the factor and the quotient\n\nwhile t:  # Loop through each test case\n    t -= 1\n    n = int(input())  # Read the number for the current test case\n    flag = True  # Initialize the flag to True\n    factors = []  # Initialize an empty list to store factors\n\n    a, num = find_one_factor(n, 0)  # Find the first factor of n\n    if a == -1:  # If no factor is found\n        print(\"NO\")  # Print \"NO\"\n        continue  # Break the loop\n\n    b, num = find_one_factor(num, a)  # Find the second factor of n\n    if b == -1:  # If no factor is found\n        print(\"NO\")  # Print \"NO\"\n        continue  # Break the loop\n    elif b == num:  # If b is equal to num\n        print(\"NO\")  # Print \"NO\"\n        continue  # Break the loop\n\n    c = num  # c is the remaining factor\n\n    print(\"YES\")  # Print \"YES\"\n    print(\"{} {} {}\".format(a, b, c))  # Print the factors\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `T` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for the current test case.\n4. Initialize a flag `ans` to False, indicating that it's initially impossible to find three distinct integers `a`, `b`, `c` such that `a \u22c5 b \u22c5 c = n`.\n5. Initialize a flag `move` to True, which will be used to control the iteration process.\n6. Iterate over all numbers `i` from 2 to the square root of `n` (inclusive) using a for loop.\n7. Check if `n` is divisible by `i`. If it is, calculate `a` as `i` and `b` as `n/a`.\n8. Iterate over all numbers `j` from `a + 1` to the square root of `n` (inclusive) using a for loop.\n9. Check if `b` is divisible by `j`. If it is, calculate `c` as `j` and update `b` as `b/j`.\n10. Check if `a`, `b`, or `c` are equal. If any of them are equal, set `ans` to False, indicating that it's impossible to find three distinct integers.\n11. If `ans` is still False after the iteration, set `move` to False to exit the inner loop and `ans` to True to indicate that it's possible to find three distinct integers.\n12. If `ans` is True, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Read the number of test cases\nT = int(input())\n\n# Iterate over each test case\nfor case in range(T):\n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Initialize a flag to indicate that it's initially impossible to find three distinct integers\n    ans = False\n    \n    # Initialize a flag to control the iteration process\n    move = True\n    \n    # Iterate over all numbers i from 2 to the square root of n (inclusive)\n    for i in range(2, int(sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Calculate a as i and b as n/a\n            a = i\n            b = int(n / a)\n            \n            # Iterate over all numbers j from a + 1 to the square root of n (inclusive)\n            for j in range(a + 1, int(sqrt(n)) + 1):\n                # Check if b is divisible by j\n                if b % j == 0:\n                    # Calculate c as j and update b as b/j\n                    b = b // j\n                    c = j\n                    \n                    # Check if a, b, or c are equal\n                    if c == b or c == a or a == b:\n                        # If any of them are equal, set ans to False\n                        ans = False\n                    else:\n                        # If none of them are equal, set move to False to exit the inner loop\n                        move = False\n                        # Set ans to True to indicate that it's possible to find three distinct integers\n                        ans = True\n                        # Break the inner loop\n                        break\n        # If ans is still False after the iteration, break the outer loop\n        if ans is False: break\n    \n    # If ans is True, print \"YES\" and the values of a, b, and c\n    if ans is True:\n        print(\"YES\")\n        print(a, b, c)\n    # Otherwise, print \"NO\"\n    else: print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `ans` to store the factors of `n`.\n5. Initialize a variable `i` to 2, which will be used to find factors of `n`.\n6. Initialize a variable `x` to `n`, which will be used to check for factors.\n7. Use a while loop to find factors of `n`. The loop continues until `i * i` is greater than `x`.\n8. Inside the loop, check if `n` is divisible by `i`. If it is, add `i` to the `ans` list and divide `n` by `i`.\n9. Increment `i` by 1 to check for the next factor.\n10. After the loop, check if `n` is not already in the `ans` list and if the length of `ans` is less than 3. If both conditions are true, add `n` to the `ans` list.\n11. Check if the length of `ans` is greater than 2. If it is, print \"YES\" and the elements of `ans` as the factors of `n`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the factors of n\n    ans = []\n    \n    # Initialize a variable i to 2, which will be used to find factors of n\n    i = 2\n    \n    # Initialize a variable x to n, which will be used to check for factors\n    x = n\n    \n    # Use a while loop to find factors of n\n    while i * i <= x:\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If n is divisible by i, add i to the ans list and divide n by i\n            if len(ans) < 2:\n                ans.append(i)\n                n //= i\n        # Increment i by 1 to check for the next factor\n        i += 1\n    \n    # After the loop, check if n is not already in the ans list and if the length of ans is less than 3\n    if n not in ans and len(ans) < 3:\n        # If both conditions are true, add n to the ans list\n        ans.append(n)\n    \n    # Check if the length of ans is greater than 2\n    if len(ans) > 2:\n        # If it is, print \"YES\" and the elements of ans as the factors of n\n        print('YES')\n        print(*ans)\n    else:\n        # Otherwise, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `flag` to track whether a valid solution is found.\n5. Iterate over all numbers `i` from 2 to the square root of `n` (inclusive).\n6. For each `i`, check if `n` is divisible by `i`. If it is, calculate `par` as `n` divided by `i`.\n7. Iterate over all numbers `j` from 2 to the square root of `par` (inclusive).\n8. For each `j`, check if `par` is divisible by `j`. If it is, calculate `k` as `par` divided by `j`.\n9. If `i`, `j`, and `k` are distinct integers, print \"YES\" and the values of `i`, `j`, and `k`.\n10. If no valid solution is found after iterating over all possible values of `i`, `j`, and `k`, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import *\n\n# Iterate over each test case\nfor ct in range(int(input())):\n    # Read the integer n from the input\n    n = int(input())\n\n    # Initialize a flag to track whether a valid solution is found\n    flag = False\n\n    # Iterate over all numbers i from 2 to the square root of n (inclusive)\n    for i in range(2, int(sqrt(n))):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Calculate par as n divided by i\n            par = n//i\n\n            # Iterate over all numbers j from 2 to the square root of par (inclusive)\n            for j in range(2, int(sqrt(par))+1):\n                # Check if par is divisible by j\n                if par % j == 0:\n                    # Calculate k as par divided by j\n                    k = par // j\n\n                    # Check if i, j, and k are distinct integers\n                    if i!= j and j!= k and i!= k:\n                        # Print \"YES\" and the values of i, j, and k\n                        print(\"YES\")\n                        print(i, j, k)\n                        # Set the flag to True to indicate a valid solution is found\n                        flag = True\n                        # Break out of the inner loops to move on to the next test case\n                        break\n            # If no valid solution is found for the current i, check if i can be expressed as a product of two distinct integers\n            else:\n                for j in range(2, int(sqrt(i))+1):\n                    # Check if i is divisible by j\n                    if i % j == 0:\n                        # Calculate k as i divided by j\n                        k = i // j\n\n                        # Check if par, j, and k are distinct integers\n                        if par!= j and j!= k and par!= k:\n                            # Print \"YES\" and the values of par, j, and k\n                            print(\"YES\")\n                            print(par, j, k)\n                            # Set the flag to True to indicate a valid solution is found\n                            flag = True\n                            # Break out of the inner loops to move on to the next test case\n                            break\n    # If no valid solution is found after iterating over all possible values of i, j, and k, print \"NO\"\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Factorize `n` into its prime factors using the `factorize` function.\n4. Check if the number of factors is less than 3. If so, print \"NO\" and move to the next test case.\n5. Initialize three variables `a`, `b`, and `c` to 1.\n6. Assign the first prime factor to `a`.\n7. Iterate through the remaining prime factors. For each factor, multiply `b` by the current factor until `b` is not equal to `a`. This ensures that `a` and `b` are distinct.\n8. Iterate through the remaining prime factors and multiply `c` by each factor. This ensures that `c` is distinct from `a` and `b`.\n9. Check if `a`, `b`, and `c` are distinct and their product equals `n`. If so, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nfrom os import path\nif(path.exists('input.txt')):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\n# Define a function to get an integer from input\nget_int = lambda: int(input())\n# Define a function to get a list of integers from input\nget_ints = lambda: map(int, input().split())\n# Define a function to get a list of integers from input and convert it to a list\nget_ints_list = lambda: list(get_ints())\n\n# Import the sqrt function from the math module\nfrom math import sqrt\n\n# Define a function to factorize a number into its prime factors\ndef factorize(n):\n    # Initialize the starting factor to 2\n    i = 2\n    # Initialize an empty list to store the prime factors\n    factors = []\n    # Continue the loop until the square of the current factor is less than or equal to n\n    while i * i <= n:\n        # Check if n is divisible by the current factor\n        if n % i == 0:\n            # Initialize a counter to count the number of times the current factor divides n\n            p = 0\n            # Continue dividing n by the current factor until it is no longer divisible\n            while n % i == 0:\n                n //= i\n                p += 1\n                # Append the current factor to the list of factors\n                factors.append(i)\n        # Increment the current factor by 1\n        i += 1\n\n    # If n is not equal to 1, it means n is a prime factor that was not found in the previous loop\n    if n!= 1:\n        # Append n to the list of factors\n        factors.append(n)\n    # Return the list of factors\n    return factors\n\n# Read the number of test cases\nt = get_int()\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n = get_int()\n    # Factorize n into its prime factors\n    factors = factorize(n)\n    # Get the length of the list of factors\n    l = len(factors)\n    # Check if the number of factors is less than 3\n    if l < 3:\n        # If so, print \"NO\" and move to the next test case\n        print(\"NO\")\n        continue\n    # Initialize a, b, and c to 1\n    a, b, c = 1, 1, 1\n    # Assign the first prime factor to a\n    a = factors[0]\n    # Initialize an index to iterate through the remaining factors\n    i = 1\n    # Iterate through the remaining factors\n    while i < l:\n        # Multiply b by the current factor\n        b *= factors[i]\n        # Increment the index\n        i += 1\n        # Check if b is not equal to a\n        if b!= a: break\n\n    # Iterate through the remaining factors\n    while i < l:\n        # Multiply c by the current factor\n        c *= factors[i]\n        # Increment the index\n        i += 1\n\n    # Check if a, b, and c are distinct and their product equals n\n    if a!= b and a!= c and b!= c and a!= 1 and b!= 1 and c!= 1 and a*b*c == n:\n        # If so, print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a, b, c)\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a variable `i` to 2, which will be used to find prime factors of `n`.\n5. Initialize a list `delim` to store the prime factors of `n`.\n6. Iterate from `i` to the square root of `n` (inclusive) to find prime factors of `n`.\n7. If `n` is divisible by `i`, add `i` to the `delim` list and divide `n` by `i`.\n8. After finding all prime factors, iterate through the `delim` list to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n9. For each pair of prime factors `delim[i]` and `delim[j]` (where `i < j`), check if their product `delim[i] * delim[j]` divides `n` and if the remaining factor `n // (delim[i] * delim[j])` is greater than 1 and not equal to `delim[i]` or `delim[j]`.\n10. If such a triplet is found, print \"YES\" and the triplet `delim[i]`, `delim[j]`, and `n // (delim[i] * delim[j])`.\n11. If no such triplet is found after iterating through all pairs of prime factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in [0]*int(input()):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize a variable i to 2, which will be used to find prime factors of n\n    i = 2\n    \n    # Initialize a list delim to store the prime factors of n\n    delim = []\n    \n    # Iterate from i to the square root of n (inclusive) to find prime factors of n\n    while i*i <= n:\n        # If n is divisible by i, add i to the delim list and divide n by i\n        if not n % i:\n            delim.append(i)\n            n //= i\n        # Increment i by 1\n        i += 1\n    \n    # Initialize a flag tt to False, which will be used to indicate if a triplet is found\n    tt = False\n    \n    # Iterate through the delim list to find three distinct integers a, b, and c such that a * b * c = n\n    for i in range(len(delim)):\n        # If a triplet is already found, break the loop\n        if tt == True:\n            break\n        # Iterate from i+1 to the end of the delim list\n        for j in range(i+1, len(delim)):\n            # Calculate the remaining factor f\n            f = n // (delim[i]*delim[j])\n            # Check if the remaining factor f is greater than 1 and not equal to delim[i] or delim[j]\n            # and if the product delim[i] * delim[j] divides n\n            if f > 1 and f not in (delim[i], delim[j]) and not n % (delim[i]*delim[j]):\n                # Set the flag tt to True to indicate that a triplet is found\n                tt = True\n                # Print \"YES\" and the triplet delim[i], delim[j], and f\n                print(\"YES\")\n                print(delim[i], delim[j], f)\n                # Break the inner loop\n                break\n    \n    # If no triplet is found after iterating through all pairs of prime factors, print \"NO\"\n    if tt == False:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case:\n   - Read the number `n` from the input.\n   - Initialize an empty list `arr` to store the prime factors of `n`.\n   - Initialize a variable `div` to 2, which will be used to find the prime factors of `n`.\n   - While `n` is not equal to 1:\n     - If `div` is greater than the square root of `n`, it means `n` is a prime number, so append it to `arr` and break the loop.\n     - If `n` is divisible by `div`, divide `n` by `div` and append `div` to `arr`.\n     - Increment `div` by 1.\n   - If the length of `arr` is less than 3, it means `n` cannot be represented as a product of three distinct integers, so print \"NO\".\n   - Otherwise, create a list `cand` to store the distinct prime factors of `n`.\n   - Initialize a variable `cur` to 1, which will be used to store the current product of prime factors.\n   - While `arr` is not empty:\n     - Multiply `cur` by the first element of `arr` and remove it from `arr`.\n     - If `cur` is not already in `cand`, append it to `cand` and reset `cur` to 1.\n   - If `cur` is not 1, it means the last element of `cand` is not a prime factor, so multiply the last element of `cand` by `cur`.\n   - If the length of `cand` is less than 3, it means `n` cannot be represented as a product of three distinct integers, so print \"NO\".\n   - Otherwise, while the length of `cand` is not equal to 3:\n     - Remove the last element of `cand` and multiply the second last element of `cand` by it.\n   - Print \"YES\" and the elements of `cand`.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor _ in range(t):  # Iterate over each test case\n    n = num = int(input())  # Read the number for the current test case\n    arr = []  # Initialize an empty list to store the prime factors of n\n    div = 2  # Initialize a variable to find the prime factors of n\n    while n!= 1:  # While n is not equal to 1\n        if div > int(n**0.5):  # If div is greater than the square root of n\n            arr.append(n)  # Append n to arr\n            n //= div  # Divide n by div\n            break  # Break the loop\n\n        if n % div == 0:  # If n is divisible by div\n            n //= div  # Divide n by div\n            arr.append(div)  # Append div to arr\n            continue  # Continue to the next iteration\n\n        div += 1  # Increment div by 1\n\n    if len(arr) < 3:  # If the length of arr is less than 3\n        print(\"NO\")  # Print \"NO\"\n\n    else:  # Otherwise\n        cand = []  # Initialize a list to store the distinct prime factors of n\n        cur = 1  # Initialize a variable to store the current product of prime factors\n        while arr:  # While arr is not empty\n            cur *= arr.pop(0)  # Multiply cur by the first element of arr and remove it from arr\n            if cur not in cand:  # If cur is not already in cand\n                cand.append(cur)  # Append cur to cand\n                cur = 1  # Reset cur to 1\n\n        if cur!= 1:  # If cur is not 1\n            cand[-1] *= cur  # Multiply the last element of cand by cur\n\n        if len(cand) < 3:  # If the length of cand is less than 3\n            print(\"NO\")  # Print \"NO\"\n\n        else:  # Otherwise\n            while len(cand)!= 3:  # While the length of cand is not equal to 3\n                cur = cand.pop()  # Remove the last element of cand and store it in cur\n                cand[-1] *= cur  # Multiply the second last element of cand by cur\n\n            print(\"YES\")  # Print \"YES\"\n            print(*cand)  # Print the elements of cand\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Find the prime factors of `n` by dividing it by increasing integers starting from 2.\n5. Store the prime factors in a list `fact`.\n6. If the length of `fact` is less than 3, it's impossible to represent `n` as a \u22c5 b \u22c5 c, so print \"NO\".\n7. If the length of `fact` is exactly 3, check if all factors are distinct. If not, print \"NO\".\n8. If the length of `fact` is between 4 and 5, check if there are at least 2 distinct factors. If not, print \"NO\".\n9. If the length of `fact` is greater than 5, it's impossible to represent `n` as a \u22c5 b \u22c5 c, so print \"NO\".\n10. If the length of `fact` is 3, assign the first factor to `a`, the second factor to `b`, and the last factor to `c`.\n11. If the length of `fact` is greater than 3, assign the first factor to `a` and the product of the next factors to `b`.\n12. Assign the last factor to `c`.\n13. Print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the integer n\n    n = int(input())\n\n    # Initialize an empty list to store prime factors\n    fact = []\n\n    # Find prime factors of n\n    i = 2\n    while n % i == 0:\n        # Divide n by the current factor and append it to the list\n        n = n // i\n        fact.append(i)\n\n    # Find remaining prime factors\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            # Divide n by the current factor and append it to the list\n            n = n // i\n            fact.append(i)\n\n    # If n is not 1, it means n itself is a prime factor\n    if n!= 1:\n        fact.append(n)\n\n    # If there are less than 3 prime factors, it's impossible to represent n as a \u22c5 b \u22c5 c\n    if len(fact) < 3:\n        print('NO')\n        continue\n\n    # Sort the prime factors in ascending order\n    fact.sort()\n\n    # If there are exactly 3 prime factors, check if they are distinct\n    if len(fact) == 3:\n        if len(set(fact)) < 3:\n            print('NO')\n            continue\n\n    # If there are between 4 and 5 prime factors, check if there are at least 2 distinct factors\n    if 4 <= len(fact) <= 5:\n        if len(set(fact)) < 2:\n            print('NO')\n            continue\n\n    # If there are more than 5 prime factors, it's impossible to represent n as a \u22c5 b \u22c5 c\n    if len(set(fact)) == 1:\n        # Assign the first two factors to a and b, and the last factor to c\n        a = fact[0] * fact[1]\n        b = 1\n        i = 2\n        while i < len(fact) - 1:\n            b *= fact[i]\n            i += 1\n        c = fact[-1]\n        print('YES')\n        print(a, b, c)\n    else:\n        # Assign the first factor to a, and the product of the next factors to b\n        a = fact[0]\n        b = 1\n        i = 1\n        while i < len(fact) - 1:\n            b *= fact[i]\n            i += 1\n        # Assign the last factor to c\n        c = fact[-1]\n        print('YES')\n        print(a, b, c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `prime` to store prime factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find prime factors.\n6. If `n` is divisible by the current number `i`, it's a prime factor, so append it to `prime` and divide `n` by `i`.\n7. If `n` is not 1 after the loop, it means `n` itself is a prime factor, so append it to `prime`.\n8. Check if the length of `prime` is less than 3. If so, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n9. Check if the length of the set of `prime` is less than 3. If so, it means there are duplicate prime factors, so it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n10. If the length of `prime` is at least 3 and there are no duplicate prime factors, calculate the product of the last two prime factors (`ans`) and print \"YES\" along with the first two prime factors and `ans`.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store prime factors\n    prime = []\n    \n    # Iterate from 2 to the square root of n to find prime factors\n    for i in range(2, int(n ** 0.5) + 1):\n        # If n is divisible by the current number i, it's a prime factor\n        if n % i == 0:\n            # Append the prime factor to the list\n            prime.append(i)\n            # Divide n by the prime factor\n            n //= i\n    \n    # If n is not 1 after the loop, it means n itself is a prime factor\n    if n!= 1:\n        # Append n to the list of prime factors\n        prime.append(n)\n    \n    # Check if it's impossible to represent n as a product of three distinct integers\n    if len(prime) < 3:\n        # Print \"NO\" if it's impossible\n        print(\"NO\")\n    else:\n        # Check if there are duplicate prime factors\n        if len(set(prime)) < 3:\n            # Print \"NO\" if there are duplicate prime factors\n            print(\"NO\")\n        else:\n            # Calculate the product of the last two prime factors\n            ans = 1\n            for i in prime[2:]:\n                # Multiply the last two prime factors\n                ans *= i\n            # Print \"YES\" along with the first two prime factors and the product\n            print(\"YES\")\n            print(prime[0], prime[1], ans)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate through each test case using a while loop, decrementing `t` after each iteration.\n3. Read the value of `n` for the current test case from the input.\n4. Initialize an empty list `a` to store the factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find its factors.\n6. If `n` is divisible by the current number `i`, append `i` to the list `a` and divide `n` by `i`.\n7. If the length of `a` becomes 2, break the loop as we have found two distinct factors.\n8. After the loop, check if the length of `a` is 2, and if `a[0]` is not equal to `a[1]`, `a[1]` is not equal to `n`, and `a[0]` is not equal to `n`. Also, ensure that `n` is greater than or equal to 2.\n9. If the conditions in step 8 are met, print \"YES\" followed by the three distinct integers `a[0]`, `a[1]`, and `n`.\n10. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nwhile t:\n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the factors of n\n    a = []\n    \n    # Iterate from 2 to the square root of n to find its factors\n    for i in range(2, int(sqrt(n))):\n        # If n is divisible by the current number i, append i to the list a and divide n by i\n        if n % i == 0:\n            a.append(i)\n            n = int(n / i)\n        \n        # If the length of a becomes 2, break the loop as we have found two distinct factors\n        if len(a) == 2:\n            break\n    \n    # Check if the length of a is 2, and if a[0] is not equal to a[1], a[1] is not equal to n, and a[0] is not equal to n\n    # Also, ensure that n is greater than or equal to 2\n    if len(a) == 2 and a[0]!= a[1] and a[1]!= n and a[0]!= n and n >= 2:\n        # Print \"YES\" followed by the three distinct integers a[0], a[1], and n\n        print(\"YES\", a[0], a[1], n)\n    else:\n        # Print \"NO\"\n        print(\"NO\")\n    \n    # Decrement t after each iteration\n    t -= 1\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Find the smallest divisor `a` of `n` greater than or equal to 2.\n5. If no such divisor is found, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\" and move to the next test case.\n6. Divide `n` by `a` to get `ne`.\n7. Find the smallest divisor `b` of `ne` greater than or equal to 2, excluding `a`.\n8. If no such divisor is found, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\" and move to the next test case.\n9. Check if `ne//b` is equal to `a` or `b`. If it is, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n10. Otherwise, print \"YES\" and the values of `a`, `b`, and `ne//b`.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\n\nfor _ in range(t):  # Iterate over each test case\n    n = int(input())  # Read the integer n for the current test case\n    # Find the smallest divisor a of n greater than or equal to 2\n    for a in range(2, int(n**0.5) + 1):\n        if n % a == 0:  # If a is a divisor of n\n            break  # Stop searching for a\n    else:  # If no divisor a is found\n        print(\"NO\")  # It's impossible to represent n as a product of three distinct integers\n        continue  # Move to the next test case\n\n    ne = n // a  # Divide n by a to get ne\n    # Find the smallest divisor b of ne greater than or equal to 2, excluding a\n    for b in range(2, int(ne**0.5) + 1):\n        if b == a:  # Exclude a as a possible divisor\n            continue\n        if ne % b == 0:  # If b is a divisor of ne\n            break  # Stop searching for b\n    else:  # If no divisor b is found\n        print(\"NO\")  # It's impossible to represent n as a product of three distinct integers\n        continue  # Move to the next test case\n\n    # Check if ne//b is equal to a or b\n    if ne // b in (a, b):  # If ne//b is equal to a or b\n        print(\"NO\")  # It's impossible to represent n as a product of three distinct integers\n    else:  # Otherwise\n        print(\"YES\")  # It's possible to represent n as a product of three distinct integers\n        print(a, b, ne // b)  # Print the values of a, b, and ne//b\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for each test case from the input.\n4. Initialize an empty list `a` to store the prime factors of `n`.\n5. Initialize a variable `d` to 2, which will be used to check for prime factors.\n6. Use a while loop to find prime factors of `n`. The loop continues as long as `d*d` is less than `n` and the length of list `a` is less than 2.\n7. Inside the while loop, check if `n` is divisible by `d` using the modulo operator (`n%d==0`). If it is, append `d` to list `a` and divide `n` by `d` using integer division (`n//=d`).\n8. Increment `d` by 1 after each iteration of the while loop.\n9. After the while loop, check if the length of list `a` is less than 2. If it is, print \"NO\" as it is impossible to represent `n` as a product of three distinct integers.\n10. If the length of list `a` is 2 or more, print \"YES\" and the value of `n` along with the elements of list `a`.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases t from the input\nfor i in range(int(input())):\n    # Read the value of n for each test case from the input\n    n = int(input())\n    \n    # Initialize an empty list a to store the prime factors of n\n    a = []\n    \n    # Initialize a variable d to 2, which will be used to check for prime factors\n    d = 2\n    \n    # Use a while loop to find prime factors of n\n    while (d*d < n) and len(a) < 2:\n        # Check if n is divisible by d using the modulo operator\n        if n % d == 0:\n            # If n is divisible by d, append d to list a and divide n by d\n            a.append(d)\n            n //= d\n        # Increment d by 1 after each iteration\n        d += 1\n    \n    # Check if the length of list a is less than 2\n    if len(a) < 2:\n        # If the length of list a is less than 2, print \"NO\"\n        print(\"NO\")\n    else:\n        # If the length of list a is 2 or more, print \"YES\" and the value of n along with the elements of list a\n        print(\"YES\")\n        print(n, *a)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize variables `x`, `y`, and `s` to keep track of the factors and the result string, respectively.\n4. Iterate through numbers from 2 to the cube root of `n` (inclusive) to find the first two distinct factors `x` and `y` of `n`.\n5. If `x` and `y` are found, update `n` by dividing it by `x` and `y`, and append `x` and `y` to the result string `s`.\n6. If `n` is less than 2 or if `x`, `y`, or `n` are not distinct, print \"NO\".\n7. Otherwise, append `n` to the result string `s`, print \"YES\", and print the result string `s`.\n\nCOMMENTED CODE:\n```python\nimport sys\n\n# Function to enable fast input/output\ndef fastio():\n    from io import StringIO\n    from atexit import register\n    global input\n    # Read the entire input and store it in a StringIO object\n    sys.stdin = StringIO(sys.stdin.read())\n    # Define a lambda function to read a line from the input\n    input = lambda : sys.stdin.readline().rstrip('\\r\\n')\n    # Create a StringIO object to store the output\n    sys.stdout = StringIO()\n    # Register a function to write the output to the standard output\n    register(lambda : sys.__stdout__.write(sys.stdout.getvalue()))\n\n# Call the fastio function\nfastio()\n\n# Iterate through each test case\nfor _ in range(int(input())):\n    # Read the integer n from the input\n    n = int(input())\n    # Initialize variables to store the result\n    s = ''\n    # Initialize variables to store the factors\n    f = x = y = 0\n    # Iterate through numbers from 2 to the cube root of n (inclusive)\n    for i in range(2, int(n**(2/3)) + 1):\n        # Check if n is divisible by i and x is not set\n        if n % i == 0 and x == 0:\n            # Append i to the result string\n            s += str(i) +''\n            # Update x and n\n            x = i\n            n //= i\n        # Check if n is divisible by i\n        elif n % i == 0:\n            # Append i to the result string\n            s += str(i) +''\n            # Update y and n\n            y = i\n            n //= i\n            # Break the loop as we have found two distinct factors\n            break\n    # Check if the factors are valid\n    if min([x, y, n]) < 2 or (x == y or y == n or x == n):\n        # Print \"NO\" if the factors are not valid\n        print(\"NO\")\n    else:\n        # Append n to the result string\n        s += str(n) +''\n        # Print \"YES\" and the result string\n        print(\"YES\" + '\\n' + s)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `e` to store the factors of `n`.\n5. Initialize a flag `a` to `False`, which will be used to check if a valid solution is found.\n6. Iterate from `2` to the square root of `n` (inclusive) to find factors of `n`.\n7. For each factor `i`, calculate `m = n / i` and check if `m` is an integer.\n8. If `m` is an integer, iterate from `2` to the square root of `m` (inclusive) to find factors of `m`.\n9. For each factor `j` of `m`, check if `m % j == 0` and if `n / (i * j)` is an integer.\n10. If all conditions are met, add the factors `[i, j, n / (i * j)]` to the list `e` and set `a` to `True`.\n11. If `a` is still `False` after the loop, print \"NO\" for the current test case.\n12. If `a` is `True`, print \"YES\" and the first element of the list `e` for the current test case.\n\nCOMMENTED CODE:\n```python\nfrom math import *\n\n# Iterate t times to process each test case\nfor _ in range(int(input())):\n    # Read the integer n from the input\n    n = int(input())\n    \n    # Initialize an empty list e to store the factors of n\n    e = []\n    \n    # Initialize a flag a to False, which will be used to check if a valid solution is found\n    a = False\n    \n    # Iterate from 2 to the square root of n (inclusive) to find factors of n\n    for i in range(2, int(sqrt(n)) + 1):\n        # Calculate m = n / i and check if m is an integer\n        m = n / i\n        if m.is_integer() == True:\n            # Iterate from 2 to the square root of m (inclusive) to find factors of m\n            for j in range(2, int(sqrt(m)) + 1):\n                # Check if m % j == 0 and if n / (i * j) is an integer\n                if m % j == 0:\n                    if (n / (i * j)).is_integer() == True and i!= j and j!= (n / (i * j)) and (n / (i * j))!= i:\n                        # Add the factors [i, j, n / (i * j)] to the list e and set a to True\n                        e.append([i, j,int( n / (i * j))])\n                        a=True\n                        # Break the inner loop as a valid solution is found\n                        break\n    # If a is still False after the loop, print \"NO\" for the current test case\n    if a == False:\n        print(\"NO\")\n    # If a is True, print \"YES\" and the first element of the list e for the current test case\n    else:\n        print(\"YES\")\n        print(*e[0])\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `k` to store the factors of `n`.\n5. Iterate from 2 to 10,000 to find the first factor `i` of `n` (where `n % i == 0`).\n6. Append `i` to `k` and divide `n` by `i` to reduce the problem size.\n7. Repeat steps 5 and 6 to find the second factor `j` of `n` (where `n % j == 0`).\n8. If `j` is not already in `k`, append `j` to `k` and divide `n` by `j` to reduce the problem size.\n9. Check if `k` has exactly two elements. If not, it means we couldn't find two distinct factors, so print \"NO\".\n10. If `k` has two elements, check if `n` is not equal to 1 or either of the factors in `k`. If so, print \"YES\" and the three numbers `k[0]`, `k[1]`, and `n`.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the factors of n\n    k = []\n    \n    # Iterate from 2 to 10,000 to find the first factor i of n\n    for i in range(2, 10000):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Append i to k and divide n by i to reduce the problem size\n            k.append(i)\n            n = n // i\n            # Break the loop since we found the first factor\n            break\n    \n    # Repeat the process to find the second factor j of n\n    for j in range(2, 10000):\n        # Check if j is a factor of n\n        if n % j == 0:\n            # Check if j is not already in k\n            if j not in k:\n                # Append j to k and divide n by j to reduce the problem size\n                k.append(j)\n                n = n // j\n                # Break the loop since we found the second factor\n                break\n    \n    # Check if k has exactly two elements\n    if len(k) == 2:\n        # Check if n is not equal to 1 or either of the factors in k\n        if n!= 1 and n!= k[0] and n!= k[1]:\n            # Print \"YES\" and the three numbers k[0], k[1], and n\n            print('YES')\n            print(k[0], k[1], n)\n        else:\n            # Print \"NO\" if the conditions are not met\n            print('NO')\n    else:\n        # Print \"NO\" if k has less than two elements\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the integer `n` for each test case from the input.\n4. Initialize a variable `prime` to 2, which will be used to find prime factors of `n`.\n5. Initialize an empty list `count` to store the prime factors of `n`.\n6. Use a while loop to find prime factors of `n`. The loop continues until `prime` is less than or equal to the square root of `n`.\n7. Inside the loop, check if `n` is divisible by `prime`. If it is, divide `n` by `prime` and append `prime` to the `count` list.\n8. If the length of `count` is 2, check if the remaining value of `n` (after division by the first two prime factors) is not already in `count`. If it's not, print \"YES\" and the three distinct integers `count[0]`, `count[1]`, and `int(n)`.\n9. If the loop completes without finding three distinct prime factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\na = int(input())\n\n# Iterate over each test case\nfor x in range(a):\n    # Read the integer n for each test case\n    a = int(input())\n    \n    # Initialize a variable prime to 2, which will be used to find prime factors of n\n    prime = 2\n    \n    # Initialize an empty list count to store the prime factors of n\n    count = list()\n    \n    # Use a while loop to find prime factors of n\n    while prime <= math.ceil(math.sqrt(a)):\n        # Check if n is divisible by prime\n        if a % prime == 0:\n            # Divide n by prime and append prime to the count list\n            a /= prime\n            count.append(prime)\n            \n            # If the length of count is 2, check if the remaining value of n is not already in count\n            if len(count) == 2:\n                if not a in count:\n                    # Print \"YES\" and the three distinct integers count[0], count[1], and int(n)\n                    print(\"YES\")\n                    print(count[0], count[1], int(a))\n                    # Break the loop as we have found three distinct prime factors\n                    break\n        \n        # Increment prime by 1\n        prime += 1\n    \n    # If the loop completes without finding three distinct prime factors, print \"NO\"\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate through each test case, and for each test case:\n   a. Read the number `n`.\n   b. Initialize an empty list `tmp` to store the prime factors of `n`.\n   c. Iterate from 2 to the square root of `n` to find its prime factors.\n   d. If `n` is divisible by the current number `i`, add `i` to `tmp`.\n   e. If the length of `tmp` is 3, break the loop as we have found three distinct prime factors.\n   f. If the length of `tmp` is less than or equal to 1, it is impossible to represent `n` as a product of three distinct integers, so append \"NO\" to the answer list.\n   g. If the length of `tmp` is exactly 2, check if `n` can be represented as a product of `tmp[0]`, `tmp[1]`, and another distinct integer. If yes, append \"YES\" and the representation to the answer list.\n   h. If the length of `tmp` is exactly 3, check if `n` can be represented as a product of `tmp[0]`, `tmp[1]`, and `tmp[2]`. If yes, append \"YES\" and the representation to the answer list.\n   i. If none of the above conditions are met, append \"NO\" to the answer list.\n3. Print the answer for each test case.\n\nCOMMENTED CODE:\n```python\nimport sys\nimport math\ninput = sys.stdin.readline\nins = lambda: input().rstrip()\nini = lambda: int(input().rstrip())\ninm = lambda: map(int, input().split())\ninl = lambda: list(map(int, input().split()))\n\nt = ini()  # Read the number of test cases\nans = []  # Initialize an empty list to store the answers\nandsindex = [0] * t  # Initialize an empty list to store the representations\n\nfor _ in range(t):  # Iterate through each test case\n    n = ini()  # Read the number for the current test case\n    i = 2  # Initialize a variable to store the current number\n    tmp = []  # Initialize an empty list to store the prime factors of n\n    while n >= i * i:  # Iterate from 2 to the square root of n\n        if n % i == 0:  # Check if n is divisible by the current number\n            tmp.append(i)  # If yes, add the current number to tmp\n        if len(tmp) == 3:  # If we have found three distinct prime factors\n            break  # Break the loop\n        i += 1  # Increment the current number\n    if len(tmp) <= 1:  # If we have found less than or equal to one prime factor\n        ans.append(\"NO\")  # It is impossible to represent n as a product of three distinct integers\n    elif len(tmp) >= 2:  # If we have found two or more prime factors\n        if len(tmp) == 3:  # If we have found exactly three prime factors\n            if tmp[0] * tmp[1] * tmp[2] == n:  # Check if n can be represented as a product of tmp[0], tmp[1], and tmp[2]\n                ans.append(\"YES\")  # If yes, append \"YES\" to the answer list\n                andsindex[len(ans) - 1] = f\"{tmp[0]} {tmp[1]} {tmp[2]}\"  # Store the representation\n                continue  # Continue to the next test case\n            y = (n / (tmp[0] * tmp[2])).is_integer()  # Check if n can be represented as a product of tmp[0], tmp[2], and another distinct integer\n            if y and n / (tmp[0] * tmp[2]) not in tmp:  # Check if the other integer is distinct\n                ans.append(\"YES\")  # If yes, append \"YES\" to the answer list\n                andsindex[len(ans) - 1] = f\"{tmp[0]} {tmp[2]} {n // (tmp[0] * tmp[2])}\"  # Store the representation\n                continue  # Continue to the next test case\n        x = (n / (tmp[0] * tmp[1])).is_integer()  # Check if n can be represented as a product of tmp[0], tmp[1], and another distinct integer\n        if x and n / (tmp[0] * tmp[1]) not in tmp:  # Check if the other integer is distinct\n            ans.append(\"YES\")  # If yes, append \"YES\" to the answer list\n            andsindex[len(ans) - 1] = f\"{tmp[0]} {tmp[1]} {n // (tmp[0] * tmp[1])}\"  # Store the representation\n        else:  # If none of the above conditions are met\n            ans.append(\"NO\")  # Append \"NO\" to the answer list\n\nfor i in range(t):  # Print the answers for each test case\n    print(ans[i])\n    if ans[i] == \"YES\":  # If the answer is \"YES\"\n        print(andsindex[i])  # Print the representation\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a `for` loop.\n3. Read the value of `n` for each test case from the input.\n4. Initialize variables `a`, `b`, and `c` to 0, which will store the three distinct integers.\n5. Initialize a variable `j` to 2, which will be used as a divisor to find the factors of `n`.\n6. Use a `while` loop to iterate from `j` to the square root of `n`.\n7. Inside the loop, check if `n` is divisible by `j` using the modulo operator (`n % j == 0`).\n8. If `n` is divisible by `j`, check if `a` is 0. If it is, assign `j` to `a` and divide `n` by `j`. Increment `j` by 1.\n9. If `a` is not 0, assign `j` to `b`, and divide `n` by `j` to get `c`. Break out of the loop.\n10. After the loop, check if `a`, `b`, and `c` are non-zero and distinct, and if they are all greater than or equal to 2.\n11. If the conditions in step 10 are met, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the value of n for each test case\n    n = int(input())\n    # Initialize variables a, b, and c to 0\n    a = 0\n    b = 0\n    c = 0\n    # Initialize a variable j to 2\n    j = 2\n\n    # Use a while loop to iterate from j to the square root of n\n    while j <= math.sqrt(n):\n        # Check if n is divisible by j\n        if n % j == 0:\n            # If a is 0, assign j to a and divide n by j\n            if a == 0:\n                a = j\n                n = int(n / j)\n                j += 1\n            # If a is not 0, assign j to b, and divide n by j to get c\n            else:\n                b = j\n                c = int(n / j)\n                break\n        # If n is not divisible by j, increment j by 1\n        else:\n            j += 1\n\n    # Check if a, b, and c are non-zero and distinct, and if they are all greater than or equal to 2\n    if (a!= 0 and b!= 0 and c!= 0) and (a!= b and b!= c and a!= c) and (a >= 2 and b >= 2 and c >= 2):\n        # If the conditions are met, print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a, b, c)\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize variables `a`, `b`, and `c` to 0.\n4. Start a loop from `i = 2` and check if `n` is divisible by `i`. If it is, set `a` to `i` and divide `n` by `i`.\n5. If `n` is not 1 and `a` is not 0, start another loop from `i = a + 1` and check if `n` is divisible by `i`. If it is, set `b` to `i` and divide `n` by `i`.\n6. If `n` is not 1 and `b` is not 0, set `c` to `n` and print \"YES\" along with the values of `a`, `b`, and `c`.\n7. If any of the above conditions are not met, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = inp(1)\n\n# For each test case\nwhile t:\n    t -= 1\n    # Read the integer n\n    n = inp(1)\n    \n    # Initialize variables a, b, and c to 0\n    a = b = c = 0\n    \n    # Start a loop from i = 2\n    i = 2\n    while i * i < n:\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Set a to i and divide n by i\n            a = i\n            n //= a\n            break\n        # Increment i\n        i += 1\n    \n    # If n is not 1 and a is not 0\n    if n!= 1 and a!= 0:\n        # Start another loop from i = a + 1\n        i = a + 1\n        while i * i < n:\n            # Check if n is divisible by i\n            if n % i == 0:\n                # Set b to i and divide n by i\n                b = i\n                n //= b\n                break\n            # Increment i\n            i += 1\n        \n        # If n is not 1 and b is not 0\n        if n!= 1 and b!= 0:\n            # Set c to n\n            c = n\n            # Print \"YES\" along with the values of a, b, and c\n            print(\"YES\")\n            print(a, b, c)\n        else:\n            # Print \"NO\"\n            print(\"NO\")\n    else:\n        # Print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find all factors of `n` using the `getFactors` function.\n4. Sort the factors in ascending order.\n5. Iterate through the factors to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n6. Check if `a`, `b`, and `c` are distinct and satisfy the condition `2 \u2264 a, b, c`.\n7. If a valid solution is found, print \"YES\" and the values of `a`, `b`, and `c`.\n8. If no valid solution is found after iterating through all factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef getFactors(n):\n    # Initialize an empty list to store factors\n    fact = []\n    # Start checking from 2, the smallest prime number\n    i = 2\n    # Continue until the square of i is less than or equal to n\n    while i * i <= n:\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If divisible, append i to the factors list\n            fact.append(i)\n            # If i is not equal to n // i, append n // i to the factors list\n            if i!= n // i:\n                fact.append(n // i)\n        # Increment i by 1\n        i += 1\n    # Return the list of factors\n    return fact\n\n# Read the number of test cases\nt = int(input())\n# Iterate through each test case\nwhile t > 0:\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find all factors of n\n    fact = getFactors(n)\n    # Sort the factors in ascending order\n    fact.sort()\n    # Initialize a flag to track if a valid solution is found\n    found = False\n    # Iterate through the factors to find three distinct integers a, b, and c\n    for i in range(len(fact) - 1):\n        for j in range(len(fact)):\n            # Assign the current factors to a and b\n            a = fact[i]\n            b = fact[j]\n            # Calculate c as n divided by the product of a and b\n            c = n // (a * b)\n            # Check if c is a factor of n\n            if c in fact:\n                # Check if a, b, and c are distinct and satisfy the condition 2 \u2264 a, b, c\n                if a - b!= 0 and b - c!= 0 and a - c!= 0:\n                    # If the conditions are met, print \"YES\" and the values of a, b, and c\n                    print(\"YES\")\n                    print(a, b, c)\n                    # Set the found flag to True\n                    found = True\n                    # Break out of the inner loop\n                    break\n        # If a valid solution is found, break out of the outer loop\n        if found:\n            break\n    # If no valid solution is found, print \"NO\"\n    if not found:\n        print(\"NO\")\n    # Decrement the test case counter\n    t -= 1\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. If the number of distinct prime factors is less than 3, check if `n` can be represented as a product of three distinct integers.\n5. If `n` can be represented, print \"YES\" and the representation. Otherwise, print \"NO\".\n6. If the number of distinct prime factors is 3 or more, print \"YES\" and the representation of `n` as a product of its prime factors.\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef primeFactors(n, d): \n    # Function to find prime factors of n and store them in dictionary d\n    # d is a dictionary where keys are prime factors and values are their powers\n    \n    # Print the number of two's that divide n \n    while n % 2 == 0: \n        try:\n            # If 2 is already in d, increment its power\n            if d[2] >= 0:\n                d[2] += 1\n        except:\n            # If 2 is not in d, add it with power 1\n            d[2] = 1 \n        n = n / 2\n    \n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        # while i divides n, print i ad divide n \n        while n % i == 0: \n            try:\n                # If i is already in d, increment its power\n                if d[int(i)] >= 0:\n                    d[int(i)] += 1\n            except:\n                # If i is not in d, add it with power 1\n                d[int(i)] = 1\n            n = n / i\n    \n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        # If n is a prime number, add it to d with power 1\n        d[int(n)] = 1\n    return d\n\nt = int(input())\n# Read the number of test cases\nfor r in range(t):\n    n = int(input())\n    # For each test case, read the integer n\n    d = primeFactors(n, {})\n    # Find the prime factors of n\n    if len(d) < 3:\n        # If the number of distinct prime factors is less than 3\n        try:\n            # If n is a perfect cube, print \"NO\"\n            if d[n] >= 0:\n                print(\"NO\")\n        except:\n            # If n is not a perfect cube\n            if len(d) == 1:\n                # If n has only one prime factor\n                a = 1\n                for i in d:\n                    a = i\n                # Check if n can be represented as a product of three distinct integers\n                if d[a] < 6:\n                    print(\"NO\")\n                else:\n                    # If n can be represented, print \"YES\" and the representation\n                    print(\"YES\")\n                    s = str(a) + \" \" + str(int(a ** 2)) + \" \" + str(int(a ** (d[a] - 3)))\n                    print(s)\n            else:\n                # If n has two prime factors\n                summ = 0\n                temp = []\n                for i in d:\n                    summ += d[i]\n                    temp.append(i)\n                # Check if n can be represented as a product of three distinct integers\n                if summ <= 3:\n                    print(\"NO\")\n                else:\n                    # If n can be represented, print \"YES\" and the representation\n                    print(\"YES\")\n                    a = temp[0]\n                    b = temp[1]\n                    s = str(int(a)) + \" \" + str(int(b)) + \" \"\n                    tempd = (int(a ** (d[a] - 1))) * (int(b ** (d[b] - 1)))\n                    s += str(int(tempd))\n                    print(s)\n                    \n    else:\n        # If the number of distinct prime factors is 3 or more\n        l = []\n        for i in d:\n            l.append(i)\n        # Print \"YES\" and the representation of n as a product of its prime factors\n        print(\"YES\")\n        s = str(int(l[0] ** d[l[0]])) + \" \" + str(int(l[1] ** d[l[1]])) + \" \"\n        temp = 1\n        for i in range(2, len(l)):\n            temp *= (int(l[i] ** d[l[i]]))\n        s += str(int(temp))\n        print(s)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `na` to `True`, which will be used to track whether a valid solution is found.\n5. Calculate the square root of `n` and add 1 to it. This will be used as an upper bound for the loop that finds the first factor `a`.\n6. Iterate over all numbers `a` from 2 to the calculated upper bound.\n7. For each `a`, check if `n` is divisible by `a`. If not, move to the next `a`.\n8. If `n` is divisible by `a`, calculate `q` as `n` divided by `a`.\n9. Calculate the square root of `q` and add 1 to it. This will be used as an upper bound for the loop that finds the second factor `b`.\n10. Iterate over all numbers `b` from `a + 1` to the calculated upper bound.\n11. For each `b`, check if `q` is divisible by `b`. If not, move to the next `b`.\n12. If `q` is divisible by `b`, calculate `c` as `q` divided by `b`.\n13. Check if `c` is greater than `b`. If not, it means that `b` and `c` are not distinct, so move to the next `b`.\n14. If `c` is greater than `b`, print \"YES\" and the values of `a`, `b`, and `c`.\n15. Set `na` to `False` to indicate that a valid solution has been found.\n16. If the loop completes without finding a valid solution, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import *\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor z in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Initialize a flag to track whether a valid solution is found\n    na = True\n\n    # Calculate the square root of n and add 1 to it\n    sq = ceil(sqrt(n)) + 1\n\n    # Iterate over all numbers a from 2 to the calculated upper bound\n    for a in range(2, sq):\n        # Check if a valid solution has already been found\n        if not na:\n            break\n\n        # Check if n is divisible by a\n        if n % a == 0:\n            # Calculate q as n divided by a\n            q = n // a\n\n            # Calculate the square root of q and add 1 to it\n            sq2 = ceil(sqrt(q)) + 1\n\n            # Iterate over all numbers b from a + 1 to the calculated upper bound\n            for b in range(a + 1, sq2):\n                # Check if q is divisible by b\n                if q % b == 0:\n                    # Calculate c as q divided by b\n                    c = q // b\n\n                    # Check if c is greater than b\n                    if c > b:\n                        # Print \"YES\" and the values of a, b, and c\n                        print('YES')\n                        print(a, b, c)\n\n                        # Set na to False to indicate that a valid solution has been found\n                        na = False\n\n                        # Break out of the inner loop\n                        break\n\n    # If no valid solution was found, print \"NO\"\n    if na:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. If `n` has no prime factors, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c`. In this case, print \"NO\".\n5. Otherwise, use the `find3` function to find three distinct prime factors of `n`.\n6. If `find3` returns a list of length 3, print \"YES\" and the three prime factors as a space-separated string.\n7. If `find3` returns a list of length less than 3, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c`. In this case, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef primeFactors(n):\n    # Initialize an empty list to store prime factors\n    vals = []\n    \n    # Print the number of two's that divide n\n    two = False\n    while n % 2 == 0:\n        # If this is the first time we encounter a 2, add it to the list\n        if not two:\n            vals.append(2)\n            two = True\n        vals.append(int(n))\n        n = n / 2\n\n    # n must be odd at this point\n    # so a skip of 2 ( i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # while i divides n, print i ad divide n\n        while n % i == 0:\n            vals.append(i)\n            n = n / i\n\n    # Condition if n is a prime\n    # number greater than 2\n    if n > 2:\n        vals.append(int(n))\n    \n    # Remove duplicates from the list\n    if len(vals)!= 0:\n        vals.pop(0)\n    vals.sort()\n    i = 1\n    while i < len(vals):\n        if vals[i-1] == vals[i]:\n            del vals[i]\n        else:\n            i+= 1\n    return vals\n\ndef find3(number):\n    # Find prime factors of the number\n    factors = primeFactors(number)\n    \n    # If the number has no prime factors, return an empty list\n    if len(factors) == 0:\n        return []\n    \n    # Initialize the list of final factors with the first prime factor\n    finalFactors = [factors[0]]\n    \n    # Calculate the new number by dividing the original number by the first prime factor\n    newNumber = int(number/factors[0])\n    \n    # Find prime factors of the new number\n    factors = primeFactors(newNumber)\n    \n    # If the new number has no prime factors, add it to the list of final factors\n    if len(factors) == 0:\n        finalFactors.append(newNumber)\n        return finalFactors\n    \n    # Find the next prime factor that is not equal to the first prime factor\n    pos = 0\n    if factors[pos] == finalFactors[0]:\n        newFound = False\n        while not newFound:\n            if factors[pos]!= finalFactors[0]:\n                newFound = True\n            else:\n                pos += 1\n                if pos >= len(factors):\n                    return finalFactors\n    \n    # Add the next prime factor to the list of final factors\n    finalFactors.append(factors[pos])\n    \n    # Calculate the new number by dividing the new number by the next prime factor\n    newNumber = int(newNumber/factors[pos])\n    \n    # Check if the new number is equal to any of the factors in the list of final factors\n    for elem in finalFactors:\n        if newNumber == elem:\n            return finalFactors\n    \n    # Add the new number to the list of final factors\n    finalFactors.append(newNumber)\n    return finalFactors\n\ndef solve(number):\n    # Find three distinct prime factors of the number\n    ans = find3(number)\n    \n    # Convert each factor to a string\n    for i in range(len(ans)):\n        ans[i] = str(ans[i])\n    \n    # If the list of factors has length 3, print \"YES\" and the factors as a space-separated string\n    if len(ans) == 3:\n        print(\"YES\")\n        p = \" \".join(ans)\n        print(p)\n    # Otherwise, print \"NO\"\n    else:\n        print(\"NO\")\n\n# Read the number of test cases\ninput()\n\n# Read each test case and solve it\nwhile True:\n    try:\n        val = int(input())\n        solve(val)\n    except EOFError:\n        break\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Initialize a flag `tf` to track whether a valid triplet is found.\n5. Iterate from 2 to the square root of `n` (inclusive) to find the first factor `a` of `n`.\n6. If a factor `a` is found, set `tf` to `True` and break the loop.\n7. If `tf` is `True`, iterate from 2 to the square root of `b` (inclusive) to find the second factor `c` of `b`.\n8. If a valid second factor `c` is found, print \"YES\" and the triplet `(a, b, c)`.\n9. If no valid second factor `c` is found, print \"NO\".\n10. If `tf` is `False`, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Initialize a flag to track whether a valid triplet is found\n    tf = False\n\n    # Iterate from 2 to the square root of n (inclusive) to find the first factor a of n\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Set a to the current factor i\n            a = i\n            # Set b to the quotient of n and i\n            b = n // i\n            # Set tf to True to indicate that a valid triplet is found\n            tf = True\n            # Break the loop as we have found the first factor\n            break\n\n    # If tf is True, we have found a valid first factor a\n    if tf:\n        # Reset tf to False for the second factor\n        tf = False\n\n        # Iterate from 2 to the square root of b (inclusive) to find the second factor c of b\n        for i in range(2, int(b ** (1 / 2)) + 1):\n            # Check if b is divisible by i\n            if b % i == 0:\n                # Check if i, b//i, and b are distinct\n                if i!= a and b // i!= a and b // i!= i:\n                    # Set c to the quotient of b and i\n                    c = b // i\n                    # Set b to the current factor i\n                    b = i\n                    # Set tf to True to indicate that a valid triplet is found\n                    tf = True\n                    # Break the loop as we have found the second factor\n                    break\n\n        # If tf is True, we have found a valid second factor c\n        if tf:\n            # Print \"YES\" to indicate that a valid triplet is found\n            print('YES')\n            # Print the triplet (a, b, c)\n            print(a, b, c)\n        else:\n            # Print \"NO\" to indicate that no valid triplet is found\n            print('NO')\n    else:\n        # Print \"NO\" to indicate that no valid triplet is found\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Check if `n` is less than 24. If it is, print \"NO\" as it's impossible to find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n`.\n5. Otherwise, try to find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n`.\n6. Iterate over all numbers `i` from 4 to the square root of `n` (inclusive) to find a factor `i` of `n`.\n7. If `n` is divisible by `i`, calculate `a` as `n // i` and `b` as `i`.\n8. Check if `a` has a factor `j` other than `b` and `a // j` is greater than 1. If it does, print \"YES\" and the values of `b`, `j`, and `a // j`.\n9. If no such factor `j` is found for `a`, check if `b` has a factor `j` other than `a` and `b // j` is greater than 1. If it does, print \"YES\" and the values of `a`, `j`, and `b // j`.\n10. If no such factors are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import ceil, sqrt\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Check if n is less than 24\n    if n < 24:\n        # If n is less than 24, print \"NO\"\n        print('NO')\n    else:\n        try:\n            # Iterate over all numbers i from 4 to the square root of n (inclusive)\n            for i in range(4, ceil(sqrt(n)) + 1):\n                # Check if n is divisible by i\n                if n % i == 0:\n                    # Calculate a as n // i and b as i\n                    a = n // i\n                    b = i\n\n                    # Check if a has a factor j other than b and a // j is greater than 1\n                    for j in range(2, ceil(sqrt(a))):\n                        # Check if a is divisible by j and j is not equal to b and a // j is not equal to b and a // j is greater than 1\n                        if a % j == 0 and j!= b and a // j!= b and a // j > 1:\n                            # If the conditions are met, print \"YES\" and the values of b, j, and a // j\n                            print('YES')\n                            print(b, j, a // j)\n                            # Raise SystemExit to exit the loop and continue to the next test case\n                            raise SystemExit\n\n                    # Check if b has a factor j other than a and b // j is greater than 1\n                    for j in range(2, ceil(sqrt(b))):\n                        # Check if b is divisible by j and j is not equal to a and b // j is not equal to a and b // j is greater than 1\n                        if b % j == 0 and j!= a and b // j!= a and b // j > 1:\n                            # If the conditions are met, print \"YES\" and the values of a, j, and b // j\n                            print('YES')\n                            print(a, j, b // j)\n                            # Raise SystemExit to exit the loop and continue to the next test case\n                            raise SystemExit\n        except SystemExit:\n            # If SystemExit is raised, continue to the next test case\n            continue\n        else:\n            # If no factors are found, print \"NO\"\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `L` to store prime factors and their counts, an empty list `r` to store the final result, and a variable `f` to track if a solution is found.\n4. Calculate the square root of `n` and use it as an upper bound for the loop.\n5. Iterate from 2 to the square root of `n` (inclusive) to find prime factors of `n`.\n6. For each prime factor `j`, divide `n` by `j` as many times as possible and store the count `c` in `L`.\n7. If the count `c` is greater than or equal to 3, handle it based on the count:\n   - If `c` is greater than or equal to 6, add `j`, `j*j`, and `j**3` to `r` and update `n` accordingly.\n   - If `c` is between 3 and 6, add `j` and `j*j` to `r` and update `n` accordingly.\n   - If `c` is 2 or less, add `j` to `r` and update `n` accordingly.\n8. After processing all prime factors, check the length of `r`:\n   - If `r` has exactly 3 elements, multiply the last element by `n` and set `f` to `True`.\n   - If `r` has exactly 2 elements and `n` is greater than 1 and not equal to the elements in `r`, add `n` to `r` and set `f` to `True`.\n9. If a solution is found (`f` is `True`), print \"YES\" and the elements in `r`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Initialize lists and variables\n    L, a, r = [], n, []  # L for prime factors and counts, a for remaining n, r for result\n    m = math.ceil(math.sqrt(n))  # Upper bound for the loop\n    f = False  # Flag to track if a solution is found\n\n    # Iterate from 2 to the square root of n\n    for j in range(2, m+1):\n        # Check if n is divisible by j\n        if a % j == 0:\n            # Count the number of times n is divisible by j\n            c = 0\n            while a % j == 0:\n                a //= j  # Divide n by j\n                c += 1  # Increment the count\n\n            # Store the prime factor and its count in L\n            L.append((j, c))\n\n            # Handle the count based on its value\n            if c >= 3:\n                # If c is greater than or equal to 6, add j, j*j, and j**3 to r and update n\n                if c >= 6:\n                    if j not in r: r.append(j)  # Add j to r if not already present\n                    if j * j not in r: r.append(j * j)  # Add j*j to r if not already present\n                    if j ** 3 not in r: r.append(j ** 3)  # Add j**3 to r if not already present\n                    a *= j ** (c - 6)  # Update n\n\n                # If c is between 3 and 6, add j and j*j to r and update n\n                else:\n                    if j not in r: r.append(j)  # Add j to r if not already present\n                    if j * j not in r: r.append(j * j)  # Add j*j to r if not already present\n                    a *= j ** (c - 3)  # Update n\n\n            # If c is 2 or less, add j to r and update n\n            else:\n                if j not in r: r.append(j)  # Add j to r if not already present\n                a *= j ** (c - 1)  # Update n\n\n            # Check if r has more than 3 elements and adjust accordingly\n            if len(r) > 3:\n                c = 1\n                for k in range(3, len(r)):\n                    c *= r[k]  # Calculate the product of elements in r starting from index 3\n                r[2] *= c  # Multiply the element at index 2 in r by the calculated product\n                while len(r) > 3: r.pop()  # Remove excess elements from r\n\n            # Check if r has exactly 3 elements and update n\n            if len(r) == 3:\n                r[2] *= a  # Multiply the last element in r by n\n                f = True  # Set the flag to True\n                break\n\n            # Check if r has exactly 2 elements and n is greater than 1 and not equal to the elements in r\n            elif len(r) == 2 and a > 1 and a!= r[0] and a!= r[1]:\n                r.append(a)  # Add n to r\n                f = True  # Set the flag to True\n                break\n\n    # Print the result based on the flag\n    if f:\n        print(\"YES\")\n        print(r[0], r[1], r[2])  # Print the elements in r\n    else:\n        print(\"NO\")  # Print \"NO\" if no solution is found\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize `num1` to 2, which will be used to find the prime factors of `n`.\n4. Calculate the upper limit `l` for the prime factorization, which is the cube root of `n` rounded up to the nearest integer.\n5. Iterate through all possible combinations of `num1`, `num2`, and `num3` such that `num1 * num2 * num3 = n` and `num1`, `num2`, and `num3` are distinct integers greater than or equal to 2.\n6. If a valid combination is found, print \"YES\" and the combination, then return.\n7. If no valid combination is found after iterating through all possibilities, print \"NO\" and return.\n\nCOMMENTED CODE:\n```python\nimport math\nfrom collections import defaultdict, Counter, deque\n\nINF = float('inf')\n\n# Function to calculate the greatest common divisor (GCD) of two numbers\ndef gcd(a, b):\n    # Use the Euclidean algorithm to find the GCD\n    while b:\n        a, b = b, a%b\n    return a\n\n# Function to find the prime factor of a number\ndef primeFactor(n):\n    # If the number is even, return 2 as the prime factor\n    if n % 2 == 0:\n        return 2\n    # Initialize the variable i to 3, which will be used to find the prime factor\n    i = 3\n    # Iterate through all possible prime factors until the square of i is less than or equal to n\n    while (i ** 2) <= n:\n        # If n is divisible by i, return i as the prime factor\n        if n % i == 0:\n            return i \n        # Increment i by 1 to check the next possible prime factor\n        i += 1\n    # If no prime factor is found, return n as the prime factor\n    return n\n\ndef main():\n    # Read the number of test cases from the input\n    n = int(input())\n    \n    # Initialize num1 to 2, which will be used to find the prime factors of n\n    num1 = 2\n    # Calculate the upper limit l for the prime factorization, which is the cube root of n rounded up to the nearest integer\n    l = math.ceil((n ** (1 / 3)))\n    # Iterate through all possible combinations of num1, num2, and num3 such that num1 * num2 * num3 = n and num1, num2, and num3 are distinct integers greater than or equal to 2\n    while num1 <= l:\n        # Initialize num2 to l, which will be used to find the prime factors of n\n        num2 = l\n        # Iterate through all possible combinations of num2 and num3 such that num1 * num2 * num3 = n and num1, num2, and num3 are distinct integers greater than or equal to 2\n        while n % num1 == 0 and  num2 <= l * l:\n            # Check if n is divisible by num1 * num2\n            if n % (num1 * num2)  == 0:\n                # Calculate num3 as n // (num1 * num2)\n                num3 = n // (num1 * num2)\n                # Check if num3 is not equal to 1 and num1, num2, and num3 are distinct integers greater than or equal to 2\n                if num3!= 1 and num1!= num3  and num2!= num3 and num1!= num2:\n                    # Print \"YES\" and the combination\n                    print('YES')\n                    print(num1, num2, num3)\n                    # Return to indicate that a valid combination has been found\n                    return\n            # Increment num2 by 1 to check the next possible combination\n            num2 += 1\n        \n        # Increment num1 by 1 to check the next possible combination\n        num1 += 1\n    \n    # Initialize num1 to 2, which will be used to find the prime factors of n\n    num1 = 2\n    # Iterate through all possible combinations of num1 and num2 such that num1 * num2 * num3 = n and num1, num2, and num3 are distinct integers greater than or equal to 2\n    while num1 <= l:\n        # Initialize num2 to num1 + 1, which will be used to find the prime factors of n\n        num2 = num1 + 1\n        # Iterate through all possible combinations of num2 and num3 such that num1 * num2 * num3 = n and num1, num2, and num3 are distinct integers greater than or equal to 2\n        while n % num1 == 0 and num2 <= l:\n            # Check if n is divisible by num1 * num2\n            if n % (num1 * num2)  == 0:\n                # Calculate num3 as n // (num1 * num2)\n                num3 = n // (num1 * num2)\n                # Check if num3 is not equal to 1 and num1, num2, and num3 are distinct integers greater than or equal to 2\n                if num3!= 1 and num1!= num3  and num2!= num3 and num1!= num2:\n                    # Print \"YES\" and the combination\n                    print('YES')\n                    print(num1, num2, num3)\n                    # Return to indicate that a valid combination has been found\n                    return\n            # Increment num2 by 1 to check the next possible combination\n            num2 += 1\n        # Increment num1 by 1 to check the next possible combination\n        num1 += 1\n    \n    # If no valid combination is found, print \"NO\"\n    print('NO')\n    # Return to indicate that no valid combination has been found\n    return\n\nif __name__ == \"__main__\":\n    # Read the number of test cases from the input\n    t = int(input())\n    # Iterate through all test cases\n    for _ in range(t):\n        # Call the main function to solve the current test case\n        main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize variables `f` to `n` and `k` to 0.\n5. Iterate from 2 to the square root of `n` (inclusive) to find the first prime factor `a` of `n`.\n6. If `n` is divisible by `a` and `a` is not equal to `n`, update `f` to `n` divided by `a`.\n7. Iterate from `a+1` to the square root of `f` (inclusive) to find the second prime factor `b` of `f`.\n8. If `f` is divisible by `b` and `b` is not equal to `f`, update `c` to `f` divided by `b` and set `k` to 1.\n9. If `k` is 1, print \"YES\" and the values of `a`, `b`, and `c`, then break the loop.\n10. If the loop completes without finding two distinct prime factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor tin in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize variables\n    f = n; k = 0;\n    \n    # Iterate from 2 to the square root of n to find the first prime factor\n    for i in range(2, int(n**0.5) + 1):\n        # Check if n is divisible by i and i is not equal to n\n        if f % i == 0 and f // i!= i:\n            # Update a to the first prime factor and f to n divided by a\n            a = i; f = f // i;\n            \n            # Iterate from i+1 to the square root of f to find the second prime factor\n            for j in range(i + 1, int(f**0.5) + 1):\n                # Check if f is divisible by j and j is not equal to f\n                if f % j == 0 and f // j!= j:\n                    # Update b to the second prime factor and c to f divided by b\n                    b = j; c = f // j; k = 1;\n                    \n                    # Print \"YES\" and the values of a, b, and c\n                    print(\"YES\"); print(a, b, c);\n                    \n                    # Break the loop\n                    break;\n        # If k is 1, break the loop\n        if k == 1:\n            break\n    \n    # If k is still 0, print \"NO\"\n    if k == 0:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `seen` to store the prime factors of `n`.\n4. Iterate from `i = 2` to the square root of `n` (inclusive) to find prime factors.\n5. If `i` is not a factor of `n` that has been seen before, check if `n` is divisible by `i`.\n6. If `n` is divisible by `i`, add `i` to the `seen` list and update `n` by dividing it by `i`.\n7. If the length of `seen` is 2 and the remaining `n` is greater than the last element in `seen`, add `n` to `seen` and print \"YES\" along with the elements of `seen`.\n8. If no such factors are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\n\"\"\"\n1294C\n\"\"\"\n\ndef inp():\n    \"\"\"\n    For taking integer inputs.\n    \"\"\"\n    return(int(input()))\n\ndef get_n_ints(n):\n    \"\"\"\n    For taking List inputs.\n    \"\"\"\n    result = []\n    i = 0\n    while i < n:\n        val = input().rstrip(\"\\n\")\n        result.append(int(val))\n        i += 1\n    return result\n\ndef problem(number):\n    # Initialize an empty list to store prime factors\n    seen = list()\n    \n    # Iterate from 2 to the square root of number\n    i = 2\n    while i*i <= number:\n        # Check if i is not a factor that has been seen before\n        if i not in seen:\n            # Check if number is divisible by i\n            if number%i == 0:\n                # Add i to the seen list and update number\n                seen.append(i)\n                number = number//i\n        \n        # If we have found two distinct factors and the remaining number is greater than the last factor, print the result\n        if len(seen) == 2 and number > seen[-1]:\n            seen.append(number)\n            print(\"YES\")\n            print(*(seen))  # Print the elements of seen as a tuple\n            return\n        \n        # Increment i\n        i += 1\n    \n    # If no such factors are found, print \"NO\"\n    print(\"NO\")\n\n# Read the number of test cases\nn = inp()\n\n# Read the test cases\narr = get_n_ints(n)\n\n# Iterate over the test cases\nfor i in range(n):\n    # Solve each test case\n    problem(arr[i])\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Check if `n` is a prime number using the `prime(n)` function. If it is, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers.\n5. If `n` is not prime, initialize a flag `flag` to 0 and an empty list `ans` to store the result.\n6. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n7. For each factor `i`, check if `i` is not prime using the `prime(i)` function. If it's not prime, calculate `a` as `n/i` and check if `a` has two distinct factors `b` and `c` such that `i = b * c` and `a!= b` and `a!= c` and `b!= c`. If such factors are found, set `flag` to 1 and break the loop.\n8. If `flag` is still 0 after the loop, it means no such factors were found, so print \"NO\".\n9. If `flag` is 1, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to check if a number is prime\ndef prime(n):\n    # If n is less than or equal to 1, it's not prime\n    if (n <= 1):\n        return False\n    # If n is less than or equal to 3, it's prime\n    if (n <= 3):\n        return True\n    # If n is divisible by 2 or 3, it's not prime\n    if (n % 2 == 0 or n % 3 == 0):\n        return False\n    # Check for divisibility up to the square root of n\n    i = 5\n    while (i * i <= n):\n        # If n is divisible by i or i+2, it's not prime\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    # If no divisors are found, n is prime\n    return True\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Check if n is prime\n    if (prime(n)):\n        # If n is prime, print \"NO\"\n        print(\"NO\")\n    else:\n        # Initialize flag and ans\n        flag = 0\n        ans = []\n        \n        # Iterate from 2 to the square root of n\n        for i in range(2, int(math.sqrt(n)) + 1):\n            # If flag is 1, break the loop\n            if (flag == 1):\n                break\n            # Check if n is divisible by i\n            if (n % i == 0):\n                # Check if i is not prime\n                if (prime(i) == False):\n                    # Calculate a as n/i\n                    a = n / i\n                    # Check if a has two distinct factors b and c\n                    for j in range(2, int(math.sqrt(i)) + 1):\n                        # Check if i is divisible by j and a is not equal to j or i/j and j is not equal to i/j\n                        if (i % j == 0 and a!= j and a!= i / j and j!= i / j):\n                            # Set b and c\n                            b = j\n                            c = i / j\n                            # Set flag to 1\n                            flag = 1\n                            # Break the loop\n                            break\n                    # Break the loop\n                    break\n                # Check if n/i is not prime\n                elif (prime(n / i) == False):\n                    # Calculate x as n/i\n                    x = n / i\n                    # Calculate a as i\n                    a = i\n                    # Check if x has two distinct factors b and c\n                    for j in range(2, int(math.sqrt(x)) + 1):\n                        # Check if x is divisible by j and a is not equal to j or x/j and j is not equal to x/j\n                        if (x % j == 0 and a!= j and a!= x / j and j!= x / j):\n                            # Set b and c\n                            b = j\n                            c = x / j\n                            # Set flag to 1\n                            flag = 1\n                            # Break the loop\n                            break\n                    # Break the loop\n                    break\n                # If n/i and i are both prime, reset flag\n                else:\n                    flag = 0\n        # If flag is still 0, print \"NO\"\n        if (flag == 0):\n            print(\"NO\")\n        # If flag is 1, print \"YES\" and the values of a, b, and c\n        else:\n            print(\"YES\")\n            print(a, b, c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an array `ans` to store the three distinct integers `a`, `b`, `c` with initial values as `-1`.\n5. Initialize a variable `now` to keep track of the current index in the `ans` array.\n6. Initialize a variable `i` to 2, which will be used as a potential factor of `n`.\n7. Use a while loop to iterate over all possible factors of `n` starting from 2.\n8. Inside the loop, check if `n` is divisible by `i` using the modulo operator (`n % i == 0`).\n9. If `n` is divisible by `i`, update the `ans` array with the current factor `i` and divide `n` by `i`.\n10. If the current index `now` is 1, break the loop as we have found two distinct factors.\n11. Increment `now` to move to the next index in the `ans` array.\n12. Increment `i` by 1 to check the next potential factor.\n13. After the loop, if `n` is greater than or equal to 2, update the last index of the `ans` array with `n`.\n14. Check if the second index of the `ans` array is not equal to the third index and if the third index is equal to `n`. If this condition is true, print \"YES\" and the values in the `ans` array.\n15. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor _ in range(t):  # Iterate over each test case\n    n = int(input())  # Read the integer n for the current test case\n    ans = [-1, -1, -1]  # Initialize the ans array to store the three distinct integers\n    i = 2  # Initialize the variable i to 2, which will be used as a potential factor of n\n    now = 0  # Initialize the variable now to keep track of the current index in the ans array\n    while i**2 <= n:  # Use a while loop to iterate over all possible factors of n starting from 2\n        if n % i == 0:  # Check if n is divisible by i\n            ans[now] = i  # Update the ans array with the current factor i\n            n //= i  # Divide n by i\n            if now == 1:  # If the current index now is 1, break the loop as we have found two distinct factors\n                break\n            now += 1  # Increment now to move to the next index in the ans array\n        i += 1  # Increment i to check the next potential factor\n    if n >= 2:  # After the loop, if n is greater than or equal to 2, update the last index of the ans array with n\n        ans[2] = n\n    if ans[1]!= -1 and ans[2] == n and ans[1]!= ans[2]:  # Check if the second index of the ans array is not equal to the third index and if the third index is equal to n\n        print(\"YES\")  # If the condition is true, print \"YES\"\n        print(*ans)  # Print the values in the ans array\n    else:\n        print(\"NO\")  # Otherwise, print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, denoted as `t`.\n2. For each test case, read the input number `n`.\n3. Initialize an empty dictionary `d` to store prime factors of `n`.\n4. Find the square root of `n` and store it in `sq`.\n5. Iterate from 2 to `sq` (inclusive) to find prime factors of `n`.\n6. If `n` is divisible by `i`, divide `n` by `i` and add `i` to the dictionary `d`.\n7. If the dictionary `d` contains exactly two keys and the remaining value of `n` is not 1 and not already in the dictionary `d`, it means we have found three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n8. If the condition in step 7 is met, print \"YES\" and the values of `a`, `b`, and `c` (which are the keys in the dictionary `d` along with the remaining value of `n`).\n9. If the condition in step 7 is not met, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nimport bisect as bi\nimport math\nfrom collections import defaultdict as dd\nimport heapq\nimport itertools\ninput=sys.stdin.readline\nfrom random import randint\n##import numpy as np\n##sys.setrecursionlimit(10**7)\nmo=10**9+7\n\ndef cin():\n    return map(int,sin().split())\ndef ain():            \n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\n\nfor _ in range(inin()):\n    k=inin()\n    d=dd(int)  # Dictionary to store prime factors of n\n    sq=int(math.sqrt(k))+1  # Square root of n\n    c=0  # Counter for prime factors\n    ans=[]  # List to store the prime factors\n    f=0  # Flag to check if we have found three distinct integers\n    for i in range(2,sq+1):\n        if(k%i==0):  # Check if n is divisible by i\n            k=k//i  # Divide n by i\n            c+=1  # Increment the counter\n            ans+=[i]  # Add i to the list of prime factors\n        if(c==2 and k!=1 and k not in ans):  # Check if we have found three distinct integers\n            f=1  # Set the flag to 1\n            break  # Break the loop\n    if(f):  # If we have found three distinct integers\n        print(\"YES\")  # Print \"YES\"\n        print(*ans,k)  # Print the values of a, b, and c\n    else:  # If we have not found three distinct integers\n        print(\"NO\")  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate through each test case using a while loop, decrementing `t` by 1 in each iteration.\n3. Read the value of `n` for the current test case from the input.\n4. Initialize a flag `found` to False, which will be used to track whether a valid solution is found for the current test case.\n5. Iterate through all numbers `f` from 2 to the square root of `n` (inclusive) using a for loop.\n6. For each `f`, check if `n` is divisible by `f` using the modulo operator (`n % f == 0`).\n7. If `n` is divisible by `f`, call the `factor` function to find the factors of `n//f` and store them in the list `j`.\n8. Iterate through each pair of factors `x` in `j` using a for loop.\n9. For each pair `x`, check if `x[0]` and `x[1]` are not equal to `f` using the `!=` operator.\n10. If the condition in step 9 is true, print \"YES\" to indicate that a valid solution is found, followed by the values of `f`, `x[0]`, and `x[1]`.\n11. Set the `found` flag to True to indicate that a valid solution is found for the current test case.\n12. If the `found` flag is still False after the inner loops, print \"NO\" to indicate that no valid solution is found for the current test case.\n\nCOMMENTED CODE:\n```python\n# Function to find factors of a number\ndef factor(n):\n    # Initialize an empty list to store factors\n    a = []\n    # Iterate through all numbers x from 2 to the square root of n (inclusive)\n    for x in range(2, int(n ** 0.5) + 1):\n        # Check if n is divisible by x and x is not equal to n//x\n        if n % x == 0 and (x!= n // x):\n            # If the condition is true, append the pair [x, n//x] to the list\n            a.append([x, n // x])\n    # Return the list of factors\n    return a\n\n# Read the number of test cases t from the input\nt = int(input())\n\n# Iterate through each test case using a while loop\nwhile (t):\n    # Decrement t by 1 in each iteration\n    t = t - 1\n    # Initialize a flag found to False\n    found = False\n    # Read the value of n for the current test case from the input\n    n = int(input())\n    \n    # Iterate through all numbers f from 2 to the square root of n (inclusive)\n    for f in range(2, int(n ** 0.5) + 1):\n        # Check if n is divisible by f\n        if n % f == 0:\n            # Call the factor function to find the factors of n//f\n            j = factor(n // f)\n            # Iterate through each pair of factors x in j\n            for x in j:\n                # Check if x[0] and x[1] are not equal to f\n                if x[0]!= f and x[1]!= f:\n                    # If the condition is true, print \"YES\" and the values of f, x[0], and x[1]\n                    print(\"YES\")\n                    print(f, x[0], x[1])\n                    # Set the found flag to True to indicate that a valid solution is found\n                    found = True\n                    # Break out of the inner loops\n                    break\n        # If the found flag is True, break out of the outer loop\n        if found:\n            break\n    \n    # If the found flag is still False, print \"NO\" to indicate that no valid solution is found\n    if found == False:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate through each test case using a while loop.\n3. For each test case, read the input number `n`.\n4. Initialize an empty list `a` to store the factors of `n`.\n5. Initialize a variable `c` to 0, which will be used to check if `n` can be represented as a product of three distinct integers.\n6. Iterate from 2 to the square root of `n` to find the first factor `i` of `n`.\n7. If `n` is divisible by `i`, append `i` to the list `a` and divide `n` by `i`.\n8. Repeat step 6 and 7 to find the second factor `j` of `n`.\n9. If `n` is greater than `j` and the length of `a` is 2, append `n` to `a` and set `c` to 1.\n10. If `c` is 1, print \"YES\" and the elements of `a` as the product of three distinct integers.\n11. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n# Iterate through each test case\nwhile(t!= 0):\n    t -= 1\n    # Initialize an empty list to store the factors of n\n    a = []\n    # Initialize a variable to check if n can be represented as a product of three distinct integers\n    c = 0\n    # Read the input number n\n    n = int(input())\n    # Initialize a variable to store the first factor i of n\n    j = 0\n    # Iterate from 2 to the square root of n to find the first factor i of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if(n % i == 0):\n            # Append i to the list a\n            a.append(i)\n            # Divide n by i\n            n /= i\n            # Store the first factor i\n            j = i\n            # Break the loop as we have found the first factor\n            break\n    # Iterate from j+1 to the square root of n to find the second factor j of n\n    for i in range(j + 1, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if(n % i == 0):\n            # Append i to the list a\n            a.append(i)\n            # Divide n by i\n            n /= i\n            # Store the second factor j\n            j = i\n            # Break the loop as we have found the second factor\n            break\n    # Check if n is greater than j and the length of a is 2\n    if(n > j and len(a) == 2):\n        # Set c to 1\n        c = 1\n        # Append n to a\n        a.append(int(n))\n    # Check if c is 1\n    if(c == 1):\n        # Print \"YES\" and the elements of a as the product of three distinct integers\n        print(\"YES\")\n        print(a[0], a[1], a[2])\n    else:\n        # Print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case `z` from `0` to `t-1`.\n3. Read the value of `n` for the current test case.\n4. Initialize `i` to `2` and `sw` to `1`. `sw` is a flag to track whether a solution is found.\n5. Iterate over all numbers `i` from `2` to the square root of `n` (inclusive).\n6. Check if `n` is divisible by `i`. If it is, proceed to the next step.\n7. Calculate `tmp` as `n` divided by `i`.\n8. Iterate over all numbers `j` from `2` to the square root of `tmp` (inclusive).\n9. Check if `tmp` is divisible by `j` and if `j` is not equal to `i` and `tmp//j` is not equal to `i`. If all conditions are met, print \"YES\" and the values of `i`, `j`, and `tmp//j`.\n10. If no solution is found after iterating over all possible values of `i` and `j`, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin, stdout\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Iterate over each test case\n    for z in range(t):\n        # Read the value of n for the current test case\n        n = int(input())\n        \n        # Initialize i to 2 and sw to 1\n        i = 2\n        sw = 1  # Flag to track whether a solution is found\n        \n        # Iterate over all numbers i from 2 to the square root of n (inclusive)\n        while i*i < n and sw:\n            # Check if n is divisible by i\n            if n % i == 0:\n                # Calculate tmp as n divided by i\n                tmp = n // i\n                \n                # Iterate over all numbers j from 2 to the square root of tmp (inclusive)\n                j = 2\n                while j*j < tmp and sw:\n                    # Check if tmp is divisible by j and if j is not equal to i and tmp//j is not equal to i\n                    if tmp % j == 0 and j!= i and (tmp//j)!= i:\n                        # Print \"YES\" and the values of i, j, and tmp//j\n                        print(\"YES\")\n                        print(i, j, tmp//j)\n                        # Set sw to 0 to indicate that a solution is found\n                        sw = 0 \n                    j += 1\n            i += 1\n        \n        # If no solution is found after iterating over all possible values of i and j, print \"NO\"\n        if sw:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a variable `a` to 1, which will store the first factor of `n`.\n5. Iterate from 2 to 1000 to find the first factor of `n`. If `n` is divisible by `i`, update `a` to `i` and break the loop.\n6. If `a` remains 1 after the loop, it means `n` is a prime number or has no factors in the range [2, 1000]. In this case, print \"NO\" and continue to the next test case.\n7. Divide `n` by `a` to find the remaining factors.\n8. Initialize variables `b` and `c` to 1, which will store the second and third factors of `n`.\n9. Iterate from `a+1` to the square root of `n` to find the second factor `b`. If `n` is divisible by `i` and `i` is not the square root of `n`, update `b` to `i` and `c` to `n // i`, then break the loop.\n10. If `b` remains 1 after the loop, it means `n` cannot be represented as a product of three distinct integers. In this case, print \"NO\" and continue to the next test case.\n11. Print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor i in range(t):  # Iterate over each test case\n    n = int(input())  # Read the integer n for the current test case\n    a = 1  # Initialize a variable to store the first factor of n\n    for i in range(2, 1001):  # Iterate from 2 to 1000 to find the first factor of n\n        if n % i == 0:  # Check if n is divisible by i\n            a = i  # Update a to i\n            break  # Break the loop if a factor is found\n    if a == 1:  # Check if a remains 1 after the loop\n        print(\"NO\")  # Print \"NO\" if n is a prime number or has no factors in the range [2, 1000]\n        continue  # Continue to the next test case\n    n //= a  # Divide n by a to find the remaining factors\n    b = 1  # Initialize a variable to store the second factor of n\n    c = 1  # Initialize a variable to store the third factor of n\n    for i in range(a + 1, int(n ** 0.5) + 1):  # Iterate from a+1 to the square root of n\n        if n % i == 0 and i ** 2!= n:  # Check if n is divisible by i and i is not the square root of n\n            b = i  # Update b to i\n            c = n // i  # Update c to n // i\n            break  # Break the loop if the second factor is found\n    if b == 1:  # Check if b remains 1 after the loop\n        print(\"NO\")  # Print \"NO\" if n cannot be represented as a product of three distinct integers\n        continue  # Continue to the next test case\n    print(\"YES\")  # Print \"YES\" if n can be represented as a product of three distinct integers\n    print(a, b, c)  # Print the values of a, b, and c\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `ans` to store the factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n6. If `n` is divisible by the current number `j`, add `j` to the `ans` list and divide `n` by `j`.\n7. If the length of `ans` is 2, it means we have found two factors of `n`, so we add the remaining `n` to `ans` and break the loop.\n8. If the length of `ans` is not 3, it means we couldn't find three distinct factors of `n`, so print \"NO\".\n9. If the length of `ans` is 3, but the second element of `ans` is greater than or equal to the third element, it means the factors are not distinct, so print \"NO\".\n10. If none of the above conditions are met, it means we have found three distinct factors of `n`, so print \"YES\" and the factors.\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the factors of n\n    ans = []\n    \n    # Iterate from 2 to the square root of n to find factors of n\n    for j in range(2, int(math.sqrt(n)) + 1):\n        # If n is divisible by the current number j\n        if n % j == 0:\n            # Add j to the ans list\n            ans.append(j)\n            # Divide n by j\n            n //= j\n            # If we have found two factors of n, add the remaining n to ans and break the loop\n            if len(ans) == 2:\n                ans.append(n)\n                break\n    \n    # If we couldn't find three distinct factors of n, print \"NO\"\n    if len(ans)!= 3:\n        print(\"NO\")\n    # If the factors are not distinct, print \"NO\"\n    elif ans[1] >= ans[2]:\n        print(\"NO\")\n    # If we have found three distinct factors of n, print \"YES\" and the factors\n    else:\n        print(\"YES\")\n        # Print the factors using the * operator to unpack the list\n        print(*ans)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop from `0` to `t-1`.\n3. For each test case, read the integer `n` from the input.\n4. Initialize three variables `a`, `b`, and `c` to `0`.\n5. Iterate from `2` to the square root of `n` (inclusive) to find the factors of `n`.\n6. For each factor `j` of `n`, check if `n` is divisible by `j`.\n7. If `n` is divisible by `j`, check if `a` is `0`. If `a` is `0`, assign `j` to `a` and divide `n` by `j`.\n8. If `a` is not `0` and `b` is `0`, assign `j` to `b` and divide `n` by `j`.\n9. After the loop, check if `a` and `b` are not `0` and if `n` is not equal to `a` and `b`. If these conditions are met, it means we have found three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n10. If the conditions in step 9 are met, print \"YES\" and the values of `a`, `b`, and `n`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin\n\n# Read the input from stdin\ninp = stdin.readline\n\n# Read the number of test cases\nt = int(inp())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(inp())\n\n    # Initialize variables a, b, and c to 0\n    a = b = 0\n\n    # Iterate from 2 to the square root of n to find factors\n    for j in range(2, int(n**0.5) + 1):\n        # Check if n is divisible by j\n        if n % j == 0:\n            # If a is 0, assign j to a and divide n by j\n            if a == 0:\n                a = j\n                n //= j\n            # If a is not 0 and b is 0, assign j to b and divide n by j\n            elif b == 0:\n                b = j\n                n //= j\n                # Break the loop as we have found two distinct factors\n                break\n\n    # Check if we have found three distinct integers a, b, and c\n    if a!= 0 and b!= 0 and n!= a and n!= b:\n        # Print \"YES\" and the values of a, b, and n\n        print(\"YES\")\n        print(a, b, n)\n    else:\n        # Print \"NO\" if we couldn't find three distinct integers\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case, read the integer `N`.\n3. Check if `N` is a perfect cube. If it is, then it is impossible to represent `N` as `a * b * c` for distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c`. In this case, print \"NO\" and move to the next test case.\n4. If `N` is not a perfect cube, iterate over all possible values of `a` from 2 to the cube root of `N` (inclusive).\n5. For each value of `a`, iterate over all possible values of `b` from `a + 1` to the square root of `N // a` (inclusive).\n6. Calculate `c` as `N // a // b`.\n7. Check if `a * b * c == N` and `c!= a` and `c!= b`. If these conditions are met, print \"YES\" and the values of `a`, `b`, and `c`, then return from the function.\n8. If no such `a`, `b`, and `c` are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef else1(N):\n    # Iterate over all possible values of a from 2 to the cube root of N (inclusive)\n    for a in range(2, int(N ** (1. / 3)) + 1):\n        # Iterate over all possible values of b from a + 1 to the square root of N // a (inclusive)\n        for b in range(a + 1, int((N // a) ** 0.5) + 1):\n            # Calculate c as N // a // b\n            c = N // a // b\n            # Check if a * b * c == N and c!= a and c!= b\n            if a * b * c == N and c!= a and c!= b:\n                # If these conditions are met, print \"YES\" and the values of a, b, and c, then return from the function\n                print('YES')\n                print(a, b, c)\n                return\n    # If no such a, b, and c are found, print \"NO\"\n    else:\n        print('NO')\n\ndef main():\n    # Read the number of test cases t from the input\n    t = int(input())\n    # Iterate over each test case\n    for i in range(t):\n        # Read the integer N for the current test case\n        N = int(input())\n        # Check if N is a perfect cube\n        if N ** (1./3) < 0.9:\n            # If N is a perfect cube, print \"NO\" and move to the next test case\n            print('NO')\n        else:\n            # Otherwise, call the else1 function to find a, b, and c\n            else1(N)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the number `n` from the input.\n3. Initialize an empty dictionary `dict1` to store the prime factors of `n`.\n4. Iterate through the numbers from 2 to the square root of `n` (inclusive) to find the prime factors of `n`.\n5. For each number `i` that divides `n` and is not already in `dict1`, add `i` to `dict1` and update `n` by dividing it by `i`.\n6. If `n` becomes 1, it means we have found all prime factors of `n`, so we break the loop.\n7. If `n` is not 1 after the loop, it means `n` is a prime number, so we add it to `dict1`.\n8. If `dict1` contains more than three distinct keys, it is impossible to represent `n` as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c, so we print \"NO\".\n9. Otherwise, we print \"YES\" and the three distinct integers a, b, c such that a \u22c5 b \u22c5 c = n.\n\nCOMMENTED CODE:\n```python\ndef dividened(number, dict1):\n    # Iterate through the numbers from 2 to the square root of n (inclusive) to find the prime factors of n\n    for i in range(2, int((number)**(1/2)) + 1):\n        # Check if n is divisible by i and i is not already in dict1\n        if number % i == 0 and dict1.get(i) == None:\n            # Add i to dict1 and update n by dividing it by i\n            dict1[i] = 1\n            return number // i, i, dict1\n    \n    # If n is not divisible by any number from 2 to the square root of n, it means n is a prime number\n    return 1, number, dict1\n\n# Read the number of test cases t from the input\nfor _ in range(int(input())):\n    # Read the number n from the input\n    number = int(input())\n    # Initialize an empty dictionary dict1 to store the prime factors of n\n    d = []\n    case = True\n    dict1 = {}\n    \n    # Iterate through the numbers from 2 to find the prime factors of n\n    for i in range(2):\n        # Update n, op, and dict1 by calling the dividened function\n        number, op, dict1 = dividened(number, dict1)\n        \n        # If n becomes 1, it means we have found all prime factors of n, so we break the loop\n        if number == 1:\n            print(\"NO\")\n            case = False\n            break\n        else:\n            # Add op to the list d\n            d.append(op)\n            \n    # If dict1 contains n, it means n is a prime number, so we print \"NO\"\n    if dict1.get(number) == None:\n        d.append(number)\n    else:\n        case = False\n        print(\"NO\")\n        \n    # If case is True, it means we have found three distinct integers a, b, c such that a \u22c5 b \u22c5 c = n\n    if case:\n        print(\"YES\")\n        # Print the three distinct integers a, b, c\n        print(*d)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case, reading the integer `n` for each case.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. Based on the number of prime factors, determine whether it's possible to represent `n` as a product of three distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`.\n5. If it's possible, print \"YES\" and the representation of `n` as `a * b * c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef primeFactors(n):\n    # Initialize an empty dictionary to store prime factors and their counts\n    d = dict()\n    \n    # Initialize a counter for the number of times 2 divides n\n    count = 0\n    \n    # Divide n by 2 as long as it's divisible, counting the number of times\n    while n % 2 == 0: \n        count += 1\n        n = n // 2\n    \n    # If 2 divides n, add it to the dictionary\n    if count!= 0:\n        d[2] = count\n    \n    # Iterate over odd numbers up to the square root of n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # Initialize a counter for the number of times i divides n\n        icount = 0\n        \n        # Divide n by i as long as it's divisible, counting the number of times\n        while n % i == 0: \n            n = n // i\n            icount += 1\n        \n        # If i divides n, add it to the dictionary\n        if icount!= 0:\n            d[i] = icount\n    \n    # If n is a prime number greater than 2, add it to the dictionary\n    if n > 2: \n        d[n] = 1\n    \n    # Create a list of prime factors\n    li = []\n    for i in d:\n        li.append(i)\n    \n    # If there are at least three prime factors, it's possible to represent n as a * b * c\n    if len(d) >= 3:\n        print(\"YES\")\n        # Extract the three prime factors\n        num1 = li[0]\n        num2 = li[1]\n        num3 = n // num1\n        num3 = num3 // num2\n        # Print the representation of n as a * b * c\n        print(num1, num2, num3)\n    \n    # If there are exactly two prime factors, check if it's possible to represent n as a * b * c\n    elif len(d) == 2:\n        # Calculate the total count of prime factors\n        anss = 0\n        for i in d:\n            anss += d[i]\n        \n        # If the total count is at least 4, it's possible to represent n as a * b * c\n        if anss >= 4:\n            print(\"YES\")\n            # Extract the two prime factors\n            fi = li[0]\n            se = li[1]\n            # Print the representation of n as a * b * c\n            print(fi, se, (n // fi) // se)\n        else:\n            # If it's not possible, print \"NO\"\n            print(\"NO\")\n    \n    # If there's only one prime factor, it's not possible to represent n as a * b * c\n    else:\n        # Calculate the total count of prime factors\n        anss = 0\n        for i in d:\n            anss += d[i]\n        \n        # If the total count is at least 6, it's possible to represent n as a * b * c\n        if anss >= 6:\n            print(\"YES\")\n            # Calculate the representation of n as a * b * c\n            num1 = li[0]\n            num2 = num1 ** 2\n            num3 = num1 ** 3\n            # Print the representation of n as a * b * c\n            print(num1, num2, (n // num1) // num2)\n        else:\n            # If it's not possible, print \"NO\"\n            print(\"NO\")\n\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    primeFactors(n)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all the factors of `n` using the `findFactor` function.\n4. Iterate over the factors of `n` to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n` and `a!= b!= c!= n`.\n5. If such `a`, `b`, and `c` are found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n''' ===============================\n-- @uthor : Kaleab Asfaw\n-- Handle : kaleabasfaw2010\n-- Bio    : High-School Student\n=============================='''\n\n# Fast IO\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file): self._fd = file.fileno(); self.buffer = BytesIO(); self.writable = \"x\" in file.mode or \"r\" not in file.mode; self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b: break\n            ptr = self.buffer.tell(); self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0; return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE)); self.newlines = b.count(b\"\\n\") + (not b); ptr = self.buffer.tell(); self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1; return self.buffer.readline()\n    def flush(self):\n        if self.writable: os.write(self._fd, self.buffer.getvalue()); self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file): self.buffer = FastIO(file); self.flush = self.buffer.flush; self.writable = self.buffer.writable; self.write = lambda s: self.buffer.write(s.encode(\"ascii\")); self.read = lambda: self.buffer.read().decode(\"ascii\"); self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout); input = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n# Others\n# from math import floor, ceil, gcd\n# from decimal import Decimal as d\nmod = 10**9+7\ndef lcm(x, y): return (x * y) / (gcd(x, y))\ndef fact(x, mod=mod):\n\tans = 1\n\tfor i in range(1, x+1): ans = (ans * i) % mod\n\treturn ans\ndef arr2D(n, m, default=0):\n\tlst = []\n\tfor i in range(n): temp = [default] * m; lst.append(temp)\n\treturn lst\ndef sortDictV(x): return {k: v for k, v in sorted(x.items(), key = lambda item : item[1])}\n\ndef findFactor(n):\n\t# Find all factors of n\n\tlst = set()\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\tlst.add(i)\n\t\t\tlst.add(n//i)\n\treturn list(lst)\n\ndef solve(n):\n\t# Iterate over factors to find three distinct integers a, b, c\n\tfor i in findFactor(n):\n\t\tfor j in findFactor(i):\n\t\t\ta = j\n\t\t\tb = i // j\n\t\t\tc = n // i\n\t\t\tif a!= b and b!= c and a!= c:\n\t\t\t\t# If such a, b, c are found, print \"YES\" and the values of a, b, c\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn str(a) + \" \" + str(b) + \" \" + str(c)\n\n\t# If no such a, b, c are found, print \"NO\"\n\treturn \"NO\"\n\nfor _ in range(int(input())): # Multicase\n\tn = int(input())\n\tprint(solve(n))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases from the input.\n2. Iterate through each test case.\n3. For each test case, read the integer number n.\n4. Use the factorize3 function to find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or determine if it is impossible to do it.\n5. If a, b, c are found, print \"YES\" and the values of a, b, and c. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Function to find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n\ndef factorize3(n):\n    # Initialize variables to store the first and second factors\n    f, s = 1, 1\n    \n    # Iterate from 2 to the square root of n to find the first factor\n    for i in range(2, int(sqrt(n)) + 1):\n        # If n is divisible by i, update the first factor and divide n by i\n        if n % i == 0:\n            f = i\n            n = n // i\n            # Break the loop as we have found the first factor\n            break\n    \n    # Iterate from f + 1 to the square root of n to find the second factor\n    for i in range(f + 1, int(sqrt(n)) + 1):\n        # If n is divisible by i, update the second factor and divide n by i\n        if n % i == 0:\n            s = i\n            n = n // i\n            # Break the loop as we have found the second factor\n            break\n    \n    # Check if the remaining n is a valid third factor\n    if s!= n and f!= 1 and s!= 1:\n        # If n is a valid third factor, print \"YES\" and the values of f, s, and n\n        print(\"YES\")\n        print(f, s, n)\n    else:\n        # If n is not a valid third factor, print \"NO\"\n        print(\"NO\") \n\n\n# Read the number of test cases from the input\ntest_size = int(input())\n\n# Iterate through each test case\nfor i in range(test_size):\n    # Read the integer number n for the current test case\n    n = int(input())\n    # Call the factorize3 function to find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n\n    factorize3(n)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case `ti` from `0` to `t-1`.\n3. Read the value of `n` for the current test case.\n4. Initialize variables `a`, `b`, and `c` to `0`.\n5. Find the first factor `a` of `n` greater than or equal to `2` by iterating from `2` to the square root of `n` (inclusive).\n6. If `a` is found, break the loop.\n7. If `a` is not found, it means `n` is a prime number, so raise an exception.\n8. Find the second factor `b` of `n/a` greater than or equal to `2` by iterating from `2` to the square root of `n/a` (inclusive).\n9. If `b` is found and `b` is not equal to `a`, calculate `c` as `n/(a*b)` and break the loop.\n10. If `b` is found but `c` is equal to `b`, it means `n` cannot be represented as a product of three distinct integers, so raise an exception.\n11. If `a`, `b`, and `c` are all `0`, it means no factors were found, so raise an exception.\n12. If no exception was raised, print \"YES\" and the values of `a`, `b`, and `c`.\n13. If an exception was raised, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor ti in range(t):\n    # Read the value of n for the current test case\n    n = int(input())\n\n    try:\n        # Initialize variables a, b, and c to 0\n        a = 0\n        b = 0 \n        c = 0\n\n        # Find the first factor a of n greater than or equal to 2\n        for i in range(2,int(sqrt(n))+1):\n            if n % i == 0:\n                # a is the first factor\n                a = i\n                break\n\n        # If a is not found, n is a prime number, so raise an exception\n        if a == 0:\n            raise Exception\n\n        # Find the second factor b of n/a greater than or equal to 2\n        for i in range(2,int(sqrt(n/a))+1):\n            if int(n/a) % i == 0 and i!= a:\n                # b is the second factor and c is n/(a*b)\n                b = i\n                c = int(n/(a*b))\n                # If c is equal to b, n cannot be represented as a product of three distinct integers, so raise an exception\n                if c == b:\n                    raise Exception\n                break\n\n        # If a, b, and c are all 0, no factors were found, so raise an exception\n        if a == 0 or b == 0 or c == 0:\n            raise Exception\n\n        # If no exception was raised, print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a,b,c)        \n    except:\n        # If an exception was raised, print \"NO\"\n        print(\"NO\")    \n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `factors` function.\n4. Check if the number of prime factors is at least 3. If not, print \"NO\" and move to the next test case.\n5. If there are exactly 3 prime factors, check if any two of them are equal. If so, find the third factor by multiplying the remaining prime factors.\n6. If the three factors are distinct, print \"YES\" and the three factors. Otherwise, print \"NO\".\n7. Repeat steps 2-6 for all test cases.\n\nCOMMENTED CODE:\n```python\n\"\"\"\nNTC here\n\"\"\"\nimport sys\ninp = sys.stdin.readline\ninput = lambda: inp().strip()\nflush = sys.stdout.flush\n\ndef iin():  # read an integer from input\n    return int(input())\n\ndef lin():  # read a list of integers from input\n    return list(map(int, input().split()))\n\ndef factors(a):  # find prime factors of a number\n    fact = []\n    if a % 2 == 0:  # check if a is divisible by 2\n        ch = 0\n        while a % 2 == 0:  # count the number of times 2 divides a\n            ch += 1\n            a //= 2\n        fact.extend([2] * ch)  # add 2 to the list of factors\n    i = 3\n    while i * i <= a:  # check for odd prime factors\n        if a % i == 0:  # if a is divisible by i\n            ch = 0\n            while a % i == 0:  # count the number of times i divides a\n                ch += 1\n                a //= i\n            fact.extend([i] * ch)  # add i to the list of factors\n        i += 2\n    if a > 1:  # if a is a prime number greater than 2\n        fact.append(a)  # add a to the list of factors\n    return fact\n\ndef main():\n    t = iin()  # read the number of test cases\n    ans = ['YES', \"NO\"]  # define the possible answers\n    while t:  # loop through each test case\n        t -= 1\n        n = iin()  # read the integer for the current test case\n        fct = factors(n)  # find the prime factors of n\n        if len(fct) >= 3:  # check if there are at least 3 prime factors\n            l = len(fct)  # get the length of the list of prime factors\n            a, b = fct[0], fct[1]  # assign the first two prime factors to a and b\n            c = 1  # initialize c to 1\n            if b == a:  # check if b is equal to a\n                if l > 3:  # if there are more than 3 prime factors\n                    b *= fct[2]  # multiply b by the third prime factor\n                    for i in range(3, l):  # loop through the remaining prime factors\n                        c *= fct[i]  # multiply c by each prime factor\n                else:  # if there are exactly 3 prime factors\n                    print(ans[1])  # print \"NO\"\n                    continue  # move to the next test case\n            else:  # if b is not equal to a\n                for i in range(2, l):  # loop through the remaining prime factors\n                    c *= fct[i]  # multiply c by each prime factor\n            if a!= b and b!= c and c!= a:  # check if the three factors are distinct\n                print(ans[0])  # print \"YES\"\n                print(a, b, c)  # print the three factors\n                continue  # move to the next test case\n        print(ans[1])  # print \"NO\"\n\nmain()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all divisors of `n` using the `printDivisors` function.\n4. If the number of divisors is less than 3, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\" and move to the next test case.\n5. Select the first divisor `a` from the list of divisors.\n6. Find all divisors of `n` divided by `a` using the `printDivisors` function.\n7. Remove `a` from the list of divisors of `n` divided by `a` to avoid duplicates.\n8. Select the first divisor `b` from the updated list of divisors.\n9. Calculate the third divisor `c` as `n` divided by the product of `a` and `b`.\n10. Check if `a`, `b`, and `c` are distinct and greater than 1. If they are, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# A Better (than Naive) Solution to find all divisors \nimport math \n\n# method to print the divisors \ndef printDivisors(n) : \n    # Initialize an empty list to store divisors\n    fact = []\n    \n    # Note that this loop runs till square root \n    i = 1\n    while i <= math.sqrt(n): \n        # Check if i is a divisor of n\n        if (n % i == 0) : \n            # If divisors are equal, print only one \n            if (n / i == i) : \n                # Append the divisor to the list\n                fact.append(i) \n            else : \n                # Otherwise print both \n                # Append the divisor to the list\n                fact.append(i) \n                # Append the other divisor to the list\n                fact.append(n//i) \n    \n        # Increment the loop counter\n        i = i + 1\n    # Sort the list of divisors\n    fact.sort()\n    # Return all divisors except the first one (1)\n    return fact[1:]\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n=int(input())\n    \n    # Find all divisors of n\n    f1=printDivisors(n)\n    \n    # Select the first divisor a\n    a=f1[0]\n    \n    # If there's only one or two divisors, it's impossible to represent n as a product of three distinct integers\n    if len(f1)==1 or len(f1)==2:\n        # Print \"NO\" and move to the next test case\n        print(\"NO\")\n        continue\n    \n    # Find all divisors of n divided by a\n    f2 = printDivisors(n//a)\n    \n    # Remove a from the list of divisors of n divided by a to avoid duplicates\n    try:\n        f2.remove(a)\n    except:\n        pass\n        \n    # Select the first divisor b\n    b = f2[0]\n   \n    \n    # Calculate the third divisor c\n    c= n//(a*b)\n    \n    # Check if a, b, and c are distinct and greater than 1\n    if (a>1 and b>1 and c>1  and a!=b and b!=c and a!=c):\n        # Print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a,b,c)\n    else:\n        # Print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `N`.\n3. Calculate the square root of `N` and round it up to the nearest integer `val`.\n4. Iterate from `2` to `val` to find a factor `i` of `N`.\n5. If `N` is divisible by `i` and `N//i` is not equal to `i`, it means we have found two distinct factors of `N`.\n6. Call the `func` function with `N//i` and `i` as arguments to find the third factor.\n7. If the third factor is found, print \"YES\" and the three factors.\n8. If no third factor is found after iterating through all possible values, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Define a function to find the third factor of N\ndef func(N, x):\n    # Calculate the square root of N and round it up to the nearest integer\n    val = N**0.5\n    val = int(val) + 1\n    \n    # Initialize a flag to track if the third factor is found\n    tem = 0\n    \n    # Iterate from x+1 to val to find a factor of N\n    for i in range(x+1, val):\n        # Check if N is divisible by i\n        if (N % i == 0):\n            # Check if N//i is greater than 1 and not equal to i\n            if (N // i > 1 and N // i!= i):\n                # Print \"YES\" and the three factors\n                print(\"YES\")\n                print(x, i, N // i)\n                # Set the flag to 1 to indicate that the third factor is found\n                tem = 1\n                # Break the loop as we have found the third factor\n                break\n    \n    # If the third factor is not found, print \"NO\"\n    if (tem == 0):\n        print(\"NO\")\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer N\n    N = int(input())\n    \n    # Calculate the square root of N and round it up to the nearest integer\n    val = N**0.5\n    val = int(val) + 1\n    \n    # Initialize a flag to track if a pair of factors is found\n    temp = 0\n    \n    # Iterate from 2 to val to find a pair of factors of N\n    for i in range(2, val):\n        # Check if N is divisible by i\n        if (N % i == 0):\n            # Check if N//i is not equal to i\n            if (N // i!= i):\n                # Set the flag to 1 to indicate that a pair of factors is found\n                temp = 1\n                # Call the func function with N//i and i as arguments\n                func(N // i, i)\n                # Break the loop as we have found a pair of factors\n                break\n    \n    # If no pair of factors is found, print \"NO\"\n    if (temp == 0):\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Generate all divisors of `n` using the `divisorGenerator` function.\n4. Filter out the divisors that are less than 2, as the problem requires `a`, `b`, and `c` to be distinct integers greater than or equal to 2.\n5. If there are at least two divisors, select the smallest one as `a`.\n6. Generate all divisors of `n` divided by `a` using the `divisorGenerator` function again.\n7. Filter out the divisors that are less than or equal to `a`, as `b` must be distinct from `a`.\n8. If there is at least one divisor, select the smallest one as `b`.\n9. Calculate `c` as `n` divided by `a` multiplied by `b`.\n10. Check if `n` is divisible by `a` multiplied by `b` and if `c` is greater than `b`.\n11. If the conditions in step 10 are met, print \"yes\" and the values of `a`, `b`, and `c`. Otherwise, print \"no\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to generate all divisors of a number\ndef divisorGenerator(n):\n    # Initialize an empty list to store large divisors\n    large_divisors = []\n    \n    # Iterate from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n) + 1)):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Yield i as a divisor\n            yield i\n            # If i squared is not equal to n, add n divided by i to the list of large divisors\n            if i*i!= n:\n                large_divisors.append(n / i)\n    \n    # Iterate over the large divisors in reverse order\n    for divisor in reversed(large_divisors):\n        # Yield the large divisor\n        yield divisor\n\n# Function to solve the problem for a given number k\ndef solver(k):\n    # Generate all divisors of k\n    divs = list(divisorGenerator(k))[1:-1]\n    \n    # If there are at least two divisors\n    if len(divs) > 0:\n        # Select the smallest divisor as a\n        a = int(divs[0])\n        \n        # Generate all divisors of k divided by a\n        second_divs =  [el for el in list(divisorGenerator(k//a))[1:-1] if el > a]\n        \n        # If there is at least one divisor\n        if len(second_divs) > 0:\n            # Select the smallest divisor as b\n            b = int(second_divs[0])\n            \n            # Calculate c as k divided by b multiplied by a\n            c = int(k // b // a)\n            \n            # Check if k is divisible by a multiplied by b and if c is greater than b\n            if k % (b * a) == 0 and c > b:\n                # If the conditions are met, print \"yes\" and the values of a, b, and c\n                print('yes')\n                print(f'{a} {b} {c}')\n            \n            else:\n                # Otherwise, print \"no\"\n                print('no')\n        \n        else:\n            # If there are no divisors, print \"no\"\n            print('no')\n    \n    else:\n        # If there are no divisors, print \"no\"\n        print('no')\n\n# Read the number of test cases\nn = int(input())\n\n# Iterate over the test cases\nfor i in range(n):\n    # Read the integer k for the current test case\n    k = int(input())\n    \n    # Call the solver function for k\n    solver(k)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for the current test case from the input.\n4. Initialize a flag variable `flag` to False, which will be used to track whether a valid solution is found.\n5. Iterate over all numbers `i` from 2 to the square root of `n` (inclusive) using a for loop.\n6. Check if `n` is divisible by `i` using the modulo operator (`nvar%i==0`). If it is, proceed to the next step.\n7. Calculate the quotient `yy` of `n` divided by `i` using integer division (`nvar//i`).\n8. Iterate over all numbers `j` from `i+1` to the square root of `yy` (inclusive) using a for loop.\n9. Check if `yy` is divisible by `j` using the modulo operator (`yy%j==0`). If it is, proceed to the next step.\n10. Calculate the quotient `z` of `yy` divided by `j` using integer division (`yy//j`).\n11. Check if `z` is greater than or equal to 2 and not equal to `y` and `x`. If it is, set the `flag` variable to True and store the values of `x`, `y`, and `z` in a list `l`.\n12. If a valid solution is found (`flag` is True), print \"YES\" and the values of `x`, `y`, and `z` using the `print(*l)` function, and break out of the inner loops.\n13. If no valid solution is found after iterating over all possible values of `i` and `j`, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor tt in range(int(input())):\n    # Read the value of n for the current test case\n    nvar = int(input())\n    \n    # Initialize a flag variable to False\n    flag = False\n    \n    # Iterate over all numbers i from 2 to the square root of n\n    for i in range(2, int(math.sqrt(nvar)) + 1):\n        # Check if n is divisible by i\n        if nvar % i == 0:\n            # Calculate the quotient yy of n divided by i\n            yy = nvar // i\n            \n            # Iterate over all numbers j from i+1 to the square root of yy\n            for j in range(i + 1, int(math.sqrt(yy)) + 1):\n                # Check if yy is divisible by j\n                if yy % j == 0:\n                    # Calculate the quotient z of yy divided by j\n                    z = yy // j\n                    \n                    # Check if z is greater than or equal to 2 and not equal to y and x\n                    if z >= 2 and z!= j and z!= i:\n                        # Set the flag variable to True and store the values of x, y, and z in a list l\n                        flag = True\n                        l = [i, j, z]\n                        \n                        # Print \"YES\" and the values of x, y, and z\n                        print(\"YES\")\n                        print(*l)\n                        \n                        # Break out of the inner loops\n                        break\n            # If a valid solution is found, break out of the outer loop\n            if flag:\n                break\n    \n    # If no valid solution is found, print \"NO\"\n    if flag == False:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `findprimefactors` function.\n4. Store the prime factors in a list `k`.\n5. Convert the list of prime factors to a set `l` to remove duplicates.\n6. Determine the number of distinct prime factors `z` by getting the length of set `l`.\n7. Based on the value of `z`, determine whether it's possible to represent `n` as a product of three distinct integers `a`, `b`, and `c`.\n8. If `z` is greater than or equal to 3, print \"YES\" and the three distinct prime factors.\n9. If `z` is 2, check if the number of prime factors in `k` is less than 4. If it is, print \"NO\". Otherwise, print \"YES\" and the two distinct prime factors.\n10. If `z` is 1, check if the number of prime factors in `k` is greater than 5. If it is, print \"YES\" and the three prime factors. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef findprimefactors(n):\n    # Initialize an empty list to store prime factors\n    l = []\n    \n    # Divide n by 2 as long as it's divisible evenly\n    while(n % 2 == 0):\n        # Append 2 to the list of prime factors\n        l.append(2)\n        # Divide n by 2\n        n //= 2\n    \n    # Iterate from 3 to the square root of n (inclusive) in steps of 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        # While n is divisible by i, divide n by i and append i to the list\n        while(n % i == 0):\n            n //= i\n            l.append(i)\n    \n    # If n is greater than 2, it's a prime factor, so append it to the list\n    if n > 2:\n        l.append(n)\n    \n    # Return the list of prime factors\n    return l\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Find the prime factors of n\n    k = findprimefactors(n)\n    \n    # Convert the list of prime factors to a set to remove duplicates\n    l = set(k)\n    \n    # Get the number of distinct prime factors\n    z = len(l)\n    \n    # Based on the number of distinct prime factors, determine whether it's possible to represent n as a product of three distinct integers\n    if z >= 3:\n        # If there are at least three distinct prime factors, print \"YES\" and the three distinct prime factors\n        print(\"YES\")\n        # Convert the set back to a list and print the first two elements\n        l = list(l)\n        prod = l[0] * l[1]\n        print(*l[:2], end=\" \")\n        # Initialize a variable to store the product of the remaining prime factors\n        prod1 = 1\n        # Iterate over the remaining prime factors and multiply them together\n        for i in k:\n            prod1 *= i\n        # Print the product of the remaining prime factors divided by the product of the first two prime factors\n        print(prod1 // prod)\n    \n    elif z == 2:\n        # If there are exactly two distinct prime factors, check if there are less than four prime factors in total\n        if len(k) < 4:\n            # If there are less than four prime factors, print \"NO\"\n            print(\"NO\")\n        else:\n            # If there are at least four prime factors, print \"YES\" and the two distinct prime factors\n            print(\"YES\")\n            # Convert the set back to a list\n            l = list(l)\n            # Initialize a variable to store the product of the two distinct prime factors\n            prod = 1\n            # Iterate over the two distinct prime factors and multiply them together\n            for i in l:\n                print(i, end=\" \")\n                prod *= i\n            # Iterate over the remaining prime factors and multiply them together\n            for i in k:\n                prod1 *= i\n            # Print the product of the remaining prime factors divided by the product of the two distinct prime factors\n            print(prod1 // prod)\n    \n    elif z == 1:\n        # If there is only one distinct prime factor, check if there are more than five prime factors in total\n        prod = 1\n        if len(k) > 5:\n            # If there are more than five prime factors, print \"YES\" and the three prime factors\n            print(\"YES\")\n            # Print the first three prime factors\n            print(k[0], k[1] * k[2], end=\" \")\n            # Iterate over the remaining prime factors and multiply them together\n            for i in k[3:]:\n                prod *= i\n            # Print the product of the remaining prime factors\n            print(prod)\n        else:\n            # If there are five or fewer prime factors, print \"NO\"\n            print(\"NO\")\n    \n    else:\n        # If there are no prime factors, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `ok` to track whether a valid solution is found.\n5. Initialize a variable `c` to 2, which will be used to find the first factor of `n`.\n6. Use a while loop to find the first factor `c` of `n` such that `c*c*c <= n`.\n7. Inside the loop, check if `n` is divisible by `c`. If not, increment `c` by 1 and continue.\n8. If `n` is divisible by `c`, calculate `a * b = n / c` and find the factors `a` and `b` of `n / c`.\n9. Use another while loop to find the factors `a` and `b` such that `a > b > c`.\n10. Inside the inner loop, check if `n / c` is divisible by `b`. If not, increment `b` by 1 and continue.\n11. If `n / c` is divisible by `b`, calculate `a = n / (c * b)` and check if `a > b`.\n12. If `a > b`, print the solution `YES` and the values of `a`, `b`, and `c`.\n13. Set the flag `ok` to `True` to indicate that a valid solution is found.\n14. If no valid solution is found after the loops, print `NO`.\n\nCOMMENTED CODE:\n```python\nfor _ in range(int(input())):\n    n = int(input())\n\n    # Initialize a flag to track whether a valid solution is found\n    ok = False\n    c = 2  # Initialize the first factor c to 2\n    while not ok and c*c*c <= n:\n        # Check if n is divisible by c\n        if n % c!= 0:\n            # If not, increment c by 1 and continue\n            c += 1\n            continue\n\n        # Calculate a * b = n / c\n        # Find the factors a and b of n / c\n        b = c+1  # Initialize the second factor b to c+1\n        while not ok and b*b <= (n // c):\n            # Check if n / c is divisible by b\n            if (n // c) % b!= 0:\n                # If not, increment b by 1 and continue\n                b += 1\n                continue\n\n            # Calculate a = n / (c * b)\n            a = n // (c * b)\n            # Check if a > b\n            if a > b:\n                # Print the solution YES and the values of a, b, and c\n                print('YES')\n                print(a, b, c)\n                # Set the flag ok to True to indicate that a valid solution is found\n                ok = True\n\n            # Increment b by 1\n            b += 1\n\n        # Increment c by 1\n        c += 1\n\n    # If no valid solution is found, print NO\n    if not ok:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty set `d` to store the prime factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find prime factors.\n6. For each number `i` in this range, check if `n` is divisible by `i`.\n7. If `n` is divisible by `i`, add `i` to the set `d` and update `n` by dividing it by `i`.\n8. If the size of `d` is less than 2 or if `n` is 1 or if `n` is already in `d`, it means we cannot find three distinct integers `a`, `b`, `c` such that `a * b * c = n`. In this case, print \"NO\".\n9. Otherwise, print \"YES\" and the prime factors in `d` along with `n`.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty set to store prime factors\n    d = set()\n    \n    # Iterate from 2 to the square root of n to find prime factors\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Add i to the set of prime factors\n            d.add(i)\n            # Update n by dividing it by i\n            n = n // i\n            \n            # If we have found two prime factors, we can break the loop\n            if len(d) >= 2:\n                break\n    \n    # Check if we have found at least two prime factors and n is not 1 or in d\n    if len(d) < 2 or n == 1 or n in d:\n        # If not, print \"NO\"\n        print(\"NO\")\n    else:\n        # Otherwise, print \"YES\" and the prime factors along with n\n        print(\"YES\")\n        # Print the prime factors in d\n        for t in d:\n            print(t, end=' ')\n        # Print n\n        print(n)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    }
]