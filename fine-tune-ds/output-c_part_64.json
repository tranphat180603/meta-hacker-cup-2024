[
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize variables `nn` and `nnn` with the value of `n`.\n4. Find the square root of `n` and add 1 to it. Store this value in `n`.\n5. Initialize a counter `cou` to 0 and an empty list `num` to store prime factors.\n6. Check if `nn` is divisible by 2. If it is, append 2 to `num` and increment `cou`.\n7. While `nn` is divisible by 2, divide it by 2.\n8. Iterate from 3 to `n` (inclusive) with a step of 2. For each number `i` in this range:\n   - Check if `nn` is divisible by `i`. If it is, append `i` to `num` and increment `cou`.\n   - While `nn` is divisible by `i`, divide it by `i`.\n9. If `nn` is not equal to 1, append it to `num` and increment `cou`.\n10. Check if `cou` is greater than or equal to 3. If it is, print \"YES\" and the product of the first two elements of `num` and `nnn` divided by this product.\n11. If `cou` is 1, find the cube root of `nnn` and store it in `c`. If `c` is greater than 1 and not equal to the first element of `num`, print \"YES\" and the first element of `num`, its square, and `c`.\n12. If `cou` is 2, find the square root of `nnn` and store it in `c`. If `c` is greater than 1 and not equal to the first or second element of `num`, print \"YES\" and the first and second elements of `num` and `c`.\n13. If none of the above conditions are met, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Read the number of test cases\nt = int(input())\n\nwhile t:\n    # Read the integer n for the current test case\n    n = int(input())\n    nn = n  # Store the original value of n\n    nnn = n  # Store the original value of n\n    num = []  # Initialize an empty list to store prime factors\n    n = int(sqrt(n)) + 1  # Find the square root of n and add 1 to it\n\n    # Initialize a counter to count the number of prime factors\n    cou = 0\n\n    # Check if n is divisible by 2\n    if nn % 2 == 0:\n        cou += 1  # Increment the counter\n        num.append(2)  # Append 2 to the list of prime factors\n\n    # While n is divisible by 2, divide it by 2\n    while nn % 2 == 0:\n        nn = nn // 2\n\n    # Iterate from 3 to n (inclusive) with a step of 2\n    for i in range(3, n, 2):\n        # Check if n is divisible by i\n        if nn % i == 0:\n            cou += 1  # Increment the counter\n            num.append(i)  # Append i to the list of prime factors\n        # While n is divisible by i, divide it by i\n        while nn % i == 0:\n            nn = nn // i\n\n    # If n is not equal to 1, append it to the list of prime factors and increment the counter\n    if nn!= 1:\n        cou += 1\n        num.append(nn)\n\n    # Check if the number of prime factors is greater than or equal to 3\n    if cou >= 3:\n        print(\"YES\")  # Print \"YES\" if the number of prime factors is greater than or equal to 3\n        print(num[0], num[1], nnn // (num[0] * num[1]))  # Print the product of the first two prime factors and nnn divided by this product\n    else:\n        # If the number of prime factors is 1, find the cube root of nnn and store it in c\n        if cou == 1:\n            a = num[0]  # Store the first prime factor in a\n            b = num[0] * num[0]  # Store the square of the first prime factor in b\n            c = nnn // (a * b)  # Find the cube root of nnn and store it in c\n            # Check if c is greater than 1 and not equal to a or b\n            if a!= b and a!= c and c > b:\n                print(\"YES\")  # Print \"YES\" if c is greater than 1 and not equal to a or b\n                print(a, b, c)  # Print a, b, and c\n            else:\n                print(\"NO\")  # Print \"NO\" if c is not greater than 1 or equal to a or b\n        # If the number of prime factors is 2, find the square root of nnn and store it in c\n        else:\n            a = num[0]  # Store the first prime factor in a\n            b = num[1]  # Store the second prime factor in b\n            c = nnn // (num[0] * num[1])  # Find the square root of nnn and store it in c\n            # Check if c is greater than 1 and not equal to a or b\n            if c!= a and c!= b and c > 1:\n                print(\"YES\")  # Print \"YES\" if c is greater than 1 and not equal to a or b\n                print(a, b, c)  # Print a, b, and c\n            else:\n                print(\"NO\")  # Print \"NO\" if c is not greater than 1 or equal to a or b\n\n    # Decrement the test case counter\n    t -= 1\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop from `0` to `t-1`.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `flag` to `0` to track whether a valid solution is found.\n5. Initialize an empty list `a` to store the factors of `n`.\n6. Initialize a counter `count` to `0` to count the number of factors found.\n7. Iterate from `2` to `31623` (a reasonable upper limit for the factors of `n`) using a loop.\n8. For each iteration, check if `n` is divisible by the current number `j`. If it is, increment the counter `count` and append `j` to the list `a`. Update `n` by dividing it by `j`.\n9. If the counter `count` reaches `2`, check if the remaining factor `n` is distinct from the two factors already found in `a`. If it is, set the flag `flag` to `1` and append `n` to the list `a`.\n10. After the loop, check the value of the flag `flag`. If it is `0`, print \"NO\" to indicate that it is impossible to represent `n` as a product of three distinct integers. Otherwise, print \"YES\" and the factors found in the list `a`.\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize a flag to track whether a valid solution is found\n    flag = 0\n    \n    # Initialize an empty list to store the factors of n\n    a = []\n    \n    # Initialize a counter to count the number of factors found\n    count = 0\n    \n    # Iterate from 2 to 31623 to find factors of n\n    for j in range(2, 31623):\n        # Check if n is divisible by the current number j\n        if (n % j == 0):\n            # Increment the counter and append j to the list of factors\n            count += 1\n            a.append(j)\n            # Update n by dividing it by j\n            n = n // j\n        \n        # If two factors have been found, check the remaining factor\n        if (count == 2):\n            # Check if the remaining factor n is distinct from the two factors already found\n            if (a[0]!= n and a[1]!= n and n!= 1):\n                # Set the flag to 1 and append n to the list of factors\n                flag = 1\n                a.append(n)\n                # Break out of the loop since a valid solution has been found\n                break\n    \n    # Check the value of the flag\n    if (flag == 0):\n        # If the flag is 0, print \"NO\" to indicate that it is impossible to represent n as a product of three distinct integers\n        print(\"NO\")\n    else:\n        # If the flag is 1, print \"YES\" and the factors found in the list a\n        print(\"YES\")\n        # Print the factors found in the list a\n        for j in range(3):\n            print(a[j], end=\" \")\n        print()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Factorize `n` into its prime factors using the `factorize` function.\n4. Count the occurrences of each factor using a `Counter` object.\n5. Iterate through the factors and their indices to find three distinct factors `a`, `b`, and `c` such that `a * b * c = n`.\n6. If such factors are found, print \"YES\" and the factors. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom bisect import *\nfrom collections import *\n\n\ndef factorize(n):  # o(sqr(n))\n    # Initialize the divisor and the list to store prime factors\n    c, ans = 2, []\n    \n    # Iterate through possible divisors until the square root of n\n    while (c * c < n):\n        # If n is divisible by c, add c and n//c to the list of factors\n        if n % c == 0:\n            ans.append(c)\n            ans.append(n // c)\n        # Increment the divisor\n        c += 1\n\n    # If c^2 equals n, add c to the list of factors\n    if c * c == n:\n        ans.append(c)\n    \n    # Return the sorted list of factors\n    return sorted(ans)\n\n\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Factorize n into its prime factors\n    a = factorize(n)\n    \n    # Count the occurrences of each factor using a Counter object\n    c, l, ans = defaultdict(int, Counter(a)), len(a), 'NO'\n    \n    # Iterate through the factors and their indices to find three distinct factors\n    for i in range(l):\n        for j in range(i+1, l):\n            # Calculate the product of the current factors\n            num = n / (a[i] * a[j])\n            \n            # Check if the product is a factor and not equal to the current factors\n            if c[num] and num not in [a[i], a[j]]:\n                # If such factors are found, print \"YES\" and the factors\n                print('YES')\n                print(*[a[i], a[j], int(num)])\n                ans = 'YES'\n                break\n        # If factors are found, break the loop\n        if ans == 'YES':\n            break\n\n    # If no factors are found, print \"NO\"\n    if ans == 'NO':\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `n`.\n2. For each test case, find the prime factors of the given number `N` using the `primeFactors` function.\n3. Check if the number of distinct prime factors is exactly 3. If not, print \"NO\".\n4. If there are exactly 3 distinct prime factors, print \"YES\" and the prime factors as the result.\n5. If there are more than 3 prime factors, distribute them among three variables `a`, `b`, and `c` such that `a` is the smallest prime factor, and `b` and `c` are the products of the remaining prime factors. If `c` is not equal to `b` and `c` is not equal to `a` and `c` is not equal to 1, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin, stdout\nfrom collections import Counter\nfrom math import ceil\nfrom bisect import bisect_left \nfrom bisect import bisect_right\nimport math\n\n# Function to find prime factors of a number\ndef primeFactors(N, li):\n    # Divide N by 2 until it's no longer divisible\n    while N % 2 == 0:\n        li.append(2)\n        N //= 2\n\n    # Find other prime factors\n    for i in range(3, int(math.sqrt(N)) + 1, 2):\n        while N % i == 0:\n            li.append(i)\n            N //= i\n\n    # If N is a prime number greater than 2\n    if N > 2:\n        li.append(N)\n\n    return li\n\n# Read the number of test cases\nn = ip()\n\n# Iterate over each test case\nfor i in range(n):\n    # Find prime factors of the given number\n    pf = primeFactors(ip(), [])\n\n    # Check if there are exactly 3 distinct prime factors\n    if len(set(pf)) == 3 and len(pf) == 3:\n        # Print \"YES\" and the prime factors as the result\n        print('YES')\n        print(*pf)\n    elif len(pf) < 3:\n        # Print \"NO\" if there are less than 3 prime factors\n        print('NO')\n    else:\n        # Distribute prime factors among a, b, and c\n        a, b, c = pf[0], 1, 1\n        for j in range(1, len(pf)):\n            # Assign prime factors to b and c\n            if b <= a:\n                b *= pf[j]\n            else:\n                c *= pf[j]\n\n        # Check if c is not equal to b and c is not equal to a and c is not equal to 1\n        if c!= b and c!= a and c!= 1:\n            # Print \"YES\" and the values of a, b, and c\n            print('YES')\n            print(a, b, c)\n        else:\n            # Print \"NO\" if the conditions are not met\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `flag` to track whether a valid solution is found.\n5. Iterate from 2 to the cube root of `n` (inclusive) to find a factor `i` of `n`.\n6. If `n` is divisible by `i`, calculate `z` as `n` divided by `i`.\n7. Iterate from `i+1` to the square root of `z` (inclusive) to find a factor `k` of `z`.\n8. If `z` is divisible by `k` and `k*k` is not equal to `z`, set `flag` to `True` and print the solution `i`, `k`, and `z//k`.\n9. If `flag` is `True`, break the loop.\n10. If no valid solution is found after the loop, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor j in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize a flag to track whether a valid solution is found\n    flag = False\n    \n    # Iterate from 2 to the cube root of n (inclusive) to find a factor i of n\n    for i in range(2, int(n ** (1 / 3)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Calculate z as n divided by i\n            z = n // i\n            \n            # Iterate from i+1 to the square root of z (inclusive) to find a factor k of z\n            for k in range(i + 1, int(z ** 0.5) + 1):\n                # Check if z is divisible by k and k*k is not equal to z\n                if z % k == 0 and k * k!= z:\n                    # Set flag to True and print the solution i, k, and z//k\n                    flag = True\n                    print(\"YES\")\n                    print(i, k, z // k)\n        \n        # If flag is True, break the loop\n        if flag == True:\n            break\n    \n    # If no valid solution is found after the loop, print \"NO\"\n    if flag == False:\n        print(\"NO\")\n```\n\nHowever, the provided solution code is slightly different from the steps above. Here's the modified version of the solution code with inline comments:\n\n```python\n# Read the number of test cases\nfor j in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize a list to store factors\n    c = 0\n    l = []\n    \n    # Iterate from 2 to the square root of n (inclusive) to find factors of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Append i to the list of factors\n            l.append(i)\n            # Update n by dividing it by i\n            n = n // i\n            # If the list of factors has two elements, break the loop\n            if len(l) == 2:\n                break\n    \n    # If the list of factors has two elements and n is greater than the second factor, print the solution\n    if len(l) == 2 and n > l[1]:\n        print(\"YES\")\n        # Append n to the list of factors\n        l.append(n)\n        # Print the solution\n        print(*l)\n    else:\n        # If no valid solution is found, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Find the first prime factor `a1` of `n` using a loop from 2 to the square root of `n`.\n5. If `a1` is found, calculate the corresponding `g` as `n` divided by `a1`.\n6. If `a1` is not found, set `ch1` to 0.\n7. If `ch1` is 1, find the second prime factor `a2` of `g` using a loop from 2 to the square root of `g`.\n8. If `a2` is found and `a3` (calculated as `g` divided by `a2`) is not equal to `a1` or `a2`, set `ch2` to 1.\n9. If `ch1` or `ch2` is 0, print \"NO\".\n10. If `ch1` and `ch2` are 1, print \"YES\" and the values of `a1`, `a2`, and `a3`.\n\nCOMMENTED CODE:\n```python\nfrom math import *\n\n# Iterate t times to process each test case\nfor _ in range(int(input())):\n    \n    # Read the integer n from the input\n    n = int(input())\n    \n    # Initialize variables\n    ch1 = 1  # Flag to check if a1 is found\n    ch2 = 1  # Flag to check if a2 is found\n    a1 = 0   # First prime factor\n    a2 = 0   # Second prime factor\n    a3 = 0   # Third prime factor\n    g = 0    # Temporary variable to store n//a1\n    \n    # Find the first prime factor a1 of n\n    for i in range(2,int(sqrt(n)+1)):\n        # Check if n is divisible by i\n        if(n%i == 0):\n            # Set a1 as the first prime factor\n            a1 = i\n            # Calculate g as n divided by a1\n            g = n//i\n            # Break the loop as a1 is found\n            break\n    else:\n        # If no prime factor is found, set ch1 to 0\n        ch1 = 0\n    \n    # If ch1 is 1, find the second prime factor a2 of g\n    if(ch1 == 1):\n        for i in range(2,int(sqrt(g)+1)):\n            # Check if g is divisible by i and i is not equal to a1\n            if(g%i == 0 and i!=a1):\n                # Set a2 as the second prime factor\n                a2 = i\n                # Calculate a3 as g divided by a2\n                a3 = g//i\n                # Check if a3 is equal to a1 or a2\n                if(a3 == a1 or a3 == a2):\n                    # If a3 is equal to a1 or a2, skip this iteration\n                    continue\n                # Break the loop as a2 is found\n                break\n        else:\n            # If no second prime factor is found, set ch2 to 0\n            ch2 = 0\n            \n    # Check if ch1 or ch2 is 0\n    if(ch1 ==0 or ch2 == 0):\n        # If ch1 or ch2 is 0, print \"NO\"\n        print(\"NO\")\n    else:\n        # If ch1 and ch2 are 1, print \"YES\" and the values of a1, a2, and a3\n        print(\"YES\")\n        print(a1,a2,a3)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `n`.\n2. Precompute a list of prime numbers up to a certain limit `s` (32000 in this case) using the Sieve of Eratosthenes algorithm. This list will be used to factorize numbers.\n3. For each test case:\n   a. Read the number `m`.\n   b. Initialize an empty list `p` to store the factors.\n   c. Initialize `k` to 0 and `c` to the first prime number in the list.\n   d. While `p` has less than 3 elements and `c` is less than or equal to the square root of `m`:\n      i. If `m` is divisible by `c`, divide `m` by `c` and add `c` to `p`.\n      ii. Otherwise, increment `k` and update `c` to the next prime number in the list.\n   e. If `p` has exactly 3 elements, check if the first two elements are the same. If they are, multiply the second element by the third element to make them distinct.\n   f. If `p` has exactly 2 elements, append `m` divided by the product of the first two elements to `p`.\n   g. Check if `p` has exactly 3 elements, and all elements are distinct and greater than 1. If this condition is met, print \"YES\" and the elements of `p`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Read the number of test cases\nn = int(input())\n\n# Precompute a list of prime numbers up to a certain limit\ns = 32000\nlst = [2]  # Initialize the list with 2\nfor i in range(3, s+1, 2):\n    # Skip numbers that end with 5 (to reduce the number of iterations)\n    if (i > 10) and (i % 10 == 5):\n        continue\n    for j in lst:\n        # If j*j-1 is greater than i, we can break the loop\n        if j*j-1 > i:\n            lst.append(i)\n            break\n        # If i is divisible by j, we can break the loop\n        if (i % j == 0):\n            break\n    else:\n        # If i is not divisible by any number in the list, add it to the list\n        lst.append(i)\n\n# Process each test case\nfor i in range(n):\n    # Read the number for the current test case\n    m = int(input())\n    m1 = m  # Store the original value of m\n    p = []  # Initialize the list to store factors\n    k = 0  # Initialize the index for the list of primes\n    c = lst[k]  # Initialize the current prime number\n    while len(p) < 3 and c <= sqrt(m1):\n        # If m is divisible by c, divide m by c and add c to p\n        if m % c == 0:\n            m = m // c\n            p.append(c)\n        else:\n            # Increment k and update c to the next prime number\n            k = k + 1\n            c = lst[k]\n    # If p has exactly 3 elements, check if the first two elements are the same\n    if len(p) == 3:\n        if p[0] == p[1]:\n            # If they are the same, multiply the second element by the third element\n            p[1] = p[1] * p[2]\n    # If p has exactly 2 elements, append m divided by the product of the first two elements to p\n    if len(p) == 2:\n        p.append(m1 // p[0] // p[1])\n    # Check if p has exactly 3 elements, and all elements are distinct and greater than 1\n    if len(p) == 3 and p[2] > 1 and p[0]!= p[2] and p[1]!= p[2] and p[0]!= p[1]:\n        # If the condition is met, print \"YES\" and the elements of p\n        print('YES')\n        print(*p)\n    else:\n        # Otherwise, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate through each test case.\n3. For each test case, read the number `n`.\n4. Calculate the cube root of `n` and store it in `k1`.\n5. Calculate the square of `k1` and store it in `k2`.\n6. Initialize variables `a`, `b`, and `s` with values 0 and `n` respectively.\n7. Iterate from 2 to `k1` (inclusive) to find the first factor `a` of `n`.\n8. If `a` is found, divide `n` by `a` and break the loop.\n9. If no factor is found, print \"NO\" and continue to the next test case.\n10. Calculate the square root of `n` and store it in `k`.\n11. Iterate from `a+1` to `k` (inclusive) to find the second factor `b` of `n`.\n12. If `b` is found, divide `n` by `b` and break the loop.\n13. If no factor is found, print \"NO\" and continue to the next test case.\n14. Calculate the third factor `c` by dividing `s` by the product of `a` and `b`.\n15. Check if `c` is equal to 1, `a`, or `b`. If true, print \"NO\".\n16. Otherwise, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nt=int(input()) # Read the number of test cases\nfor i in range(t): # Iterate through each test case\n    n=int(input()) # Read the number for the current test case\n    k1=int(pow(n,0.333)) # Calculate the cube root of n\n    k2=k1**2 # Calculate the square of k1\n    a=0 # Initialize variable a\n    b=0 # Initialize variable b\n    s=n # Initialize variable s with n\n    for j in range(2,k1+1): # Iterate from 2 to k1 to find the first factor a\n        if(n%j==0): # Check if n is divisible by j\n            a=j # If divisible, store j in a\n            n=n//j # Divide n by j\n            break # Break the loop\n    if(a==0): # If no factor is found\n        print ('NO') # Print \"NO\"\n        continue # Continue to the next test case\n    else: # If a factor is found\n        k=int(pow(n,0.5)) # Calculate the square root of n\n        for j in range(a+1,k+1): # Iterate from a+1 to k to find the second factor b\n            if(n%j==0): # Check if n is divisible by j\n                b=j # If divisible, store j in b\n                n=n//j # Divide n by j\n                break # Break the loop\n    if(b==0): # If no factor is found\n        print ('NO') # Print \"NO\"\n        continue # Continue to the next test case\n    else: # If a factor is found\n        c=s//(a*b) # Calculate the third factor c\n        if(c==1 or c==a or c==b): # Check if c is equal to 1, a, or b\n            print ('NO') # Print \"NO\"\n        else: # If c is not equal to 1, a, or b\n            print ('YES') # Print \"YES\"\n            print (a,end=\" \") # Print a\n            print (b,end=\" \") # Print b\n            print (c) # Print c\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read an integer `n` from the input.\n3. Initialize an empty stack `myStack` to store the prime factors of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find the first prime factor of `n`.\n5. If a prime factor `i` is found, divide `n` by `i` and push `i` and the quotient `x` onto the stack.\n6. If no prime factor is found, it means `n` is a prime number, so push `n` onto the stack.\n7. Repeat steps 4-6 until the stack contains three distinct integers or until `n` is reduced to 1.\n8. If the stack contains three distinct integers, check if their product equals `n`. If it does, print \"YES\" and the three integers. Otherwise, print \"NO\".\n9. If the stack does not contain three distinct integers, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef calc(n: int):\n    # Initialize an empty stack to store prime factors\n    myStack: list = [n]\n\n    # Iterate from 2 to sqrt(n) to find the first prime factor\n    for i in range(2, int(math.sqrt(myStack[-1])) + 1):\n        # Divide n by i and check if the remainder is 0\n        x, rem = divmod(myStack[-1], i)\n        if rem == 0:\n            # If the remainder is 0, push i and x onto the stack\n            myStack.pop()\n            myStack.append(i)\n            myStack.append(x)\n            break\n    else:\n        # If no prime factor is found, n is a prime number, so push n onto the stack\n        print('NO')\n        return\n\n    # Repeat the process to find the second prime factor\n    for i in range(2, int(math.sqrt(myStack[-1])) + 1):\n        x, rem = divmod(myStack[-1], i)\n        if rem == 0 and i not in myStack and x not in myStack:\n            # If the remainder is 0 and i and x are not in the stack, push i and x onto the stack\n            myStack.pop()\n            myStack.append(i)\n            myStack.append(x)\n            break\n    else:\n        # If no second prime factor is found, print \"NO\"\n        print('NO')\n        return\n\n    # Check if the stack contains three distinct integers\n    if len(set(myStack)) == 3:\n        # Check if the product of the three integers equals n\n        if (myStack[0] * myStack[1] * myStack[2]) == n:\n            # If the product equals n, print \"YES\" and the three integers\n            print('YES')\n            print('{0} {1} {2}'.format(myStack[0], myStack[1], myStack[2]))\n        else:\n            # If the product does not equal n, print \"NO\"\n            print('NO')\n    else:\n        # If the stack does not contain three distinct integers, print \"NO\"\n        print('NO')\n\n\ndef main():\n    # Read the number of test cases\n    for _ in range(int(input())):\n        # Read an integer n for each test case\n        calc(int(input()))\n\n\nif __name__ == '__main__':\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. If the number of prime factors is less than 3, it is impossible to represent `n` as a product of three distinct integers, so print \"NO\" and move to the next test case.\n5. Initialize three variables `a`, `b`, and `c` to 0, 1, and 1 respectively.\n6. Iterate through the prime factors of `n` starting from the second factor (index 1).\n7. For each factor, multiply `b` by the current factor. If `b` is not equal to `a`, it means we have found a distinct factor, so store the current index `i` and break the loop.\n8. Iterate through the prime factors starting from the index `i+1`.\n9. For each factor, multiply `c` by the current factor.\n10. Check if the set of `a`, `b`, and `c` contains three distinct integers and if each of them is greater than or equal to 2.\n11. If the conditions in step 10 are met, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to find prime factors of a number\ndef primeFactors(n):\n  # Initialize an empty list to store prime factors\n  factors = []\n  \n  # Divide n by 2 until it is no longer divisible\n  while n % 2 == 0:\n    # Append 2 to the list of factors\n    factors.append(2)\n    # Update n by dividing it by 2\n    n = n // 2\n  \n  # Iterate from 3 to the square root of n (inclusive) with a step of 2\n  for i in range(3, int(math.sqrt(n)) + 1, 2):\n    # While n is divisible by i, append i to the list of factors and update n\n    while n % i == 0:\n      factors.append(i)\n      n = n // i\n  \n  # If n is greater than 2, it means n is a prime number, so append it to the list of factors\n  if n > 2:\n    factors.append(n)\n  \n  # Return the list of prime factors\n  return factors\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor q in range(t):\n  # Read the integer n for the current test case\n  n = int(input())\n  \n  # Find the prime factors of n\n  factor = primeFactors(n)\n  \n  # If the number of prime factors is less than 3, it is impossible to represent n as a product of three distinct integers\n  if len(factor) < 3:\n    # Print \"NO\" and move to the next test case\n    print('NO')\n    continue\n  \n  # Initialize a, b, and c to 0, 1, and 1 respectively\n  a, b, c = 0, 0, 0\n  \n  # Set a to the first prime factor\n  a = factor[0]\n  \n  # Initialize b to 1\n  b = 1\n  \n  # Initialize c to 1\n  c = 1\n  \n  # Iterate through the prime factors starting from the second factor (index 1)\n  for i in range(1, len(factor)):\n    # Multiply b by the current factor\n    b *= factor[i]\n    \n    # If b is not equal to a, it means we have found a distinct factor, so store the current index i and break the loop\n    if b!= a:\n      # Store the current index i\n      cin = i\n      # Break the loop\n      break\n  \n  # Iterate through the prime factors starting from the index i+1\n  for i in range(cin + 1, len(factor)):\n    # Multiply c by the current factor\n    c *= factor[i]\n  \n  # Check if the set of a, b, and c contains three distinct integers and if each of them is greater than or equal to 2\n  if len(set([a, b, c])) == 3 and a >= 2 and b >= 2 and c >= 2:\n    # Print \"YES\" and the values of a, b, and c\n    print('YES')\n    print(a, b, c)\n  else:\n    # Print \"NO\"\n    print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `liste` to store the factors of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n5. If `n` is divisible by `i`, add `i` to the `liste` and divide `n` by `i`.\n6. If the count of factors in `liste` is greater than or equal to 2, it means we have found two factors `a` and `b` of `n`. Calculate the third factor `c` as `ori / (a * b)`, where `ori` is the original value of `n`.\n7. Check if `c` is distinct from `a`, `b`, and `1`. If it is, add `c` to the `liste` and set a flag `flag` to 1.\n8. If `flag` is 1, return \"YES\" and print the factors in `liste`. Otherwise, return \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef find(n):\n    # Initialize count of factors and flag\n    count = 0\n    flag = 0\n    \n    # Store the original value of n\n    ori = n\n    \n    # Initialize an empty list to store factors\n    liste = []\n    \n    # Iterate from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 3):\n        # Check if n is divisible by i\n        if (n % i == 0):\n            # Add i to the list of factors and divide n by i\n            count += 1\n            n = n // i\n            liste.append(i)\n        \n        # If we have found two factors, try to find the third factor\n        if (count >= 2):\n            # Calculate the third factor\n            r = ori // (liste[0] * liste[1])\n            \n            # Check if the third factor is distinct from the first two factors and 1\n            if (r!= liste[0] and r!= liste[1] and r!= 1):\n                # Add the third factor to the list and set the flag\n                liste.append(ori // (liste[0] * liste[1]))\n                flag = 1\n                break\n            else:\n                # Reset the count and remove the last factor from the list\n                count = 1\n                del liste[len(liste) - 1]\n    \n    # Return \"YES\" if we found three distinct factors, otherwise return \"NO\"\n    if (flag == 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n\n    n = int(input())\n    \n    # Call the find function and store the result\n    y = find(n)\n    \n    # Print the result\n    if (y == \"YES\"):\n        print(y)\n        print(*liste)\n    elif (y == \"NO\"):\n        print(y)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for each test case from the input.\n4. Initialize an empty list `p` to store the prime factors of `n`.\n5. Initialize a variable `m` to 2, which will be used to find prime factors.\n6. Use a while loop to find prime factors of `n`. The loop continues until `m*m` is greater than `n`.\n7. Inside the loop, check if `n` is divisible by `m` using the modulo operator (`n%m==0`).\n8. If `n` is divisible by `m`, divide `n` by `m` and append `m` to the list `p`.\n9. If the length of `p` is 2, break the loop as we have found two distinct prime factors.\n10. After the loop, check the length of `p`. If it's less than 2, print \"NO\" as it's impossible to represent `n` as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n11. If the length of `p` is 2, check if `n` is greater than 2 and if `p[0]` is not equal to `p[1]` and `p[1]` is not equal to `n`. If these conditions are met, print \"YES\" and the values of `p[0]`, `p[1]`, and `n`.\n12. If the conditions in step 11 are not met, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases t from the input\nfor i in range(int(input())):\n    # Read the value of n for each test case from the input\n    n = int(input())\n    \n    # Initialize an empty list p to store the prime factors of n\n    p = []\n    \n    # Initialize a variable m to 2, which will be used to find prime factors\n    m = 2\n    \n    # Use a while loop to find prime factors of n\n    while m * m <= n:\n        # Check if n is divisible by m using the modulo operator (n%m==0)\n        if n % m == 0:\n            # If n is divisible by m, divide n by m and append m to the list p\n            n = n // m\n            p.append(m)\n            # If the length of p is 2, break the loop as we have found two distinct prime factors\n            if len(p) == 2:\n                break\n        # Increment m by 1\n        m += 1\n    \n    # Check the length of p\n    if len(p) < 2:\n        # If the length of p is less than 2, print \"NO\" as it's impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c\n        print(\"NO\")\n    elif p[0]!= p[1]!= n and n > 2:\n        # If the length of p is 2, check if n is greater than 2 and if p[0] is not equal to p[1] and p[1] is not equal to n\n        # If these conditions are met, print \"YES\" and the values of p[0], p[1], and n\n        print(\"YES\")\n        print(*p, n)\n    else:\n        # If the conditions in step 11 are not met, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty set `X` to store the factors of `n`.\n5. Initialize a variable `x` to 1, which will be used to store the current factor being processed.\n6. Iterate from 2 to the square root of `n` (inclusive) to find the prime factors of `n`.\n7. For each divisor `d` in the range, check if `n` is divisible by `d`.\n8. If `n` is divisible by `d`, multiply `x` by `d`, divide `n` by `d`, and add `x` to the set `X`. Reset `x` to 1.\n9. After the loop, add the remaining value of `n` multiplied by the current value of `x` to the set `X`.\n10. Check if the set `X` contains less than 3 elements or if 1 is present in `X`.\n11. If the condition in step 10 is true, print 'NO'. Otherwise, print 'YES' and the elements of `X`.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty set to store the factors of n\n    X = set()\n    \n    # Initialize a variable to store the current factor being processed\n    x = 1\n    \n    # Iterate from 2 to the square root of n to find the prime factors of n\n    for d in range(2, 1+int(n**0.5)):\n        # Check if n is divisible by d\n        while not n%d:\n            # Multiply x by d, divide n by d, and add x to the set X\n            x *= d\n            n //= d\n            # Check if the set X has less than 2 elements and x is not already in X\n            if len(X) < 2 and x not in X:\n                # Add x to the set X\n                X.add(x)\n                # Reset x to 1\n                x = 1\n    \n    # Add the remaining value of n multiplied by the current value of x to the set X\n    X.add(n*x)\n    \n    # Check if the set X contains less than 3 elements or if 1 is present in X\n    if len(X) < 3 or 1 in X:\n        # Print 'NO' if the condition is true\n        print('NO')\n    else:\n        # Print 'YES' and the elements of X\n        print('YES')\n        print(*X)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. If `n` is a prime number greater than 2, print \"NO\" and move to the next test case.\n5. Otherwise, find the remaining two distinct integers `b` and `c` such that `a * b * c = n` by iterating from 2 to the square root of `n`.\n6. If such integers `b` and `c` are found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nimport math\ninput = sys.stdin.readline\n\n# A function to print all prime factors of a given number n\ndef primeFactors(n):\n    # Print the number of two's that divide n\n    while n % 2 == 0:\n        # Divide n by 2 and return the result\n        n = n / 2\n        # Return the first prime factor (2) and the updated n\n        return (2, n)\n\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            n = n / i\n            # Return the current prime factor and the updated n\n            return (i, n)\n\n    # Condition if n is a prime number greater than 2\n    return (-1, -1)\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find the prime factors of n\n    a, n = primeFactors(n)\n    # Initialize variables to store the remaining prime factors\n    b = -1\n    c = -1\n    # Flag to check if the remaining prime factors are found\n    flag = 0\n    # If n is a prime number greater than 2, print \"NO\"\n    if a == -1:\n        print(\"NO\")\n    else:\n        # Iterate from 2 to the square root of n\n        i = 2\n        while i <= math.sqrt(n):\n            # Check if n is divisible by i\n            if n % i == 0:\n                # Check if n//i is greater than or equal to 2\n                if n // i >= 2:\n                    # Check if i, n//i, and a are distinct\n                    if i!= a and (n // i!= a and i!= n // i):\n                        # Store the remaining prime factors\n                        b = i\n                        c = n // i\n                        # Set the flag to 1\n                        flag = 1\n            # Increment i by 1\n            i += 1\n        # If the remaining prime factors are found, print \"YES\" and the values of a, b, and c\n        if flag == 1:\n            print(\"YES\")\n            print(a, int(b), int(c))\n        # Otherwise, print \"NO\"\n        else:\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, denoted as `t`, from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read an integer `n` from the input.\n4. Initialize a flag `pos` to `False`, indicating whether a valid triplet `(a, b, c)` is found.\n5. Iterate from `a = 2` to the cube root of `n` (inclusive) to find a divisor `a` of `n`.\n6. If `n` is divisible by `a`, calculate `z = n // a`.\n7. Iterate from `b = a + 1` to the square root of `z` (inclusive) to find a divisor `b` of `z`.\n8. If `z` is divisible by `b` and `b*b!= z`, it means `b` and `z//b` are distinct factors of `z`, so set `pos` to `True` and print the triplet `(a, b, z//b)`.\n9. If `pos` is `True`, break the loop as a valid triplet is found.\n10. If no valid triplet is found after iterating through all possible values of `a` and `b`, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read an integer n for the current test case\n    n = int(input())\n    \n    # Initialize a flag to track whether a valid triplet is found\n    pos = False\n    \n    # Iterate from a = 2 to the cube root of n to find a divisor a of n\n    for a in range(2, int(pow(n, 1/3)) + 1):\n        # Check if n is divisible by a\n        if n % a == 0:\n            # Calculate z = n // a\n            z = n // a\n            \n            # Iterate from b = a + 1 to the square root of z to find a divisor b of z\n            for b in range(a + 1, int(sqrt(z)) + 1):\n                # Check if z is divisible by b and b*b!= z\n                if z % b == 0 and b * b!= z:\n                    # Set pos to True and print the triplet (a, b, z//b)\n                    pos = True\n                    print('YES')\n                    print(a, b, z // b)\n                    # Break the loop as a valid triplet is found\n                    break\n        # If pos is True, break the loop\n        if pos:\n            break\n    \n    # If no valid triplet is found, print \"NO\"\n    if not pos:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the function `f(a)`.\n4. Count the occurrences of each prime factor and store them in a list of lists `list2`.\n5. Analyze the count of prime factors in `list2` to determine if it's possible to represent `n` as a product of three distinct integers.\n6. If possible, print \"YES\" and the three distinct integers; otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nt = int(input())\n\n# Function to find prime factors of a number\ndef f(a):\n    # Initialize the first prime factor as 2\n    b = 2\n    # Convert the input to an integer\n    a = int(a)\n    # Initialize an empty list to store prime factors\n    fac = []\n    # Calculate the square root of the number\n    c = math.sqrt(a)\n    # Iterate through possible prime factors\n    while b <= c and a > 1:\n        # Check if the number is divisible by the current prime factor\n        if a % b == 0:\n            # If divisible, remove the factor from the number and add it to the list\n            while a % b == 0:\n                fac.append(b)\n                a /= b\n            # Move to the next prime factor\n            b += 1\n        else:\n            # If not divisible, move to the next prime factor\n            b += 1\n    # If the remaining number is not 1, it's a prime factor\n    if a!= 1:\n        fac.append(a)\n    return fac\n\n# Iterate through each test case\nfor i in range(t):\n    # Read the integer for the current test case\n    n = int(input())\n    # Find the prime factors of the integer\n    list = f(n)\n    # Initialize an empty list to store prime factors with their counts\n    list2 = []\n    # Clear the list to avoid using the previous test case's data\n    list2.clear()\n    # Iterate through the prime factors\n    while list:\n        # Get the first prime factor\n        i = list[0]\n        # Count the occurrences of the prime factor\n        b = list.count(i)\n        # Add the prime factor and its count to the list\n        list2.append([i, b])\n        # Remove the prime factor from the list\n        for j in range(b):\n            list.remove(i)\n    # Get the number of prime factors\n    c = len(list2)\n    # Analyze the count of prime factors\n    if c >= 3:\n        # If there are at least three prime factors, print \"YES\" and the three distinct integers\n        print(\"YES\")\n        # Calculate the three distinct integers\n        print(list2[0][0], list2[1][0], int(n / list2[0][0] / list2[1][0]))\n    elif c == 1:\n        # If there is only one prime factor\n        if (list2[0][1] >= 6):\n            # If the count of the prime factor is at least 6, print \"YES\" and the three distinct integers\n            print(\"YES\")\n            # Calculate the three distinct integers\n            print(list2[0][0], list2[0][0] * list2[0][0], int(n / list2[0][0] / list2[0][0] / list2[0][0]))\n        else:\n            # If the count of the prime factor is less than 6, print \"NO\"\n            print(\"NO\")\n    elif c == 0:\n        # If there are no prime factors, print \"NO\"\n        print(\"NO\")\n    else:\n        # If there are two prime factors\n        if (list2[0][1] >= 2 and list2[1][1] >= 2):\n            # If the counts of both prime factors are at least 2, print \"YES\" and the three distinct integers\n            print(\"YES\")\n            # Calculate the three distinct integers\n            print(list2[0][0], list2[1][0], int(n / list2[0][0] / list2[1][0]))\n        elif list2[0][1] >= 3:\n            # If the count of the first prime factor is at least 3, print \"YES\" and the three distinct integers\n            print(\"YES\")\n            # Calculate the three distinct integers\n            print(list2[0][0], int(list2[1][0]), int(n / list2[0][0] / list2[1][0]))\n        elif list2[1][1] >= 3:\n            # If the count of the second prime factor is at least 3, print \"YES\" and the three distinct integers\n            print(\"YES\")\n            # Calculate the three distinct integers\n            print(list2[0][0], list2[1][0], int(n / list2[0][0] / list2[1][0]))\n        else:\n            # If neither prime factor has a count of at least 3, print \"NO\"\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all factors of `n` using the `factors` function.\n4. Sort the factors in ascending order.\n5. Check if there are at least four factors. If not, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n6. If there are at least four factors, try to find three distinct factors `a`, `b`, and `c` such that `a * b * c = n`. We do this by checking if there exists a factor `c` such that `c > 1`, `c` is not equal to the first two factors `a` and `b`, and `n // a // b` equals `c`. If such a `c` exists, print \"YES\" and the values of `a`, `b`, and `c`.\n7. If no such `c` exists, try to find another set of factors `a1`, `b1`, and `e` such that `e > 1`, `e` is not equal to `a1` and `b1`, and `n // a1 // b1` equals `e`. If such an `e` exists, print \"YES\" and the values of `a1`, `b1`, and `e`.\n8. If no such `e` exists, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nfrom functools import reduce\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\n# Function to find all factors of a number\ndef factors(n):    \n    # Use a list comprehension to generate all factors of n\n    # The list comprehension iterates over all numbers from 1 to the square root of n\n    # For each number i, it checks if n is divisible by i\n    # If n is divisible by i, it adds both i and n // i to the list of factors\n    return list(set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\n\n# Function to generate the output for each test case\ndef product():\n    # Read the number of test cases from the input\n    for _ in range(int(input())):\n        # Read the integer n from the input\n        n=int(input())\n        \n        # Find all factors of n\n        yn=factors(n)\n        \n        # Sort the factors in ascending order\n        yn.sort()\n        \n        # Check if there are at least four factors\n        if len(yn)>=4:\n            # Try to find three distinct factors a, b, and c such that a * b * c = n\n            # We do this by checking if there exists a factor c such that c > 1, c is not equal to the first two factors a and b, and n // a // b equals c\n            a,b=yn[1],yn[3]\n            c=n//yn[1]//yn[3]\n            d=n//yn[1]%yn[3]\n            \n            # If such a c exists, print \"YES\" and the values of a, b, and c\n            if c>1 and c!=a and c!=b and d==0:\n                yield 'YES'\n                yield str(a)+' '+str(b)+' '+str(c)\n            # If no such c exists, try to find another set of factors a1, b1, and e such that e > 1, e is not equal to a1 and b1, and n // a1 // b1 equals e\n            elif len(yn)>=5:\n                a1,b1=yn[1],yn[2]\n                e=n//yn[1]//yn[2]\n                f=n//yn[1]%yn[2]\n                # If such an e exists, print \"YES\" and the values of a1, b1, and e\n                if e>1 and e!=a1 and e!=b1 and f==0:\n                    yield 'YES'\n                    yield str(a1)+' '+str(b1)+' '+str(e)\n                # If no such e exists, it's impossible to represent n as a product of three distinct integers, so print \"NO\"\n                else:\n                    yield'NO'\n            # If no such c or e exists, it's impossible to represent n as a product of three distinct integers, so print \"NO\"\n            else:\n                yield'NO'\n        # If there are less than four factors, it's impossible to represent n as a product of three distinct integers, so print \"NO\"\n        else:\n            yield 'NO'\n\nif __name__ == '__main__':\n    # Read the number of test cases from the input\n    t= int(input())\n    \n    # Generate the output for each test case\n    ans = product()\n    \n    # Print the output for each test case\n    print(*ans,sep='\\n')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate through each test case using a while loop, decrementing `t` by 1 in each iteration.\n3. Read the value of `n` for the current test case from the input.\n4. Check if `n` is less than or equal to 1 or equal to 2. If true, print \"NO\" and continue to the next test case.\n5. Create a copy of `n` and initialize variables `num_factors`, `first_factor`, and `second_factor` to 0 and -1 respectively.\n6. Calculate the square root of `n` and iterate through numbers from 2 to the square root of `n`.\n7. For each number `i` in the range, check if `n_copy` (the copy of `n`) is divisible by `i`. If true, update `first_factor` and `second_factor` accordingly and divide `n_copy` by `i`.\n8. If `first_factor` and `second_factor` are not updated or if `first_factor` equals `n_copy` or `second_factor` equals `n_copy` or `n_copy` equals 1, print \"NO\" and continue to the next test case.\n9. If the above conditions are not met, print \"YES\" and the values of `first_factor`, `second_factor`, and `n_copy`.\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nwhile t > 0:\n    # Decrement t by 1 in each iteration\n    t -= 1\n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Check if n is less than or equal to 1 or equal to 2\n    if n == 1 or n == 2:\n        # If true, print \"NO\" and continue to the next test case\n        print(\"NO\")\n        continue\n    \n    # Create a copy of n and initialize variables\n    num_factors = 0\n    first_factor = -1\n    second_factor = -1\n    \n    # Calculate the square root of n\n    s = int(math.sqrt(n))\n    \n    # Iterate through numbers from 2 to the square root of n\n    for i in range(2, s):\n        # Check if n_copy (the copy of n) is divisible by i\n        if n_copy % i == 0:\n            # If true, update first_factor and second_factor accordingly\n            if first_factor == -1:\n                first_factor = i\n            elif second_factor == -1:\n                second_factor = i\n            else:\n                # If both factors are found, break the loop\n                break\n            # Divide n_copy by i\n            n_copy = n_copy // i\n    \n    # Check if first_factor and second_factor are not updated or if first_factor equals n_copy or second_factor equals n_copy or n_copy equals 1\n    if first_factor == -1 or second_factor == -1 or first_factor == n_copy or second_factor == n_copy or n_copy == 1:\n        # If true, print \"NO\" and continue to the next test case\n        print(\"NO\")\n    else:\n        # If the above conditions are not met, print \"YES\" and the values of first_factor, second_factor, and n_copy\n        print(\"YES\")\n        print(first_factor, second_factor, n_copy)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Calculate the square root of `n` and store it in `a`. Then, convert `a` to an integer.\n5. Initialize an empty list `c` to store the factors of `n`.\n6. Initialize a flag `f` to 0, which will be used to check if `n` can be represented as a product of three distinct integers.\n7. Initialize a variable `d` to 0, which is not used in the code and can be removed.\n8. Iterate from 2 to `a` (inclusive) to find the first factor of `n`.\n9. If `n` is divisible by the current number `j`, set `f` to 1 and store `j` as `x` and `n//j` as `y`.\n10. If no factor is found, print \"NO\" for the current test case.\n11. If a factor is found, iterate from 2 to the square root of `y` (inclusive) to find the second factor.\n12. If `y` is divisible by the current number `j` and `x` is not equal to `j` and `y//j` is not equal to `x`, set `f` to 1 and store `j` as `z` and update `y` to `y//j`.\n13. If no second factor is found, print \"NO\" for the current test case.\n14. If a second factor is found, print \"YES\" and the three factors `x`, `y`, and `z` for the current test case.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Calculate the square root of n and store it in a\n    a = math.sqrt(n)\n    a = int(a)\n\n    # Initialize an empty list c to store the factors of n\n    c = []\n\n    # Initialize a flag f to 0\n    f = 0\n\n    # Initialize a variable d to 0 (not used in the code)\n    d = 0\n\n    # Initialize b to the integer value of a\n    b = int(a)\n\n    # Iterate from 2 to a (inclusive) to find the first factor of n\n    for j in range(2, a + 1, 1):\n        # Check if n is divisible by the current number j\n        if (n % j == 0):\n            # Set f to 1 and store j as x and n//j as y\n            f = 1\n            x = j\n            y = n // j\n            break\n\n    # If no factor is found, print \"NO\" for the current test case\n    if (f == 0):\n        print(\"NO\")\n    else:\n        # Initialize f to 0 again\n        f = 0\n\n        # Iterate from 2 to the square root of y (inclusive) to find the second factor\n        for j in range(2, int(y ** (1 / 2)) + 1):\n            # Check if y is divisible by the current number j\n            if (y % j == 0):\n                # Check if x is not equal to j and y//j is not equal to x\n                if (x!= j and y // j!= x and y // j!= j):\n                    # Set f to 1 and store j as z and update y to y//j\n                    z = j\n                    y = y // j\n                    f = 1\n                    break\n\n        # If no second factor is found, print \"NO\" for the current test case\n        if (f == 0):\n            print(\"NO\")\n        else:\n            # Print \"YES\" and the three factors x, y, and z for the current test case\n            print(\"YES\")\n            print(x, y, z)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `f` to 1, which will be used to track whether a valid solution is found.\n5. Iterate over all numbers `a` from 2 to the square root of `n` (inclusive).\n6. For each `a`, check if `n` is divisible by `a` (i.e., `n % a == 0`).\n7. If `n` is divisible by `a`, calculate `curn` as `n` divided by `a`.\n8. Iterate over all numbers `b` from 2 to the square root of `curn` (inclusive).\n9. For each `b`, check if `curn` is divisible by `b` (i.e., `curn % b == 0`) and if `b` is not equal to `a`.\n10. If `curn` is divisible by `b` and `b` is not equal to `a`, calculate `c` as `curn` divided by `b`.\n11. Check if `c` is not equal to `b` and not equal to `a`.\n12. If all conditions in steps 10 and 11 are met, print \"YES\" and the values of `a`, `b`, and `c`.\n13. Set the flag `f` to 0 to indicate that a valid solution is found.\n14. If the loop completes without finding a valid solution, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize a flag to track whether a valid solution is found\n    f = 1\n    \n    # Iterate over all numbers a from 2 to the square root of n\n    for a in range(2, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by a\n        if f and n % a == 0:\n            # Calculate curn as n divided by a\n            curn = n // a\n            \n            # Iterate over all numbers b from 2 to the square root of curn\n            for b in range(2, int(math.sqrt(curn)) + 1):\n                # Check if curn is divisible by b and b is not equal to a\n                if f and b!= a and curn % b == 0:\n                    # Calculate c as curn divided by b\n                    c = curn // b\n                    \n                    # Check if c is not equal to b and not equal to a\n                    if c!= b and c!= a:\n                        # Print \"YES\" and the values of a, b, and c\n                        print('YES')\n                        print(a, b, c)\n                        \n                        # Set the flag to 0 to indicate that a valid solution is found\n                        f = 0\n    \n    # If the loop completes without finding a valid solution, print \"NO\"\n    if f:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all distinct factors of `n` using the `facts` function.\n4. Sort the factors in ascending order.\n5. Initialize an empty dictionary `d` to keep track of the factors we have seen so far.\n6. Iterate over the sorted factors. For each factor `a`, iterate over the remaining factors `b`.\n7. Calculate the third factor `c` as `n / (a * b)`.\n8. Check if `c` is a factor of `n`, and if `a`, `b`, and `c` are distinct.\n9. If all conditions are met, print \"YES\" and the values of `a`, `b`, and `c`.\n10. If no such factors are found after checking all combinations, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef facts(n):\n    # Find all distinct factors of n\n    l = []\n    for i in range(2, int(pow(n, 0.5)) + 1):\n        if n % i == 0:\n            # Append both the factor and its pair\n            l.append(i)\n            l.append(n // i)\n    # Remove duplicates by converting the list to a set and back to a list\n    return list(set(l))\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find all distinct factors of n\n    l = facts(n)\n    # Sort the factors in ascending order\n    l.sort()\n    # Initialize an empty dictionary to keep track of seen factors\n    d = {}\n    for i in l:\n        d[i] = 0\n    # Flag to indicate if a solution is found\n    flag = 0\n    # Iterate over the sorted factors\n    for i in range(len(l)):\n        # Iterate over the remaining factors\n        for j in range(i + 1, len(l)):\n            # Calculate the third factor\n            a, b = l[i], l[j]\n            c = n // (a * b)\n            try:\n                # Check if c is a factor of n and if a, b, and c are distinct\n                if d[c] == 0 and a!= c and b!= c:\n                    # Print the solution\n                    print(\"YES\")\n                    print(a, b, c)\n                    # Set the flag to indicate that a solution is found\n                    flag = 1\n            except:\n                # Ignore the case where c is not a factor of n\n                continue\n            # If a solution is found, break the inner loop\n            if flag:\n                break\n        # If a solution is found, break the outer loop\n        if flag:\n            break\n    # If no solution is found, print \"NO\"\n    if not flag:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for the current test case.\n4. Initialize a flag variable `flag` to False, which will be used to track whether a valid solution is found.\n5. Iterate over all numbers `i` from 2 to the square root of `n` (inclusive) using a for loop.\n6. Check if `n` is divisible by `i` using the modulo operator (`n % i == 0`). If it is, proceed to the next step.\n7. Calculate the value of `x` as `i` and `yy` as `n` divided by `i`.\n8. Iterate over all numbers `j` from `i+1` to the square root of `yy` (inclusive) using a for loop.\n9. Check if `yy` is divisible by `j` using the modulo operator (`yy % j == 0`). If it is, proceed to the next step.\n10. Calculate the values of `y` as `j` and `z` as `yy` divided by `j`.\n11. Check if `z` is greater than or equal to 2 and not equal to `y` and `x`. If it is, set the `flag` variable to True and store the values of `x`, `y`, and `z` in a list `l`.\n12. If a valid solution is found (`flag` is True), print \"YES\" and the values of `x`, `y`, and `z` using the `print(*l)` function, and break out of the inner loops.\n13. If no valid solution is found after iterating over all possible values of `i` and `j`, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor t in range(int(input())):\n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Initialize a flag variable to False\n    flag = False\n    \n    # Iterate over all numbers i from 2 to the square root of n (inclusive)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Calculate the value of x as i and yy as n divided by i\n            x = i\n            yy = n // i\n            \n            # Iterate over all numbers j from i+1 to the square root of yy (inclusive)\n            for j in range(i + 1, int(math.sqrt(yy)) + 1):\n                # Check if yy is divisible by j\n                if yy % j == 0:\n                    # Calculate the values of y as j and z as yy divided by j\n                    y = j\n                    z = yy // j\n                    \n                    # Check if z is greater than or equal to 2 and not equal to y and x\n                    if z >= 2 and z!= y and z!= x:\n                        # Set the flag variable to True and store the values of x, y, and z in a list l\n                        flag = True\n                        l = [x, y, z]\n                        \n                        # Print \"YES\" and the values of x, y, and z\n                        print(\"YES\")\n                        print(*l)\n                        \n                        # Break out of the inner loops\n                        break\n            # If a valid solution is found, break out of the outer loop\n            if flag:\n                break\n    \n    # If no valid solution is found, print \"NO\"\n    if flag == False:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate through each test case.\n3. For each test case, read the integer `n`.\n4. Initialize an empty list `l` to store the factors of `n`.\n5. Find the smallest factor `j` of `n` greater than or equal to 2.\n6. Divide `n` by `j` and store `j` in `l`.\n7. Find the next factor `j` of `n` greater than or equal to 2, ensuring it is not already in `l`.\n8. If `l` contains exactly two elements, check if `n` is divisible by the product of these two elements.\n9. If `n` is divisible, find the third factor `c` by dividing `n` by the product of the two elements in `l`.\n10. Check if `c` is not already in `l`.\n11. If all conditions are met, print \"YES\" and the three factors `l[0]`, `l[1]`, and `c`.\n12. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Initialize an empty list to store the factors of n\n    k = n  # Store the original value of n\n    l = []\n\n    # Find the smallest factor j of n greater than or equal to 2\n    for j in range(2, int(math.sqrt(n)) + 1):\n        if n % j == 0:\n            # Store j in l and divide n by j\n            l.append(j)\n            break\n\n    # If l is not empty, continue the process\n    if len(l)!= 0:\n        # Divide n by the factor found earlier\n        n = n // l[0]\n\n    # Find the next factor j of n greater than or equal to 2, ensuring it is not already in l\n    for j in range(2, int(math.sqrt(n)) + 1):\n        if n % j == 0:\n            if j not in l:\n                # Store j in l and break the loop\n                l.append(j)\n                break\n\n    # Check if l contains exactly two elements\n    if len(l) == 2:\n        # Check if n is divisible by the product of the two elements in l\n        if k % (l[0] * l[1]) == 0:\n            # Find the third factor c by dividing n by the product of the two elements in l\n            c = k // (l[0] * l[1])\n            # Check if c is not already in l\n            if c not in l:\n                # Print \"YES\" and the three factors l[0], l[1], and c\n                print(\"YES\")\n                print(l[0], l[1], c)\n            else:\n                # Print \"NO\" if c is already in l\n                print(\"NO\")\n    else:\n        # Print \"NO\" if l does not contain exactly two elements\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `T` from the input.\n2. For each test case, read the integer `x` from the input.\n3. Check if `x` is a prime number or if it can be represented as a product of two distinct prime numbers. If so, print \"NO\".\n4. If `x` is not a prime number or cannot be represented as a product of two distinct prime numbers, find its prime factors using the `primeFactors` function.\n5. If the number of distinct prime factors is greater than 2, print \"YES\" and the prime factors as the answer.\n6. If the number of distinct prime factors is 1, check if the exponent of the prime factor is greater than or equal to 6. If so, print \"YES\" and the prime factor and its square as the answer. Otherwise, print \"NO\".\n7. If the number of distinct prime factors is 2, check if the sum of the exponents of the prime factors is greater than or equal to 4. If so, print \"YES\" and the prime factors as the answer. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import *\nfrom operator import *\n\ndef isPrime(x):\n\t# Check if x is a prime number\n\tif(x in [1,4]):\n\t\treturn False\n\telif(x in [2,3,5]):\n\t\treturn True\n\telse:\n\t\t# Check if x is divisible by any number up to its square root\n\t\tfor i in range(2,int(sqrt(x))+1):\n\t\t\tif(x%i == 0):\n\t\t\t\treturn False\n\t\treturn True\n\ndef Sieve(x):\n\t# Create a sieve to find all prime numbers up to x\n\tcheckPrime = [1 for i in range(x+1)]\n\tzz = 2\n\tL = []\n\twhile(zz**2 <= x):\n\t\tif(checkPrime[zz] == 1):\n\t\t\t# Mark all multiples of zz as non-prime\n\t\t\tfor i in range(zz*2,x+1,zz):\n\t\t\t\tcheckPrime[i] = 0\n\t\tzz += 1\n\tfor i in range(2,x):\n\t\tif(checkPrime[i] == 1):\n\t\t\t# Add all prime numbers to the list\n\t\t\tL.append(i)\n\treturn checkPrime\n\ncheckPrime = Sieve(100001)\n\ndef primeFactors(x):\n\t# Find the prime factors of x\n\td = {}\n\ti = 0\n\tX = x\n\twhile(x%2 == 0):\n\t\tx //= 2\n\t\ti += 1\n\tif(i > 0):\n\t\t# Add 2 as a prime factor if it divides x\n\t\td[2] = i\n\tfor i in range(3,int(sqrt(x))+1,2):\n\t\tzz = 0\n\t\twhile(x%i == 0):\n\t\t\tx //= i\n\t\t\tzz += 1\n\t\tif(zz > 0):\n\t\t\t# Add i as a prime factor if it divides x\n\t\t\td[i] = zz\n\tif(x > 2):\n\t\t# Add x as a prime factor if it is a prime number\n\t\td[x] = 1\n\treturn d\n\n\nT = int(input())\nfor tt in range(T):\n\tx = int(input())\n\tif(x%2!= 0 and x%3!= 0 and isPrime(x)):\n\t\t# If x is a prime number and not divisible by 2 or 3, print \"NO\"\n\t\tprint('NO')\n\telif(isPrime(x)):\n\t\t# If x is a prime number, print \"NO\"\n\t\tprint('NO')\n\telse:\n\t\td = primeFactors(x)\n\t\t# Find the prime factors of x\n\t\tans = [0,0,0]\n\t\tif(len(d) > 2):\n\t\t\t# If there are more than 2 distinct prime factors, print \"YES\" and the prime factors as the answer\n\t\t\tprint('YES')\n\t\t\tfor i in d:\n\t\t\t\tif(ans[0] == 0):\n\t\t\t\t\tans[0] = i\n\t\t\t\telif(ans[1] == 0):\n\t\t\t\t\tans[1] = i\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tans[2] = x//(ans[0]*ans[1])\n\t\t\tprint(*ans)\n\t\telif(len(d) == 1):\n\t\t\t# If there is only 1 distinct prime factor, check its exponent\n\t\t\tfor i in d:\n\t\t\t\tif(d[i] < 6):\n\t\t\t\t\t# If the exponent is less than 6, print \"NO\"\n\t\t\t\t\tprint('NO')\n\t\t\t\telse:\n\t\t\t\t\t# If the exponent is greater than or equal to 6, print \"YES\" and the prime factor and its square as the answer\n\t\t\t\t\tprint('YES')\n\t\t\t\t\tprint(i,i**2,x//(i*i**2))\n\t\telse:\n\t\t\tans = [0]*3\n\t\t\td = sorted(d.items(), key=itemgetter(1))\n\t\t\tif(d[0][1] >= 6):\n\t\t\t\t# If the exponent of the first prime factor is greater than or equal to 6, print \"YES\" and the prime factor and its square as the answer\n\t\t\t\tprint('YES')\n\t\t\t\ti = d[0][0]\n\t\t\t\tprint(i,i**2,x//(i*i**2))\n\t\t\telif(d[0][1] + d[1][1] >= 4):\n\t\t\t\t# If the sum of the exponents of the first two prime factors is greater than or equal to 4, print \"YES\" and the prime factors as the answer\n\t\t\t\tprint('YES')\n\t\t\t\tprint(d[0][0],d[1][0],x//(d[0][0]*d[1][0]))\n\t\t\telse:\n\t\t\t\t# Otherwise, print \"NO\"\n\t\t\t\tprint('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find all prime factors of `n` using the `P(n)` function.\n4. If the number of prime factors is greater than 2, try to form three distinct integers `a`, `b`, and `c` from these factors.\n5. If `a` and `b` are the same, multiply `b` by the next factor to make it distinct from `a`.\n6. Multiply all remaining factors to form `c`.\n7. Check if `a`, `b`, and `c` are distinct and not equal to 1.\n8. If they are distinct, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n9. If the number of prime factors is not greater than 2, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef P(n):  # Function to find all prime factors of a number\n    i = 2  # Initialize the divisor to 2\n    factors = []  # List to store prime factors\n    while i * i <= n:  # Loop until the square of the divisor is less than or equal to n\n        if n % i:  # If n is not divisible by the current divisor\n            i += 1  # Increment the divisor\n        else:  # If n is divisible by the current divisor\n            n //= i  # Divide n by the divisor\n            factors.append(i)  # Add the divisor to the list of factors\n    if n > 1:  # If n is greater than 1 after the loop\n        factors.append(n)  # Add n to the list of factors\n    return factors\n\nt = int(input())  # Read the number of test cases\nfor i in range(t):  # Loop through each test case\n    x = int(input())  # Read the integer n for the current test case\n\n    p = P(x)  # Find all prime factors of n\n    if len(p) > 2:  # If the number of prime factors is greater than 2\n        a = p[0]  # Initialize a to the first prime factor\n        b = p[1]  # Initialize b to the second prime factor\n        c = 1  # Initialize c to 1\n        for j in range(2, len(p)):  # Loop through the remaining prime factors\n            if a == b:  # If a and b are the same\n                b *= p[j]  # Multiply b by the current prime factor\n            else:  # If a and b are different\n                c *= p[j]  # Multiply c by the current prime factor\n        if c!= 1 and a!= b and b!= c and c!= a:  # Check if a, b, and c are distinct and not equal to 1\n            print(\"YES\")  # Print \"YES\" if the conditions are met\n            print(a, b, c)  # Print the values of a, b, and c\n        else:  # If the conditions are not met\n            print(\"NO\")  # Print \"NO\"\n    else:  # If the number of prime factors is not greater than 2\n        print(\"NO\")  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Check if `n` is a prime number using the `isPrime` function. If it is, print \"NO\" and move to the next test case.\n5. If `n` is not prime, find its prime factors by dividing it by increasing integers `i` until `i*i` is greater than `n`.\n6. Store the prime factors in a list `c`.\n7. If the length of `c` is less than 3 or if any two elements in `c` are the same, print \"NO\" and move to the next test case.\n8. If `c` has at least three distinct elements, print \"YES\" and the elements of `c` as the solution.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to check if a number is prime\ndef isPrime(n) : \n    # If n is less than or equal to 1, it's not prime\n    if (n <= 1) : \n        return False\n    # If n is 2 or 3, it's prime\n    if (n <= 3) : \n        return True\n    # If n is divisible by 2 or 3, it's not prime\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    # Check for divisibility up to the square root of n\n    i = 5\n    while(i * i <= n) : \n        # If n is divisible by i or i+2, it's not prime\n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n  \n    # If n is not divisible by any number up to its square root, it's prime\n    return True\n\n# Read the number of test cases\nt=int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n=int(input())\n    \n    # Check if n is prime\n    x=isPrime(n)\n    \n    # If n is prime, print \"NO\"\n    if x==True:\n        print(\"NO\")\n    else:\n        # Initialize an empty list to store prime factors\n        c=[]\n        # Initialize a counter for the number of prime factors\n        count=0\n        # Calculate the square root of n\n        vv=math.sqrt(n)\n        # Convert the square root to an integer\n        vv=int(vv)\n        \n        # Find prime factors of n\n        i=2\n        while i*i<n:\n            # If n is divisible by i, it's a prime factor\n            if n%i==0:\n                count+=1\n                # Divide n by i\n                n=n//i\n                # Add i to the list of prime factors\n                c.append(i)\n            # If we've found two prime factors, we can stop\n            if count==2:\n                # Add the remaining n to the list of prime factors\n                c.append(n)\n                break\n            # Increment i by 1\n            i+=1\n        \n        # Check if we've found at least three distinct prime factors\n        if len(c)<3 or c[0]==c[1] or c[1]==c[2]:\n            # If not, print \"NO\"\n            print(\"NO\")\n        else:\n            # If we've found three distinct prime factors, print \"YES\" and the prime factors\n            print(\"YES\")\n            # Use the * operator to unpack the list of prime factors and print them\n            print(*c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `l` to store the prime factors of `n`.\n4. Find the square root of `n` and iterate from 2 to the square root of `n` to find the first prime factor of `n`.\n5. If a prime factor is found, add it to the list `l`, divide `n` by the prime factor, and break the loop.\n6. If no prime factor is found in the first loop, iterate from 2 to the square root of `n` again to find the first prime factor of `n`.\n7. If a prime factor is found, add it to the list `l`, divide `n` by the prime factor, and break the loop.\n8. If `n` is less than 2 or if `n` is already in the list `l`, print \"NO\".\n9. Otherwise, print \"YES\" and the prime factors of `n` along with `n` itself.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nwhile(t > 0):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the prime factors of n\n    l = []\n    \n    # Initialize a counter to keep track of the number of prime factors found\n    c = 0\n    \n    # Find the square root of n\n    s = int(math.sqrt(n))\n    \n    # Iterate from 2 to the square root of n to find the first prime factor of n\n    for i in range(2, s + 1):\n        # Check if n is divisible by i\n        if (n % i == 0):\n            # Add i to the list of prime factors\n            l.append(i)\n            # Increment the counter\n            c += 1\n            # Divide n by i\n            n = n // i\n            # Break the loop as we have found the first prime factor\n            break\n    \n    # If no prime factor was found in the first loop, iterate from 2 to the square root of n again\n    for i in range(2, s + 1):\n        # Check if i is not already in the list of prime factors and if n is divisible by i\n        if (i not in l and n % i == 0):\n            # Add i to the list of prime factors\n            l.append(i)\n            # Increment the counter\n            c += 1\n            # Divide n by i\n            n = n // i\n            # Break the loop as we have found the second prime factor\n            break\n    \n    # If less than two prime factors were found or if n is less than 2 or if n is already in the list of prime factors\n    if (c < 2 or n == 1 or n in l):\n        # Print \"NO\"\n        print(\"NO\")\n    else:\n        # Print \"YES\" and the prime factors of n along with n itself\n        print(\"YES\")\n        # Iterate over the list of prime factors and print each factor\n        for i in l:\n            print(i, end=' ')\n        # Print n\n        print(n)\n    \n    # Decrement the test case counter\n    t -= 1\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize variables `a`, `b`, and `c` to store the distinct integers.\n5. Iterate from `2` to the square root of `n` (inclusive) to find the first factor `a` of `n`.\n6. If `n` is divisible by `a`, calculate `t` as `n` divided by `a`.\n7. Iterate from `a+1` to the square root of `t` (inclusive) to find the second factor `b` of `t`.\n8. If `t` is divisible by `b`, calculate `c` as `t` divided by `b`.\n9. Check if `b` equals `c`. If they are equal, reset `b` and `c` to `0` and continue to the next iteration.\n10. If `a`, `b`, and `c` are all non-zero, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize variables a, b, and c to store the distinct integers\n    a = 0\n    b = 0\n    c = 0\n    \n    # Iterate from 2 to the square root of n to find the first factor a of n\n    for i in range(2, int(n**0.5) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Store i as the first factor a\n            a = i\n            \n            # Calculate t as n divided by a\n            t = n // i\n            \n            # Iterate from a+1 to the square root of t to find the second factor b of t\n            for j in range(a + 1, int(t**0.5) + 1):\n                # Check if t is divisible by j\n                if t % j == 0:\n                    # Store j as the second factor b\n                    b = j\n                    \n                    # Calculate c as t divided by b\n                    c = t // j\n                    \n                    # Check if b equals c. If they are equal, reset b and c to 0 and continue to the next iteration\n                    if b == c:\n                        b = 0\n                        c = 0\n                        continue\n                    \n                    # Break the loop as we have found the distinct factors a, b, and c\n                    break\n            \n            # Break the outer loop as we have found the distinct factors a, b, and c\n            break\n    \n    # Check if a, b, and c are all non-zero\n    if a and b and c:\n        # Print \"YES\" and the values of a, b, and c\n        print('YES')\n        print(a, b, c)\n    else:\n        # Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case, reading the value of `n` for each case.\n3. Check if `n` is a prime number using the `isprimeoptimized` function. If it is, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers.\n4. If `n` is not prime, check if it's less than 24. If it is, print \"NO\" as it's impossible to find three distinct integers.\n5. Otherwise, find the first two factors of `n` by iterating from 2 to the square root of `n`. Store these factors in the list `L`.\n6. If `n` has more than two factors, it's impossible to find three distinct integers. Print \"NO\".\n7. If `n` has exactly two factors, find the third factor by iterating from 2 to the square root of `n`. If a factor is found that is not equal to the first factor and its square is not equal to `n`, add it to `L` and divide `n` by this factor.\n8. If `L` has exactly three elements, print \"YES\" and the elements of `L` as the product of three distinct integers.\n9. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef miller_rabin_primalitytest(n,a):\n    # Perform the Miller-Rabin primality test\n    z=n-1\n    d=z\n    while(d%2==0):\n        # Find the largest odd factor of z\n        d=d//2\n    if(pow(a,d,n)!=1):\n        # If a^d \u2261 -1 (mod n), n is composite\n        x=d\n        while(x<n):\n            # Check if a^x \u2261 n-1 (mod n) for any x < n\n            r=pow(a,x,n)\n            if(r==n-1):\n                # If a^x \u2261 n-1 (mod n), n is probably prime\n                return \"Probable Prime\"\n            else:\n                # If a^x \u2261 n-1 (mod n) is not found, n is composite\n                x=2*x\n        return \"Composite\"\n    else:\n        # If a^d \u2261 1 (mod n), n is probably prime\n        return \"Probable Prime\"\n\n\ndef isprimeoptimized(n):\n    # Check if n is prime using the Miller-Rabin primality test\n    if(n%2==0 and n>2):\n        # If n is even and greater than 2, it's not prime\n        return False\n    elif(n==2):\n        # 2 is prime\n        return True\n    elif(n==1):\n        # 1 is not prime\n        return False\n    else:\n        # Initialize a list of small prime numbers\n        if(n<2047):\n            L=[2]        \n        else:\n            L=[2,3,5,7]\n        \n        i=0\n        while(i<len(L)):\n            # Check if n is divisible by any of the small prime numbers\n            if(miller_rabin_primalitytest(n,L[i])==\"Probable Prime\"):        \n                i+=1\n            else:\n                # If n is not divisible by any of the small prime numbers, it's probably prime\n                return True\n        # If n is not divisible by any of the small prime numbers, it's probably composite\n        return False\n\n\n\n\nt=int(input())\n# Read the number of test cases\nfor i in range(0,t):\n    n=int(input())\n    # Read the value of n for each test case\n    if(isprimeoptimized(n)):\n        # If n is prime, print \"NO\"\n        print(\"NO\")\n    elif(n<24):\n        # If n is less than 24, print \"NO\"\n        print(\"NO\")\n    \n    else:\n        L=[]\n        # Find the first two factors of n\n        for i in range(2,int(n**0.5)+1):\n            if(n%i==0):\n                L.append(i)\n                n=n//i\n                break\n        for i in range(2,int(n**0.5)+1):\n            if(n%i==0 and L[0]!=i and L[0]!=n//i and i*i!=n):\n                L.append(i)\n                L.append(n//i)\n                break\n        if(len(L)==3):\n            # If n has exactly three factors, print \"YES\" and the factors\n            print(\"YES\")\n            print(*L)\n        else:\n            # If n has more than three factors, print \"NO\"\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `q`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the `div_by_primes` function.\n4. Based on the number of prime factors, determine the possible combinations of `a`, `b`, and `c` that multiply to `n`.\n5. If a valid combination is found, print \"YES\" and the combination. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nq = int(input())\n\n# Function to find prime factors of a number\ndef div_by_primes(n):\n    # Initialize lists to store prime factors and their powers\n    p = []  # prime factors\n    s = []  # powers of prime factors\n    # Iterate from 2 to the square root of n\n    for d in range(2, int(n**(1/2))+1):\n        # If n is divisible by d\n        if n%d == 0:\n            # Add d to the list of prime factors\n            p.append(d)\n            # Initialize the power of d to 0\n            s.append(0)\n            # Divide n by d as long as it's divisible\n            while n%d == 0:\n                # Increment the power of d\n                s[-1] += 1\n                # Divide n by d\n                n //= d\n    # If n is a prime number greater than 1\n    if n > 1:\n        # Add n to the list of prime factors\n        p.append(n)\n        # Initialize the power of n to 1\n        s.append(1)\n    # Return the lists of prime factors and their powers\n    return p, s\n\n# Function to calculate the product of prime factors raised to their powers\ndef s_mult(s, p):\n    # Initialize the product to 1\n    ans = 1\n    # Iterate over the powers of prime factors\n    for i in range(len(s)):\n        # Multiply the product by the prime factor raised to its power\n        ans *= p[i]**s[i]\n    # Return the product\n    return ans\n\n# Iterate over the test cases\nfor _ in range(q):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find the prime factors of n\n    p, s = div_by_primes(n)\n    # If there's only one prime factor\n    if len(p) == 1:\n        # If the power of the prime factor is less than 6\n        if s[0] < 6:\n            # Print \"NO\"\n            print(\"NO\")\n        # Otherwise, print \"YES\" and the combination\n        else:\n            print(\"YES\\n\", p[0], p[0]**2, p[0]**(s[0]-3))\n    # If there are two prime factors\n    elif len(p) == 2:\n        # If the sum of their powers is less than 4\n        if s[0]+s[1] < 4:\n            # Print \"NO\"\n            print(\"NO\")\n        # If the power of the first prime factor is 1\n        elif s[0] == 1:\n            # Print \"YES\" and the combination\n            print(\"YES\\n\", p[0], p[1], p[1]**(s[1]-1))\n        # If the power of the second prime factor is 1\n        elif s[1] == 1:\n            # Print \"YES\" and the combination\n            print(\"YES\\n\", p[0], p[1], p[0]**(s[0]-1))\n        # Otherwise, print \"YES\" and the combination\n        else:\n            print(\"YES\\n\", p[0], p[1], p[0]**(s[0]-1)*p[1]**(s[1]-1))\n    # If there are more than two prime factors\n    else:\n        # Print \"YES\" and the combination\n        print(\"YES\\n\", p[0]**s[0], p[1]**s[1], s_mult(s[2:], p[2:]))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case, read the integer `n`.\n3. Initialize a flag `status` to `False`, which will be used to track whether a valid solution is found for the current test case.\n4. Iterate over all integers `a` from 2 to the square root of `n` (inclusive). For each `a`, check if `n` is divisible by `a`.\n5. If `n` is divisible by `a`, calculate `k` as `n / a`.\n6. Iterate over all integers `b` from `a+1` to the square root of `k` (inclusive). For each `b`, check if `k` is divisible by `b`.\n7. If `k` is divisible by `b`, calculate `c` as `k / b`.\n8. Check if `b` and `c` are distinct and greater than 2. If they are, print \"YES\" and the values of `a`, `b`, and `c`.\n9. Set `status` to `True` to indicate that a valid solution has been found for the current test case.\n10. If a valid solution is found, break out of the inner loops.\n11. If no valid solution is found after checking all possible values of `a`, `b`, and `c`, print \"NO\".\n12. Repeat steps 3-11 for each test case.\n\nCOMMENTED CODE:\n```python\nimport math\n\nclass Read:\n    @staticmethod\n    def int():\n        # Read an integer from the input\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        # Read a list of strings from the input, separated by the specified separator\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        # Read a list of integers from the input, separated by the specified separator\n        return list(map(int, input().split(sep)))\n\ndef main():\n    # Read the number of test cases\n    n = Read.int()\n    status = False  # Flag to track whether a valid solution is found for the current test case\n\n    # Iterate over each test case\n    for a in range(2, int(math.sqrt(n) + 1)):\n        # Check if n is divisible by a\n        if n % a == 0:\n            # Calculate k as n / a\n            k = n / a\n            # Iterate over all integers b from a+1 to the square root of k (inclusive)\n            for b in range(a+1, int(math.sqrt(k) +1)):\n                # Check if k is divisible by b\n                if k % b == 0:\n                    # Calculate c as k / b\n                    c = int(k / b)\n                    # Check if b and c are distinct and greater than 2\n                    if b!= c and c > 2:\n                        # Print \"YES\" and the values of a, b, and c\n                        print('YES')\n                        print('{} {} {}'.format(a, b, c))\n                        # Set status to True to indicate that a valid solution has been found\n                        status = True\n                        # Break out of the inner loops\n                        break;\n            # If a valid solution is found, break out of the outer loop\n            if status:\n                break;\n    # If no valid solution is found, print \"NO\"\n    if status == False:\n        print('NO')\n\n# Read the number of test cases\nquery_count = Read.int()\n# Iterate over each test case\nwhile query_count:\n    query_count -= 1\n    # Call the main function to process the current test case\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Initialize an empty list `Ans` to store the factors of `n`.\n5. Find the smallest prime factor `d` of `n` using a while loop.\n6. If `d` is a factor of `n`, append it to `Ans` and break the loop.\n7. If no factor is found, append `n` to `Ans`.\n8. Divide `n` by the last element in `Ans`.\n9. Repeat steps 5-8 until `n` is reduced to 1 or `Ans` has at least two elements.\n10. If `Ans` has only one element, append 1 to `Ans`.\n11. Check if `Ans` has at least two elements and if the last two elements are distinct and greater than or equal to 2.\n12. If the conditions in step 11 are met, append the remaining value of `n` divided by the last element in `Ans` to `Ans`.\n13. Print 'YES' and the elements of `Ans` if the conditions in step 11 are met, otherwise print 'NO'.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor i in range(t):  # Iterate over each test case\n    n = int(input())  # Read the integer n for the current test case\n    Ans = []  # Initialize an empty list to store the factors of n\n    d = 2  # Initialize the smallest prime factor d\n    while d * d <= n:  # Find the smallest prime factor d of n\n        if n % d == 0:  # Check if d is a factor of n\n            Ans.append(d)  # Append d to Ans\n            break  # Break the loop\n        else:\n            d += 1  # Increment d\n    if len(Ans) == 0:  # If no factor is found\n        Ans.append(n)  # Append n to Ans\n    n //= Ans[-1]  # Divide n by the last element in Ans\n    while d * d <= n:  # Repeat the process until n is reduced to 1 or Ans has at least two elements\n        if n % d == 0 and Ans[-1]!= d:  # Check if d is a factor of n and d is not equal to the last element in Ans\n            Ans.append(d)  # Append d to Ans\n            break  # Break the loop\n        else:\n            d += 1  # Increment d\n    if len(Ans) == 1:  # If Ans has only one element\n        Ans.append(1)  # Append 1 to Ans\n    if len(Ans) >= 2:  # Check if Ans has at least two elements\n        c = n // Ans[-1]  # Calculate the remaining value of n divided by the last element in Ans\n        if c >= 2 and Ans[0] >= 2 and Ans[1] >= 2 and c!= Ans[-1]!= Ans[-2]:  # Check if the conditions are met\n            Ans.append(c)  # Append c to Ans\n            print('YES')  # Print 'YES'\n            print(*Ans)  # Print the elements of Ans\n        else:\n            print('NO')  # Print 'NO'\n    else:\n        print('NO')  # Print 'NO'\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate through each test case using a while loop, decrementing `ts` by 1 in each iteration until it reaches 0.\n3. Read the value of `n` for the current test case from the input.\n4. Initialize flags and variables: `flag` to track whether a valid solution is found, and `a`, `b`, `c` to store the distinct integers.\n5. Iterate through numbers from 2 to the square root of `n` (inclusive) to find the first divisor `a` of `n`.\n6. Update `n` by dividing it by `a` and break the loop.\n7. Iterate through numbers from 2 to the square root of the updated `n` (inclusive) to find the second divisor `b` of `n`, ensuring `b` is distinct from `a`.\n8. Update `n` by dividing it by `b` and break the loop.\n9. If both `a` and `b` are non-zero, assign the remaining value of `n` to `c`.\n10. Check if `c` is distinct from `a` and `b`, and not equal to 1 or 0. If true, print \"YES\" and the values of `a`, `b`, and `c`.\n11. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nts = int(input())\n\n# Iterate through each test case\nwhile ts > 0:\n    ts -= 1  # Decrement ts by 1 in each iteration\n    \n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Initialize flags and variables\n    flag = 0  # Flag to track whether a valid solution is found\n    a, b, c = 0, 0, 0  # Store the distinct integers\n    \n    # Iterate through numbers from 2 to the square root of n to find the first divisor a of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:  # Check if i is a divisor of n\n            a = i  # Assign the first divisor to a\n            n = int(n / a)  # Update n by dividing it by a\n            break  # Break the loop as we found the first divisor\n    \n    # Iterate through numbers from 2 to the square root of the updated n to find the second divisor b of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i!= a:  # Check if i is a divisor of n and distinct from a\n            b = i  # Assign the second divisor to b\n            n = int(n / b)  # Update n by dividing it by b\n            break  # Break the loop as we found the second divisor\n    \n    # If both a and b are non-zero, assign the remaining value of n to c\n    if a!= 0 and b!= 0:\n        c = n\n    \n    # Check if c is distinct from a and b, and not equal to 1 or 0\n    if c!= a and c!= b and c!= 1 and c!= 0:\n        print(\"YES\")  # Print \"YES\" if a valid solution is found\n        print(a, b, c)  # Print the values of a, b, and c\n    else:\n        print('NO')  # Print \"NO\" if no valid solution is found\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `a` to store the prime factors of `n`.\n5. Initialize a variable `i` to 2, which will be used to check for prime factors.\n6. Iterate from `i` to the square root of `n` (inclusive) to find prime factors.\n7. For each `i`, check if `n` is divisible by `i`. If it is, divide `n` by `i` and append `i` to the list `a`.\n8. After the loop, check if the length of `a` is less than 2. If it is, it means we couldn't find two distinct prime factors, so we print \"NO\".\n9. If the length of `a` is 2 and `n` is not already in `a`, it means we found two distinct prime factors and the remaining `n` is a prime factor. In this case, we print \"YES\" and the three distinct integers `n`, `a[0]`, and `a[1]`.\n10. If none of the above conditions are met, it means we couldn't find three distinct integers `a`, `b`, `c` such that `a * b * c = n`. In this case, we print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in \" \"*int(input()):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Initialize an empty list to store prime factors\n    a = []\n    # Initialize a variable to check for prime factors\n    i = 2\n\n    # Iterate from 2 to the square root of n to find prime factors\n    while (len(a) < 2 and i * i < n):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If n is divisible by i, divide n by i and append i to the list\n            n = n // i\n            a.append(i)\n        # Increment i by 1\n        i += 1\n\n    # Check if we found two distinct prime factors\n    if len(a) == 2 and n not in a:\n        # If we found two distinct prime factors and the remaining n is a prime factor, print \"YES\" and the three distinct integers\n        print(\"YES\")\n        print(n, *a)\n    else:\n        # If we couldn't find three distinct integers a, b, c such that a * b * c = n, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all factors of `n` using the `factors` function.\n4. Sort the factors in ascending order.\n5. Select the second factor `a` from the sorted list of factors.\n6. Calculate `x` by dividing `n` by `a`.\n7. Find all factors of `x` using the `factors` function.\n8. Sort the factors of `x` in ascending order.\n9. Check if the second factor `b` of `x` is distinct from `a`. If not, check if the third factor of `x` is distinct from `a` and greater than 1.\n10. If `b` is distinct from `a` or if the third factor of `x` is distinct from `a` and greater than 1, calculate `c` by dividing `n` by the product of `a` and `b`.\n11. Check if `c` is distinct from `a` and `b` and greater than 1. If so, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef factors(x):\n    # Find all factors of x\n    result = []\n    i = 1\n    while i*i <= x:\n        if x % i == 0:\n            # If i is a factor, add it to the result list\n            result.append(i)\n            # If x//i is not equal to i, it's also a factor, so add it to the result list\n            if x//i!= i:\n                result.append(x//i)\n        i += 1\n    return(result)\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find all factors of n\n    lst = sorted(factors(n))\n    # Select the second factor a from the sorted list of factors\n    a = lst[1]\n    # Calculate x by dividing n by a\n    x = n//a\n    # Find all factors of x\n    lst2 = sorted(factors(x))\n    # Check if the second factor b of x is distinct from a\n    if len(lst2) <= 2:\n        # If there are less than or equal to 2 factors, set b to -1\n        b = -1\n    elif lst2[1]!= a:\n        # If the second factor b of x is distinct from a, set b to the second factor\n        b = lst2[1]\n    elif lst2[1] == a and len(lst2) > 2:\n        # If the second factor b of x is equal to a and there are more than 2 factors, set b to the third factor\n        b = lst2[2]\n\n    # Calculate the product of a and b\n    yo = a*b\n    # Calculate c by dividing n by the product of a and b\n    res = n//yo\n    # Check if c is distinct from a and b and greater than 1\n    if res!= a and res!= b and res!= 1 and b > 1:\n        # If c is distinct from a and b and greater than 1, print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a, b, res)\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case:\n   - Read the number `n` from the input.\n   - Find the smallest prime factor `a` of `n` greater than or equal to 2.\n   - If `a` is not found, it means `n` is a prime number or has no factors greater than or equal to 2, so print \"NO\".\n   - Otherwise, find the other two factors `b` and `c` of `n` by dividing `n` by `a` and then finding the factors of the result.\n   - If `b` and `c` are not found, it means `n` cannot be represented as a product of three distinct integers greater than or equal to 2, so print \"NO\".\n   - Otherwise, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to find two factors of a number\ndef div(n, m):\n    # Start checking from m+1\n    i = m+1\n    # Continue until the square of i is less than n\n    while i*i < n:\n        # If n is divisible by i, return i and n//i\n        if(n%i == 0):\n            return(i, n // i)\n        # If not, increment i by 1\n        i += 1\n\n    # If no factors are found, return -1 for both\n    return(-1, -1)\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number for the current test case\n    n = int(input())\n    # Initialize a to 0 (will be used to store the smallest prime factor)\n    a = 0\n    # Initialize i to 2 (will be used to find the smallest prime factor)\n    i = 2\n    # Continue until i*i is less than n\n    while i * i < n:\n        # If n is divisible by i, store i in a and break the loop\n        if (n % i == 0):\n            a = i\n            break\n        # If not, increment i by 1\n        i += 1\n        \n    # If no prime factor is found, print \"NO\"\n    if(a == 0):\n        print(\"NO\")\n    else:\n        # Find the other two factors of n by dividing n by a\n        b, c = div(n//a, a)\n        # If no factors are found, print \"NO\"\n        if(b == -1):\n            print(\"NO\")\n        else:\n            # Print \"YES\" and the values of a, b, and c\n            print(\"YES\\n\",a,\" \",b,\" \",c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `m` from the input.\n2. Iterate over each test case using a loop from `0` to `m-1`.\n3. For each test case, read the integer `n` from the input.\n4. Find the prime factors of `n` using the `prime_factors` function.\n5. Check if the number of prime factors is less than 3. If so, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers.\n6. If the first two prime factors are the same, set `a` to the first prime factor and `b` to the product of the second and third prime factors. Then, calculate `c` by multiplying the remaining prime factors.\n7. If `a`, `b`, and `c` are distinct, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n8. If the first two prime factors are different, set `a` to the first prime factor, `b` to the second prime factor, and calculate `c` by multiplying the remaining prime factors.\n9. If `a`, `b`, and `c` are distinct, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef prime_factors(n):\n    # Initialize an empty list to store prime factors\n    factors = []\n    # Start with the smallest prime number, 2\n    i = 2\n    # Continue the loop until the square of i is less than or equal to n\n    while i * i <= n:\n        # If n is not divisible by i, increment i by 1\n        if n % i:\n            i += 1\n        # If n is divisible by i, divide n by i and add i to the factors list\n        else:\n            n //= i\n            factors.append(i)\n    # If n is greater than 1, it means n is a prime number, so add it to the factors list\n    if n > 1:\n        factors.append(n)\n    # Return the list of prime factors\n    return factors\n\n\n# Read the number of test cases from the input\nm = int(input())\n# Iterate over each test case\nfor i in range(m):\n    # Read the integer n from the input\n    n = int(input())\n    # Find the prime factors of n\n    factors = prime_factors(n)\n    # Check if the number of prime factors is less than 3\n    if len(factors) < 3:\n        # If so, print \"NO\"\n        print(\"NO\")\n    else:\n        # Set a to the first prime factor\n        a = factors[0]\n        # Check if the first two prime factors are the same\n        if factors[0] == factors[1]:\n            # If so, set b to the product of the second and third prime factors\n            b = factors[1] * factors[2]\n            # Check if there are more than three prime factors\n            if len(factors) == 3:\n                # If so, print \"NO\"\n                print(\"NO\")\n            else:\n                # Calculate c by multiplying the remaining prime factors\n                c = 1\n                for el in factors[3:]:\n                    c *= el\n                # Check if a, b, and c are distinct\n                if a!= b!= c and a!= c:\n                    # If so, print \"YES\" and the values of a, b, and c\n                    print(\"YES\")\n                    print(a, b, c)\n                else:\n                    # Otherwise, print \"NO\"\n                    print(\"NO\")\n        else:\n            # If the first two prime factors are different, set b to the second prime factor\n            b = factors[1]\n            # Calculate c by multiplying the remaining prime factors\n            c = 1\n            for el in factors[2:]:\n                c *= el\n            # Check if a, b, and c are distinct\n            if a!= b!= c and a!= c:\n                # If so, print \"YES\" and the values of a, b, and c\n                print(\"YES\")\n                print(a, b, c)\n            else:\n                # Otherwise, print \"NO\"\n                print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate through each test case.\n3. For each test case, read the number `n`.\n4. Check if `n` is less than 24. If true, print \"NO\" and move to the next test case.\n5. Otherwise, find the square root of `n` and store it in `root`.\n6. Initialize an empty set `factors` to store the factors of `n`.\n7. Iterate from 2 to `root` (inclusive) to find factors of `n`.\n8. For each factor `i`, add `i` and `n//i` to the `factors` set.\n9. Iterate through the `factors` set to find three distinct factors `i`, `j`, and `s` such that `i*j*s = n`.\n10. If such factors are found, store them in the `ans` list and break the loop.\n11. If `ans` is not found, print \"NO\" for the current test case.\n12. Otherwise, print \"YES\" and the `ans` list for the current test case.\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\nwhile t:\n    t -= 1\n    # Read the number for the current test case\n    n = int(input())\n    # Initialize ans to -1, indicating no solution found\n    ans = -1\n    # Check if n is less than 24\n    if n < 24:\n        # If true, print \"NO\" and move to the next test case\n        print(\"NO\")\n        continue\n    else:\n        # Find the square root of n\n        root = int(math.sqrt(n))\n        # Initialize an empty set to store factors of n\n        factors = set()\n        # Iterate from 2 to root (inclusive) to find factors of n\n        for i in range(2, root + 1):\n            # Check if n is divisible by i\n            if n % i == 0:\n                # Add i and n//i to the factors set\n                factors.add(i)\n                factors.add(n // i)\n        # Iterate through the factors set to find three distinct factors\n        for i in factors:\n            for j in factors:\n                # Calculate s as n divided by the product of i and j\n                s = n // (i * j)\n                # Check if i, j, and s are distinct and their product equals n\n                if i!= j and s in factors:\n                    # Check if i, j, and s are distinct\n                    if i!= s and j!= s:\n                        # Store the factors in the ans list and break the loop\n                        ans = []\n                        ans.append(i)\n                        ans.append(j)\n                        ans.append(s)\n                        ans.sort()\n                        break\n            # If ans is found, break the loop\n            if ans!= -1:\n                break\n    # Check if ans is not found\n    if ans == -1:\n        # If true, print \"NO\" for the current test case\n        print(\"NO\")\n    else:\n        # If true, print \"YES\" and the ans list for the current test case\n        print(\"YES\")\n        print(*ans)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Find the smallest divisor `a` of `n` greater than or equal to 2 using the `min_dev` function.\n5. If `a` is not found, it means `n` cannot be represented as a product of three distinct integers, so print \"NO\" and move to the next test case.\n6. Find the smallest divisor `b` of `n/a` greater than `a` using the `min_dev` function.\n7. If `b` is not found, it means `n` cannot be represented as a product of three distinct integers, so print \"NO\" and move to the next test case.\n8. Calculate `c` as `n/(a*b)`.\n9. If `c` is not greater than 1, or if `c` is equal to `a`, `b`, or `b/a`, it means `n` cannot be represented as a product of three distinct integers, so print \"NO\" and move to the next test case.\n10. If all checks pass, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\ndef min_dev(n, temp):\n    # Find the smallest divisor of n greater than or equal to temp\n    while temp < n**0.5 + 1:\n        if n % temp == 0:\n            # If n is divisible by temp, return temp\n            return temp\n        temp += 1\n    # If no divisor is found, return 0\n    return 0\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find the smallest divisor a of n greater than or equal to 2\n    a = min_dev(n, 2)\n    if a == 0:\n        # If a is not found, print \"NO\" and move to the next test case\n        print('NO')\n        continue\n    # Find the smallest divisor b of n/a greater than a\n    b = min_dev(int(n / a), a + 1)\n    if b == 0:\n        # If b is not found, print \"NO\" and move to the next test case\n        print('NO')\n        continue\n    # Calculate c as n/(a*b)\n    c = int(n / (a * b))\n    if c == 0 or c == b or c == 1 or c == a:\n        # If c is not valid, print \"NO\" and move to the next test case\n        print('NO')\n        continue\n    # If all checks pass, print \"YES\" and the values of a, b, and c\n    print('YES')\n    print(a, b, c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize a flag `flag` to 0, which will be used to track whether a valid solution is found.\n4. Check if `n` is a perfect cube. If it is, we can find three distinct integers `a`, `b`, `c` such that `a * b * c = n` by taking the cube root of `n` and assigning it to `a`, then finding `b` and `c` as the other two distinct factors of `n`.\n5. If `n` is not a perfect cube, check if it has a prime factorization with at least three distinct prime factors. If it does, we can find three distinct integers `a`, `b`, `c` such that `a * b * c = n` by taking the product of three distinct prime factors of `n`.\n6. If neither of the above conditions is met, it is impossible to represent `n` as a product of three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c`.\n7. Print \"YES\" and the three distinct integers `a`, `b`, `c` if a valid solution is found, or print \"NO\" otherwise.\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef prime(n):\n    # Check if a number is prime\n    flag = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            flag = 1\n            break\n    if (flag!= 1):\n        return 1  # If the number is prime, return 1\n    else:\n        return 0  # If the number is not prime, return 0\n\nt = int(input())  # Read the number of test cases\nwhile (t!= 0):\n    n = int(input())  # Read the integer n for each test case\n    n1 = n  # Store the original value of n\n    flag = 0  # Initialize the flag to 0\n\n    # Check if n is a perfect cube\n    if ((prime(n) == 0) and n >= 24):\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if (n % i == 0):\n                a = i  # Find a factor of n\n                break\n        if (prime(n // a) == 0):\n            n = n // a  # Divide n by the factor a\n            for i in range(2, int(math.sqrt(n)) + 1):\n                if ((n % i == 0) and i!= a and (n // i)!= a and (n // i)!= i):\n                    b = i  # Find another factor of n\n                    c = n // b  # Find the third factor of n\n                    flag = 1  # Set the flag to 1\n                    break\n\n    # Check if n has a prime factorization with at least three distinct prime factors\n    if (flag!= 0 and a >= 2 and b >= 2 and c >= 2 and (a * b * c) == n1):\n        print(\"YES\")  # Print \"YES\" if a valid solution is found\n        print(a, b, c)  # Print the three distinct integers a, b, c\n    else:\n        print(\"NO\")  # Print \"NO\" if no valid solution is found\n    t -= 1  # Decrement the test case counter\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `n`.\n2. Iterate over each test case.\n3. For each test case, read the integer `x`.\n4. Initialize an empty list `ans` to store the factors of `x`.\n5. Initialize a variable `f` to 2, which will be used to find factors of `x`.\n6. While the length of `ans` is less than 2 and `f` squared is less than `x`, check if `x` is divisible by `f`.\n7. If `x` is divisible by `f`, append `f` to `ans` and divide `x` by `f`.\n8. Increment `f` by 1.\n9. After the loop, check if the length of `ans` is 2 and `x` is greater than the second element of `ans`.\n10. If the condition in step 9 is true, print \"YES\" and the elements of `ans` as the factors of `x`.\n11. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nn = int(input())\n\n# Iterate over each test case\nfor _ in range(n):\n    # Initialize an empty list to store the factors of x\n    ans = []\n    # Read the integer x\n    x = int(input())\n    # Initialize a variable f to 2, which will be used to find factors of x\n    f = 2\n    # While the length of ans is less than 2 and f squared is less than x\n    while len(ans) < 2 and f ** 2 < x:\n        # Check if x is divisible by f\n        if x % f == 0:\n            # If x is divisible by f, append f to ans and divide x by f\n            ans.append(f)\n            x //= f\n        # Increment f by 1\n        f += 1\n\n    # After the loop, check if the length of ans is 2 and x is greater than the second element of ans\n    if len(ans) == 2 and x > ans[1]:\n        # If the condition is true, print \"YES\" and the elements of ans as the factors of x\n        print('YES')\n        print(ans[0], ans[1], x)\n    else:\n        # Otherwise, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Factorize `n` into its prime factors using the `factorize` function.\n4. Check if the factorization contains at least three distinct integers. If not, print \"NO\".\n5. If the factorization contains at least three distinct integers, print \"YES\" and the factorization.\n\nCOMMENTED CODE:\n```python\ndef factorize(n):\n    # Initialize an empty list to store the prime factors\n    l = []\n    \n    # Iterate from 2 to the square root of n (inclusive)\n    for i in range(2, int(n**0.5) + 1):\n        # If the list already contains two factors and n is greater than or equal to i,\n        # it means n is a product of two large prime numbers, so append n to the list\n        if len(l) == 2 and n >= i:\n            l.append(n)\n            break\n        \n        # If n is less than or equal to 1, it means n is not a product of distinct integers,\n        # so break the loop\n        if n <= 1:\n            break\n        \n        # If n is divisible by i, divide n by i and append i to the list\n        if n % i == 0:\n            n = n // i\n            l.append(i)\n    \n    # Return the list of prime factors\n    return l\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Factorize n into its prime factors\n    l = factorize(n)\n    \n    # If the factorization contains at least three distinct integers, print \"YES\" and the factorization\n    if len(l) >= 3:\n        print(\"YES\")\n        print(*l)\n    # Otherwise, print \"NO\"\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the number `n`.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. Remove duplicates from the list of prime factors `b` to get `c`.\n5. Check the length of `c` to determine if it's possible to find three distinct integers `a`, `b`, `c` such that `a \u22c5 b \u22c5 c = n`.\n   - If `len(c) >= 3`, it's possible to find three distinct integers, so print \"YES\" and the values of `c[0]`, `c[1]`, and `n // (c[0] * c[1])`.\n   - If `len(c) == 2` and `len(b) >= 4`, it's possible to find three distinct integers, so print \"YES\" and the values of `c[0]`, `c[1]`, and `n // (c[0] * c[1])`.\n   - If `len(c) == 1` and `len(b) >= 6`, it's possible to find three distinct integers, so print \"YES\" and the values of `c[0]`, `c[0]**2`, and `n // (c[0]**3)`.\n   - Otherwise, it's impossible to find three distinct integers, so print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Python program to print prime factors \n\nimport math \n\n# A function to print all prime factors of a given number n \ndef primeFactors(n): \n    # Initialize an empty list to store prime factors \n    a=[]  \n    # Print the number of two's that divide n \n    while n % 2 == 0: \n        # Append 2 to the list of prime factors \n        a.append(2), \n        # Divide n by 2 \n        n = n // 2\n          \n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3,int(math.sqrt(n))+1,2): \n          \n        # while i divides n, print i ad divide n \n        while n % i== 0: \n            # Append i to the list of prime factors \n            a.append(i) \n            # Divide n by i \n            n = n // i \n              \n    # Condition if n is a prime number greater than 2 \n    if n > 2: \n        # Append n to the list of prime factors \n        a.append(n) \n    # Return the list of prime factors \n    return a\n\n# A function to calculate the product of a list of numbers \ndef prod(a):\n    # Initialize the product to 1 \n    s=1\n    # Calculate the product of all numbers in the list \n    for i in range(len(a)):\n        s=s*a[i]\n    # Return the product \n    return s\n\n# Read the number of test cases \nt=int(input())\n# Iterate over each test case \nfor i in range(t):\n    # Read the number for the current test case \n    n=int(input())\n    # Find the prime factors of the number \n    b=primeFactors(n)\n    # Remove duplicates from the list of prime factors \n    c=list(set(b))\n    # Check if it's possible to find three distinct integers \n    if len(c)>=3:\n        # If possible, print \"YES\" and the values of c[0], c[1], and n // (c[0] * c[1]) \n        print(\"YES\")\n        print(c[0],c[1],n//(c[0]*c[1]))\n    elif len(c)==2 and len(b)>=4:\n        # If possible, print \"YES\" and the values of c[0], c[1], and n // (c[0] * c[1]) \n        print(\"YES\")\n        print(c[0],c[1],n//(c[0]*c[1]))\n    elif len(c)==1 and len(b)>=6:\n        # If possible, print \"YES\" and the values of c[0], c[0]**2, and n // (c[0]**3) \n        print(\"YES\")\n        print(c[0],c[0]**2,n//(c[0]**3))\n    else:\n        # If not possible, print \"NO\" \n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. Read the value of `n` for the current test case.\n4. Check if `n` is less than 24. If true, print \"NO\" as it's impossible to find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n`.\n5. Initialize an empty list `l` to store the prime factors of `n`.\n6. Iterate from 2 to the square root of `n` (inclusive) to find prime factors.\n7. For each number `i` in the range, check if `n` is divisible by `i`. If true, append `i` to `l` and divide `n` by `i`.\n8. If `l` has two elements, break the loop as we have found two prime factors.\n9. Check if `n` (after division) is greater than the second element in `l`. If true, print \"YES\" and the three numbers: the first element in `l`, the second element in `l`, and `n`.\n10. If the condition in step 9 is false, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Check if n is less than 24. If true, print \"NO\"\n    if (n < 24):\n        print(\"NO\")\n    else:\n        # Initialize an empty list to store the prime factors of n\n        l = []\n        \n        # Initialize temp as n\n        temp = n\n        \n        # Iterate from 2 to the square root of n (inclusive) to find prime factors\n        for i in range(2, math.ceil(math.sqrt(n)) + 1):\n            # Check if n is divisible by i\n            if (temp % i == 0):\n                # Append i to l and divide n by i\n                l.append(i)\n                temp = temp // i\n            # If l has two elements, break the loop\n            if (len(l) == 2):\n                break\n        \n        # Check if n (after division) is greater than the second element in l\n        if (len(l) == 2 and temp > l[1]):\n            # Print \"YES\" and the three numbers: the first element in l, the second element in l, and n\n            print(\"YES\")\n            print(l[0], l[1], temp)\n        else:\n            # Print \"NO\"\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case, reading the integer `n` for each case.\n3. For each `n`, find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n` or determine that it is impossible to do so.\n4. If such `a`, `b`, `c` exist, print \"YES\" followed by the values of `a`, `b`, and `c`.\n5. If no such `a`, `b`, `c` exist, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef req(n):\n    # Calculate the square root of n and convert it to an integer\n    k = int(n ** (1 / 2))\n    \n    # Iterate over possible values of 'a' from 2 to k\n    for a in range(2, k):\n        # Check if n is divisible by 'a'\n        if n % a == 0:\n            # Iterate over possible values of 'b' from 2 to k\n            for b in range(2, k):\n                # Ensure 'b' is not equal to 'a'\n                if b!= a:\n                    # Check if n is divisible by the product of 'a' and 'b'\n                    if n % (a * b) == 0:\n                        # Calculate 'c' as the quotient of n divided by the product of 'a' and 'b'\n                        c = n // (a * b)\n                        # Check if 'b', 'c', and 'a' are distinct\n                        if b!= c and a!= c:\n                            # Return the values of 'a', 'b', and 'c' as a list\n                            return [a, b, c]\n    # If no suitable 'a', 'b', 'c' are found, return 0\n    return 0\n\n\n# Read the number of test cases from the input\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer 'n' for the current test case\n    n = int(input())\n    # Call the req function to find 'a', 'b', 'c' or determine that it is impossible\n    result = req(n)\n    # Check if 'a', 'b', 'c' were found\n    if result == 0:\n        # If not, print \"NO\"\n        print(\"NO\")\n    else:\n        # If found, print \"YES\" followed by the values of 'a', 'b', and 'c'\n        print(\"YES\")\n        # Use the * operator to unpack the list of 'a', 'b', 'c' and print its elements separated by spaces\n        print(*result)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find all the prime factors of `n` using the `factors` function.\n4. If the number of prime factors is less than 3, print \"NO\" and move to the next test case.\n5. Otherwise, iterate through the prime factors to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n6. For each prime factor `p`, find the remaining factors `a` and `b` such that `a * b = n / p` using the `factor` function.\n7. If `factor` returns two distinct factors, update `x`, `y`, and `z` with these factors and set `t` to 1.\n8. If `t` is 1, print \"YES\" and the values of `x`, `y`, and `z`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef factor(n, a):\n    # Find the remaining factors of n after dividing by a\n    l = []  # list to store the factors\n    r = n  # remaining value of n\n    k = int(math.sqrt(n)) + 1  # upper bound for the loop\n\n    d = 1  # divisor\n    while n % (2 ** d) == 0:\n        # Check if a and r//a are not equal and not equal to 2^d and not equal to r\n        if 2 ** d!= a and r // (2 ** d)!= a and r // (2 ** d)!= 2 ** d and 2 ** d!= r:\n            # Append a and r//a to the list\n            l.append(2 ** d)\n            l.append(r // 2 ** d)\n            # Update n and d\n            n //= 2 ** d\n            d += 1\n            break\n        else:\n            d += 1\n\n    # Iterate through odd numbers from 3 to sqrt(n)\n    for i in range(3, k, 2):\n        d = 1\n        while n % (i ** d) == 0:\n            # Check if i^d is not equal to a and r//i^d is not equal to a and i^d is not equal to n\n            if i ** d!= a and r // (i ** d)!= a and r // (i ** d)!= i ** d and i ** d!= n:\n                # Append i^d to the list\n                l.append(i ** d)\n                # Update n and d\n                n //= i ** d\n                d += 1\n                break\n            else:\n                d += 1\n\n    return l\n\ndef factors(n):\n    # Find all prime factors of n\n    l = []  # list to store the factors\n    r = n  # remaining value of n\n    k = int(math.sqrt(n)) + 1  # upper bound for the loop\n\n    d = 1  # divisor\n    while n % 2 == 0:\n        # Append 2^d to the list\n        l.append(2 ** d)\n        # Update n and d\n        n //= 2\n        d += 1\n\n    # Iterate through odd numbers from 3 to sqrt(n)\n    for i in range(3, k, 2):\n        d = 1\n        while n % i == 0:\n            # Append i^d to the list\n            l.append(i ** d)\n            # Update n and d\n            n //= i\n            d += 1\n\n    # If n is not 1, append n to the list\n    if n == 1:\n        return l\n    else:\n        l.append(n)\n        return l\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n\n    n = int(input())\n\n    # Find all prime factors of n\n    l = factors(n)\n\n    # If the number of prime factors is less than 3, print \"NO\"\n    if len(l) < 3:\n        print(\"NO\")\n\n    else:\n        # Initialize variables\n        t = x = y = z = 0\n        # Iterate through the prime factors\n        for i in range(len(l)):\n            # Calculate a = n // p\n            a = n // l[i]\n            # Find the remaining factors of a\n            f = factor(a, l[i])\n            # If factor returns two distinct factors, update x, y, and z\n            if len(f) > 1:\n                x = f[0]\n                y = f[1]\n                z = l[i]\n                t = 1\n                break\n\n        # If t is 1, print \"YES\" and the values of x, y, and z\n        if t == 1:\n            print(\"YES\")\n            print(z, x, y)\n\n        # Otherwise, print \"NO\"\n        else:\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all divisors of `n` and store them in a list `d1`.\n4. Create a dictionary `rec` to keep track of the count of each divisor in `d1`.\n5. Iterate through each divisor `i` in `d1`.\n6. For each divisor `i`, find all divisors of `n//i` and store them in a list `d2`.\n7. Iterate through each divisor `j` in `d2`.\n8. Check if `j` and `(n//i)//j` are in `rec` and if they are distinct from each other and from `i`. If this condition is met, it means we have found three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n9. If such a triplet is found, print \"YES\" and the triplet, and break the loop.\n10. If no such triplet is found after checking all divisors, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\nfrom collections import defaultdict\n\ndef divisors(n, ans):\n    # Find all divisors of n and store them in ans\n    i = 2\n    while i <= math.sqrt(n):\n        # Check if n is divisible by i\n        if (n % i == 0):\n            # If n/i is equal to i, it means i is a perfect square divisor\n            if (n / i == i):\n                ans.append(i)\n            else:\n                # Otherwise, append both i and n/i to the list\n                ans.append(i)\n                ans.append(n // i)\n        i = i + 1\n\nfor _ in range(int(input())):\n    n = int(input())\n    d1 = []  # List to store all divisors of n\n    # d2 = []  # Not used in this code\n    divisors(n, d1)  # Find all divisors of n\n    rec = defaultdict(int)  # Dictionary to keep track of divisor counts\n    for i in d1:\n        rec[i] = 1  # Initialize count of each divisor to 1\n    flag = 0  # Flag to track if a triplet is found\n\n    for i in d1:\n        d2 = []  # List to store divisors of n/i\n        divisors(n//i, d2)  # Find all divisors of n/i\n        for j in d2:\n            # Check if j and (n/i)//j are in rec and are distinct from each other and from i\n            if rec.get(j, 0)!= 0 and rec.get((n//i)//j, 0)!= 0 and (n//i)//j!= j and (n//i)//j!= i and i!= j:\n                # If the condition is met, it means we have found a triplet\n                flag = 1\n                print('YES')\n                print(i, j, (n//i)//j)\n                break\n        if flag == 1:\n            # If a triplet is found, break the loop\n            break\n    if flag == 0:\n        # If no triplet is found, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `splitPrime` function.\n4. Count the number of distinct prime factors `numbersKey`.\n5. If `numbersKey` is greater than or equal to 3, it is possible to find three distinct integers `a`, `b`, `c` such that `a * b * c = n`. Print \"YES\" and the three integers.\n6. If `numbersKey` is 2 and the sum of the powers of the prime factors is greater than or equal to 4, it is possible to find three distinct integers `a`, `b`, `c` such that `a * b * c = n`. Print \"YES\" and the three integers.\n7. If `numbersKey` is 1 and the sum of the powers of the prime factors is greater than or equal to 6, it is possible to find three distinct integers `a`, `b`, `c` such that `a * b * c = n`. Print \"YES\" and the three integers.\n8. If none of the above conditions are met, it is impossible to find three distinct integers `a`, `b`, `c` such that `a * b * c = n`. Print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to find prime factors of a number\ndef splitPrime(n):\n    # Initialize an empty dictionary to store prime factors and their powers\n    arr = {}\n    \n    # Iterate from 2 to the square root of n\n    for i in range(2, math.ceil((math.sqrt(n))) + 1):\n        # While n is divisible by i, update the power of i in the dictionary and divide n by i\n        while n!= 0 and n % i == 0:\n            f = arr.get(i, 0)  # Get the current power of i from the dictionary\n            arr[i] = int(f + 1)  # Update the power of i in the dictionary\n            n = n // i  # Divide n by i\n    \n    # If n is greater than 1, it means n is a prime number, so add it to the dictionary\n    if n > 1:\n        arr[n] = 1\n    \n    return arr\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Find the prime factors of n\n    arr = splitPrime(n)\n    \n    # Count the number of distinct prime factors\n    numbersKey = len(arr)\n    \n    # If there are at least three distinct prime factors, it is possible to find three distinct integers a, b, c such that a * b * c = n\n    if numbersKey >= 3:\n        print('YES')\n        count = 0  # Initialize a counter to keep track of the number of prime factors printed\n        result = 1  # Initialize a variable to store the product of the prime factors printed\n        \n        # Iterate over the prime factors\n        for key in arr:\n            # If the counter is 2, break the loop because we have found three distinct prime factors\n            if count == 2:\n                break\n            # Print the current prime factor\n            print(key, end=' ')\n            # Multiply the result by the current prime factor\n            result *= key\n            # Increment the counter\n            count += 1\n        \n        # Print the remaining part of n divided by the product of the prime factors printed\n        print(n // result)\n    \n    # If there are exactly two distinct prime factors and the sum of their powers is greater than or equal to 4, it is possible to find three distinct integers a, b, c such that a * b * c = n\n    elif numbersKey == 2 and sum(arr.values()) >= 4:\n        print('YES')\n        result = 1  # Initialize a variable to store the product of the prime factors printed\n        \n        # Iterate over the prime factors\n        for key in arr:\n            # Multiply the result by the current prime factor\n            print(key, end=' ')\n            result *= key\n        \n        # Print the remaining part of n divided by the product of the prime factors printed\n        print(n // result)\n    \n    # If there is exactly one distinct prime factor and the sum of its power is greater than or equal to 6, it is possible to find three distinct integers a, b, c such that a * b * c = n\n    elif numbersKey == 1 and sum(arr.values()) >= 6:\n        print('YES')\n        \n        # Iterate over the prime factor\n        for key in arr:\n            # Print the current prime factor squared and n divided by the cube of the current prime factor\n            print(key, int(math.pow(key, 2)), int(n // math.pow(key, 3)))\n    \n    # If none of the above conditions are met, it is impossible to find three distinct integers a, b, c such that a * b * c = n\n    else:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate through each test case using a while loop.\n3. Read the value of `n` for the current test case.\n4. Initialize an empty list `a` to store the factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n6. If `n` is divisible by the current number `i`, append `i` to the list `a` and divide `n` by `i`.\n7. If the length of `a` is 2 and `n` is not 1, it means we have found two distinct factors of `n`.\n8. Check if `n` is not already in the list `a`. If it's not, print \"YES\" and the three numbers `a[0]`, `a[1]`, and `n`.\n9. If `n` is in the list `a`, it means `n` is a perfect cube of a prime number, so print \"NO\".\n10. If the length of `a` is not 2 or `n` is 1, print \"NO\".\n11. Decrement `t` by 1 and repeat steps 3-10 until all test cases are processed.\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n# Iterate through each test case\nwhile t:\n    # Read the value of n for the current test case\n    n = int(input())\n    # Initialize an empty list to store the factors of n\n    a = []\n    # Iterate from 2 to the square root of n (inclusive) to find factors of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # If n is divisible by the current number i, append i to the list a and divide n by i\n        if n % i == 0:\n            a.append(i)\n            n = n // i\n        # If the length of a is 2 and n is not 1, it means we have found two distinct factors of n\n        if len(a) == 2 and n!= 1:\n            # Check if n is not already in the list a\n            if n not in a:\n                # Print \"YES\" and the three numbers a[0], a[1], and n\n                print(\"YES\")\n                print(a[0], a[1], n)\n            else:\n                # Print \"NO\" because n is a perfect cube of a prime number\n                print(\"NO\")\n            # Break the loop because we have found a solution\n            break\n    # If the length of a is not 2 or n is 1, print \"NO\"\n    else:\n        print(\"NO\")\n    # Decrement t by 1 and repeat steps 3-10 until all test cases are processed\n    t -= 1\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the `factorize` function.\n4. Check the number of prime factors:\n   - If there is only one prime factor, check if its exponent is less than 6. If it is, print \"NO\" and move to the next test case.\n   - If there are two prime factors, check if the sum of their exponents is less than 4. If it is, print \"NO\" and move to the next test case.\n   - If there are more than two prime factors, print \"NO\" and move to the next test case.\n5. If the above conditions are not met, construct the answer `ans` based on the prime factors:\n   - If there is only one prime factor, set `ans` to `[k, k**2, k**(v-3)]`.\n   - If there are two prime factors, set `ans` to `[k1, k2, k1**(v1-1) * k2**(v2-1)]`.\n   - If there are more than two prime factors, set `ans` to `[k1, k2, k1**v1 * k2**v2 * k3**v3 *...]`.\n6. Print \"YES\" and the constructed answer `ans`.\n\nCOMMENTED CODE:\n```python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\n# sys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\ndef factorize(num: int) -> dict:\n    # Find prime factors of num and store them in a dictionary\n    from math import sqrt\n    from collections import Counter\n\n    d = Counter()\n    for i in range(2, int(sqrt(num))+1):\n        # Divide num by i as long as it is divisible\n        while num % i == 0:\n            num //= i\n            d[i] += 1\n        if num == 1:\n            break\n    if num!= 1:\n        # If num is not 1, it means it is a prime number\n        d[num] += 1\n    return d\n\nfor _ in range(INT()):\n    # Read the number of test cases\n    N = INT()\n\n    # Find prime factors of N\n    primes = sorted(factorize(N).items())\n    ans = [1] * 3\n    if len(primes) == 1:\n        # If there is only one prime factor\n        k, v = primes[0]\n        if v < 6:\n            # If the exponent is less than 6, print \"NO\"\n            NO()\n            continue\n        # Construct the answer\n        ans[0] = k\n        ans[1] = k ** 2\n        ans[2] = k ** (v-3)\n    elif len(primes) == 2:\n        # If there are two prime factors\n        k1, v1 = primes[0]\n        k2, v2 = primes[1]\n        if v1 + v2 < 4:\n            # If the sum of exponents is less than 4, print \"NO\"\n            NO()\n            continue\n        # Construct the answer\n        ans[0] = k1\n        ans[1] = k2\n        ans[2] = k1**(v1-1) * k2**(v2-1)\n    else:\n        # If there are more than two prime factors, print \"NO\"\n        NO()\n    # Print \"YES\" and the constructed answer\n    YES()\n    print(*ans)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Find the prime factors of `n` using the `primeFactors` function.\n5. Check if the number of prime factors is at least 3. If not, print \"NO\" and move to the next test case.\n6. If there are at least 3 prime factors, check if the first two prime factors are distinct. If not, combine the first two prime factors to form a new prime factor `b`.\n7. Find the third prime factor `c` by dividing `n` by the product of `a` and `b`.\n8. Check if `c` is a valid prime factor (i.e., not equal to `a` or `b`, and greater than or equal to 2). If not, print \"NO\". Otherwise, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\n# cook your dish here\nimport math\n\ndef primeFactors(n): \n    # Initialize an empty list to store prime factors\n    arr=[]\n    \n    # Divide n by 2 until it's no longer divisible by 2\n    while n % 2 == 0: \n        # Append 2 to the list of prime factors\n        arr.append(2)\n        # Update n by dividing it by 2\n        n = n / 2\n        \n    # Iterate over odd numbers from 3 to the square root of n\n    for i in range(3,int(math.sqrt(n))+1,2): \n\n        # While n is divisible by i, append i to the list of prime factors and update n\n        while n % i== 0: \n            arr.append(i)\n            n = n / i \n\n    # If n is greater than 2, it's a prime factor, so append it to the list\n    if n > 2: \n        arr.append(n)\n    # Return the list of prime factors\n    return arr\n\n# Read the number of test cases\nt=int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n=int(input())\n    \n    # Find the prime factors of n\n    arr=primeFactors(n)\n    \n    # Check if there are at least 3 prime factors\n    if len(arr)>=3:\n        # Get the first prime factor\n        a=arr[0]\n        \n        # Check if the first two prime factors are distinct\n        if arr[0]!=arr[1]:\n            # Get the second prime factor\n            b=arr[1]\n            # Find the third prime factor by dividing n by the product of a and b\n            c=n//(a*b)\n            \n            # Check if c is a valid prime factor\n            if c==a or c==b or c<2:\n                # If not, print \"NO\"\n                print(\"NO\")\n            else:\n                # Otherwise, print \"YES\" and the values of a, b, and c\n                print(\"YES\")\n                print(a,b,c)\n        else:\n            # If the first two prime factors are not distinct, combine them to form a new prime factor\n            b=arr[1]*arr[2]\n            # Find the third prime factor by dividing n by the product of a and b\n            c=n//(a*b)\n            \n            # Check if c is a valid prime factor\n            if c==a or c==b or c<2:\n                # If not, print \"NO\"\n                print(\"NO\")\n            else:\n                # Otherwise, print \"YES\" and the values of a, b, and c\n                print(\"YES\")\n                print(a,b,c)\n    else:\n        # If there are less than 3 prime factors, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Find the prime factors of `n` using the `factor` function.\n5. Check if there are at least three distinct prime factors. If not, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`.\n6. If there are at least three distinct prime factors, try to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`. If found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef factor(x):\n    # Find all prime factors of x\n    p = []  # list to store prime factors\n    d = 2  # starting divisor\n    while d * d <= x:\n        # if x is divisible by d, add d to the list of prime factors and divide x by d\n        if x % d == 0:\n            p.append(d)\n            x //= d\n        else:\n            # if x is not divisible by d, increment d by 1\n            d += 1\n    # if x is greater than 1, it means x is a prime factor, so add it to the list\n    if x > 1:\n        p.append(x)\n    return p\n\n\n# read the number of test cases\nt = int(input())\n\n# iterate over each test case\nfor i in range(t):\n    # read the integer n for the current test case\n    n = int(input())\n    # find the prime factors of n\n    p = factor(n)\n    # initialize a, b, and c to 1\n    a, b, c = 1, 1, 1\n    # initialize ans to 'NO'\n    ans = 'NO'\n    # check if there are at least three distinct prime factors\n    if len(p) > 2:\n        # if there are at least three distinct prime factors, try to find three distinct integers a, b, and c\n        a = p[0]\n        # if the second prime factor is different from the first, use it as b and the remaining factors as c\n        if p[1]!= p[0]:\n            b = p[1]\n            c = 1\n            # multiply the remaining factors to get c\n            for k in p[2:]:\n                c *= k\n            # check if c is distinct from a and b\n            if c!= 1 and c!= b and c!= a:\n                # if c is distinct from a and b, set ans to 'YES'\n                ans = 'YES'\n        else:\n            # if the second and third prime factors are the same, use them as b and the remaining factors as c\n            b = p[1] * p[2]\n            c = 1\n            # multiply the remaining factors to get c\n            for k in p[3:]:\n                c *= k\n            # check if c is distinct from a and b\n            if c!= 1 and c!= b and c!= a:\n                # if c is distinct from a and b, set ans to 'YES'\n                ans = 'YES'\n\n    # if ans is 'YES', print \"YES\" and the values of a, b, and c\n    if ans == 'YES':\n        print('YES')\n        print(a, b, c)\n    else:\n        # if ans is 'NO', print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `T` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Iterate over all possible values of `a` from 2 to the square root of `n` (inclusive).\n4. For each `a`, check if `n` is divisible by `a`. If not, skip to the next iteration.\n5. Iterate over all possible values of `b` from `a+1` to the square root of `n` (inclusive).\n6. For each `b`, calculate `r` as the product of `a` and `b`, and `c` as the quotient of `n` divided by `r`.\n7. Check if `n` is divisible by `r` and if `c` is not equal to `a` and not equal to `b`. If both conditions are true, print \"YES\" and the values of `a`, `b`, and `c`.\n8. If no such `a`, `b`, and `c` are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys, itertools, math\n\n# Read the number of test cases\nT = int(sys.stdin.readline())\n\ndef solve(n):\n  # Iterate over all possible values of a\n  for a in range(2, int(math.sqrt(n))+1):\n    # Check if n is divisible by a\n    if n % a!= 0:\n      # If not, skip to the next iteration\n      continue\n    # Iterate over all possible values of b\n    for b in range(a+1, int(math.sqrt(n))+1):\n      # Calculate r as the product of a and b\n      r = a * b\n      # Calculate c as the quotient of n divided by r\n      c = n // r\n      # Check if n is divisible by r and if c is not equal to a and not equal to b\n      if n % r == 0 and c!= a and c!= b:\n        # If both conditions are true, print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a, b, c)\n        # Return from the function\n        return\n  # If no such a, b, and c are found, print \"NO\"\n  print(\"NO\")\n\n# For each test case, read the integer n from the input\nfor _ in range(T):\n  n = int(sys.stdin.readline())\n\n  # Call the solve function\n  solve(n)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `tyu` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for the current test case from the input.\n4. Call the `func2` function to find the prime factors of `n` and store them in the list `io`.\n5. Remove duplicates from the list `io` by converting it to a set and then back to a list (`t2 = list(set(io))`).\n6. Call the `func1` function to check if it's possible to represent `n` as a product of three distinct integers `a`, `b`, and `c` using the prime factors in `t2` and `io`.\n7. If `func1` returns \"NO\", print \"NO\" as the result for the current test case.\n8. If `func1` returns a list `[x, y, z]`, print \"YES\" followed by the values of `x`, `y`, and `z` as the result for the current test case.\n9. Repeat steps 3-8 for all test cases.\n\nCOMMENTED CODE:\n```python\n#-----------------\n# cook your dish here\n#############-----------------\n######-----\nimport math\n###########\n#####\ntry:\n    #######\n    def func1(t2, io):  # Check if it's possible to represent n as a product of three distinct integers\n        ######\n        ##########\n        if len(io) >= 3 and len(t2) >= 3:  # If there are at least three distinct prime factors in io and t2\n            ##########\n            y = t2[1]  # Get the second prime factor from t2\n            #######\n            x = t2[0]  # Get the first prime factor from t2\n            #####\n            z = n // (x * y)  # Calculate the third prime factor\n            ############\n            return [x, y, z]  # Return the three prime factors\n            ######\n        elif len(io) >= 6 and len(t2) == 1:  # If there are at least six prime factors in io and only one prime factor in t2\n            #######\n            y = pow(t2[0], 2)  # Square the prime factor from t2\n            ######\n            x = t2[0]  # Get the prime factor from t2\n            #########\n            #######\n            ######\n            ##########\n            z = n // pow(x, 3)  # Calculate the third prime factor\n            ############\n            return [x, y, z]  # Return the three prime factors\n        elif len(io) >= 4 and len(t2) == 2:  # If there are at least four prime factors in io and two prime factors in t2\n            #####\n            y = t2[1]  # Get the second prime factor from t2\n            ######\n            x = t2[0]  # Get the first prime factor from t2\n            ######\n            z = n // (y * x)  # Calculate the third prime factor\n            ##########\n            return [x, y, z]  # Return the three prime factors\n        else:\n            ##########\n            return \"NO\"  # If none of the above conditions are met, return \"NO\"\n\n    def func2(l):  # Find the prime factors of n\n        ############\n        io = []  # Initialize an empty list to store the prime factors\n        ###########\n        while l % 2 == 0:  # While n is divisible by 2\n            ########\n            io.append(2)  # Add 2 to the list of prime factors\n            #########\n            l = l // 2  # Divide n by 2\n            ########\n        for p in range(3, int(math.sqrt(l)) + 1, 2):  # Iterate over odd numbers from 3 to sqrt(n)\n            #############\n            while (l % p == 0):  # While n is divisible by p\n                ###########\n                io.append(p)  # Add p to the list of prime factors\n                ##########\n                l = l // p  # Divide n by p\n                ##########\n        if l > 2:  # If n is greater than 2\n            ######\n            io.append(l)  # Add n to the list of prime factors\n        return io  # Return the list of prime factors\n\n    tyu = int(input())  # Read the number of test cases\n    ########\n    for tyc in range(tyu):  # Iterate over each test case\n        ###########\n        n = int(input())  # Read the value of n for the current test case\n        #############\n        io = func2(n)  # Find the prime factors of n\n        t2 = list(set(io))  # Remove duplicates from the list of prime factors\n        ##############\n        gy = func1(t2, io)  # Check if it's possible to represent n as a product of three distinct integers\n        #############\n        if gy == 'NO':  # If func1 returns \"NO\"\n            #####\n            print(\"NO\")  # Print \"NO\" as the result for the current test case\n        else:\n            ###########\n            print(\"YES\")  # Print \"YES\" as the result for the current test case\n            print(*gy)  # Print the three prime factors\n    ###########\n    #######\n    ##########\n        continue  # Continue to the next test case\n    ############\nexcept:\n    pass\n##########\n################\n#####\n\n#############\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a counter `cnt` to keep track of the number of factors found, and an empty list `ans` to store the factors.\n5. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n6. If `n` is divisible by the current number `i`, add `i` to the list `ans` and increment the counter `cnt`.\n7. If `cnt` is 2 and `n` is divisible by the product of the first two elements in `ans`, and the quotient is not equal to either of the first two elements in `ans`, break the loop.\n8. If `cnt` is 2 but `n` is not divisible by the product of the first two elements in `ans`, remove the second element from `ans` and decrement `cnt`.\n9. If `cnt` is 2, check if `n` is divisible by the product of the first two elements in `ans`. If it is, add the quotient to `ans`.\n10. If the length of `ans` is 3, print \"YES\" and the elements of `ans`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Initialize a counter and an empty list to store factors\n    cnt = 0\n    ans = []\n    \n    # Iterate from 2 to the square root of n to find factors\n    for i in range(2, int(n**0.5) + 1):\n        # Check if n is divisible by the current number i\n        if n % i == 0:\n            # Add i to the list of factors and increment the counter\n            cnt += 1\n            ans.append(i)\n        \n        # Check if we have found two factors and n is divisible by their product\n        if cnt == 2 and n % (ans[0] * ans[1]) == 0 and n // (ans[0] * ans[1])!= ans[0] and n // (ans[0] * ans[1])!= ans[1]:\n            # Break the loop if we have found a valid factorization\n            break\n        \n        # If n is not divisible by the product of the first two factors, remove the second factor\n        if cnt == 2 and n % (ans[0] * ans[1])!= 0:\n            # Remove the second factor from the list and decrement the counter\n            del ans[1]\n            cnt -= 1\n    \n    # Check if we have found a valid factorization\n    if cnt == 2:\n        # Check if n is divisible by the product of the first two factors\n        if n % (ans[0] * ans[1]) == 0 and n // (ans[0] * ans[1])!= ans[0] and n // (ans[0] * ans[1])!= ans[1]:\n            # Add the quotient to the list of factors\n            ans.append(n // (ans[0] * ans[1]))\n    \n    # Print the result\n    if len(ans) == 3:\n        # Print \"YES\" and the factors\n        print('YES')\n        print(*ans)\n    else:\n        # Print \"NO\" if no valid factorization was found\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, t.\n2. Iterate through each test case.\n3. For each test case, read the integer n.\n4. Initialize an empty list c to store the prime factors of n.\n5. Initialize a variable i to 2, which will be used to check for prime factors.\n6. While the length of c is less than 2 and i squared is less than n, perform the following steps:\n   a. Check if n is divisible by i.\n   b. If n is divisible by i, append i to c and divide n by i.\n   c. Increment i by 1.\n7. If the length of c is 2, it means we have found two prime factors of n. In this case, print \"YES\" and the three integers: the two prime factors and the remaining factor n.\n8. If the length of c is not 2, it means we were unable to find two prime factors of n. In this case, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor q in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list c to store the prime factors of n\n    c = []\n    \n    # Initialize a variable i to 2, which will be used to check for prime factors\n    i = 2\n    \n    # While the length of c is less than 2 and i squared is less than n\n    while len(c) < 2 and i * i < n:\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If n is divisible by i, append i to c and divide n by i\n            c.append(i)\n            n = n // i\n        # Increment i by 1\n        i = i + 1\n    \n    # If the length of c is 2, it means we have found two prime factors of n\n    if len(c) == 2:\n        # Print \"YES\" and the three integers: the two prime factors and the remaining factor n\n        print(\"YES\")\n        print(*c, int(n))\n    else:\n        # If the length of c is not 2, it means we were unable to find two prime factors of n\n        # Print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty solution or raise an exception if no solution exists.\n4. Find the first divisor `a` of `n` greater than or equal to 2 using a generator expression.\n5. Divide `n` by `a` to find the remaining value `n`.\n6. Find the next divisor `b` of `n` greater than `a` using a generator expression.\n7. Check if the remaining value `n` divided by `b` is greater than `b`. If not, raise an exception.\n8. If no exception is raised, print \"YES\" and the solution `a`, `b`, and `n//b`.\n9. If an exception is raised, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor t in range(int(input())):\n    # Read the integer n for each test case\n    n = int(input())\n    \n    try:\n        # Find the first divisor a of n greater than or equal to 2\n        # The generator expression iterates over the range from 2 to the square root of n (inclusive)\n        # The condition n % i == 0 checks if i is a divisor of n\n        a = next(i for i in range(2, int(n**0.5)+1) if n%i == 0)\n        \n        # Divide n by a to find the remaining value n\n        n//=a\n        \n        # Find the next divisor b of n greater than a\n        # The generator expression iterates over the range from a+1 to the square root of n (inclusive)\n        b = next(i for i in range(a+1, int(n**0.5)+1) if n % i == 0)\n        \n        # Check if the remaining value n divided by b is greater than b\n        # If not, raise an exception\n        if n//b <= b:\n            raise\n        else:\n            # If no exception is raised, print \"YES\" and the solution a, b, and n//b\n            print(\"YES\")\n            print(a, b, n//b)\n    except:\n        # If an exception is raised, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, calculate the square root of the given number `n` and add 2 to it. Store this value in `n1`.\n3. Initialize an empty list `out` to store the factors of `n`.\n4. Initialize a flag `flag` to 1, assuming that we will find three distinct factors.\n5. Iterate from 2 to `n1` (inclusive) to find factors of `n`.\n6. For each number `i` in the range, check if `n` is divisible by `i`. If it is, divide `n` by `i` and update `n1` accordingly.\n7. If `i` is not already in the `out` list, add it to the list.\n8. If the length of `out` is 2 and `n` is not in `out` and `n` is not 1, add `n` to `out`.\n9. If the length of `out` is 3, print \"YES\" and the elements of `out`.\n10. If the length of `out` is not 3, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nimport math\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- #######Start#####\ndef inp():\n\treturn(int(input()))\ndef inlt():\n\treturn(list(map(int,input().split())))\ndef insr():\n\ts = input()\n\treturn(list(s[:len(s) - 1]))\ndef invr():\n\treturn(map(int,input().split()))\n ############ ---- Input Functions ---- #######End#####   \ndef pr_list(a):\n\tprint(*a, sep=\" \")\n\n# Main function to solve the problem\ndef main():\n\ttests = inp()  # Read the number of test cases\n\tfor test in range(tests):\n\t\tn =  inp()  # Read the number for each test case\n\t\tn1 = math.sqrt(n) + 2  # Calculate the upper limit for finding factors\n\t\tout = []  # Initialize an empty list to store factors\n\t\tflag = 1  # Initialize a flag to assume we will find three distinct factors\n\t\ti = 2  # Initialize the starting number for finding factors\n\t\twhile(i<n1  and len(out)< 3):  # Iterate to find factors\n\t\t\tif n %i == 0 :  # Check if n is divisible by i\n\t\t\t\tn = int(n/i)  # Divide n by i\n\t\t\t\tn1 = math.sqrt(n) + 2  # Update the upper limit for finding factors\n\t\t\t\tif i not in out:  # Check if i is not already in out\n\t\t\t\t\tout.append(i)  # Add i to out\n\t\t\t\tif len(out) == 2 and n not in out and n!=1:  # Check if we have two factors and n is not in out and n is not 1\n\t\t\t\t\tout.append(n)  # Add n to out\n\t\t\t\t\tbreak  # Break the loop as we have found three distinct factors\n\t\t\ti = i + 1  # Increment i for the next iteration\n\t\tif len(out) == 3:  # Check if we have found three distinct factors\n\t\t\tprint(\"YES\")  # Print \"YES\" if we have found three distinct factors\n\t\t\tpr_list(out)  # Print the factors\n\t\telse:\n\t\t\tprint(\"NO\")  # Print \"NO\" if we have not found three distinct factors\n\n\t\t\t\t\n\n\n\n\n\n\n\t\t\n\n\n\n\treturn\n\n# Run the main function\nif __name__== \"__main__\":\n  main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `ans` to store the factors of `n`.\n4. Initialize a variable `ind` to 2, which will be used to check for factors of `n`.\n5. While the length of `ans` is less than 2 and `ind` is less than the square root of `n`, check if `n` is divisible by `ind`.\n6. If `n` is divisible by `ind`, divide `n` by `ind` and append `ind` to `ans`.\n7. Increment `ind` by 1.\n8. After the loop, append the remaining value of `n` to `ans`.\n9. If the length of `ans` is 3, print \"YES\" and the elements of `ans` separated by spaces. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list ans to store the factors of n\n    ans, ind = [], 2\n    \n    # Loop until we find two factors or ind exceeds the square root of n\n    while len(ans) < 2 and ind < n ** (1 / 2):\n        # Check if n is divisible by ind\n        if not n % ind:\n            # If divisible, divide n by ind and append ind to ans\n            n = n // ind\n            ans.append(ind)\n        # Increment ind by 1\n        ind += 1\n    \n    # Append the remaining value of n to ans\n    ans.append(n)\n    \n    # Return the list of factors\n    return ans\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Solve the current test case\n    sol = solve()\n    \n    # Check if we found three distinct factors\n    if len(sol) == 3:\n        # If yes, print \"YES\" and the factors separated by spaces\n        print('YES')\n        print(' '.join(list(map(str, sol))))\n    else:\n        # If not, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize variables `a`, `cnt`, and `i` to store the factors of `n`, the count of factors, and the current number to check for factors, respectively.\n4. Iterate through numbers `i` from 2 to the square root of `n` (inclusive) to find factors of `n`.\n5. If `n` is divisible by `i`, add `i` to the list of factors `a` and divide `n` by `i`. Increment the count of factors `cnt`.\n6. If the count of factors is less than 2, it means `n` cannot be represented as a product of three distinct integers, so print \"NO\".\n7. If the count of factors is 2, print \"YES\" and the factors `a[0]`, `a[1]`, and `n`.\n8. Repeat steps 2-7 for all test cases.\n\nCOMMENTED CODE:\n```python\n#!/usr/bin/env python3\n\n# Define a function to read a list of integers from input\nR = lambda: list(map(int, input().split()))\n\n# Define a function to solve the problem\ndef solve():\n    # Read the integer n for the current test case\n    n = R()[0]\n    \n    # Initialize variables to store factors and count\n    a, cnt, i = [0, 0], 0, 2\n    \n    # Iterate through numbers to find factors of n\n    while i * i < n and cnt < 2:\n        # Check if n is divisible by the current number\n        if n % i == 0:\n            # If divisible, add the factor to the list and divide n\n            a[cnt] = i\n            cnt += 1\n            n //= i\n        # Increment the current number to check for factors\n        i += 1\n    \n    # Check if n can be represented as a product of three distinct integers\n    if cnt < 2:\n        # If not, print \"NO\"\n        print(\"NO\")\n    else:\n        # If yes, print \"YES\" and the factors\n        print(\"YES\\n\", a[0], a[1], n)\n\n# Read the number of test cases\no_o = R()[0]\n\n# Repeat the solution for all test cases\nfor _ in range(o_o):\n    solve()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `sol` to store the factors of `n`.\n4. Call the `process` function with `n`, `1`, and `sol` as arguments to find three distinct factors of `n`.\n5. If the length of `sol` is 3, print \"YES\" and the factors in `sol`.\n6. If the length of `sol` is not 3, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef process(n, i, sol):\n    # Iterate from i+1 to the square root of n (inclusive) to find factors\n    for j in range(i+1, int(n**(0.5))+1):\n        # Check if j is a factor of n\n        if n % j == 0:\n            # Append j to the sol list\n            sol.append(j)\n            # If only one factor is found, recursively call process with n//j and j\n            if len(sol) == 1:\n                process(n // j, j, sol)\n                # Break the loop as we have found three factors\n                break\n            # If two factors are found, check if they are distinct and append the third factor\n            if len(sol) == 2:\n                # Check if j is not equal to n//j to ensure distinct factors\n                if j!= n // j:\n                    # Append n//j to the sol list\n                    sol.append(n // j)\n                # Break the loop as we have found three factors\n                break\n    # Return the list of factors\n    return sol\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Initialize an empty list sol to store the factors\n    sol = []\n    # Call the process function to find three distinct factors of n\n    process(n, 1, sol)\n    # Check if three factors are found\n    if len(sol) == 3:\n        # Print \"YES\" and the factors in sol\n        print(\"YES\")\n        print(*sol)\n    else:\n        # Print \"NO\" if three factors are not found\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `T`.\n2. For each test case, read the number `m`.\n3. Initialize an empty dictionary `dic` to store prime factors and their counts.\n4. Iterate from 2 to the square root of `m` to find prime factors.\n5. For each prime factor `i`, divide `m` by `i` as long as it's divisible, and increment the count in the dictionary.\n6. If `m` is not 1 after the loop, it means `m` itself is a prime factor, so add it to the dictionary.\n7. Count the number of distinct prime factors (`len(dic)`).\n8. If there are no prime factors, print \"NO\".\n9. If there's only one prime factor, check if its count is less than 6. If so, print \"NO\". Otherwise, print \"YES\" and construct the product of the prime factor raised to different powers.\n10. If there are two prime factors, check if their counts sum to less than 4. If so, print \"NO\". Otherwise, print \"YES\" and construct the product of the prime factors raised to different powers.\n11. If there are more than two prime factors, print \"YES\" and construct the product of the prime factors raised to their respective powers.\n\nCOMMENTED CODE:\n```python\ndef main():\n    # Read the number of test cases\n    T = int(input())\n    \n    for t in range(T):\n        # Read the number for the current test case\n        m = int(input())\n        \n        # Initialize an empty dictionary to store prime factors and their counts\n        dic = {}\n        \n        # Initialize the divisor to 2\n        i = 2\n        \n        # Iterate from 2 to the square root of m to find prime factors\n        while i * i <= m:\n            # While m is divisible by i, divide m by i and increment the count in the dictionary\n            while m % i == 0:\n                dic[i] = dic.get(i, 0) + 1\n                m //= i\n            # Increment the divisor\n            i += 1\n        \n        # If m is not 1 after the loop, it means m itself is a prime factor, so add it to the dictionary\n        if m % n == 0 and n!= 1:\n            dic[n] = dic.get(n, 0) + 1\n        \n        # Get the list of distinct prime factors\n        keys = list(dic.keys())\n        \n        # Count the number of distinct prime factors\n        # print(\"*\" + str(len(dic)))\n        \n        # If there are no prime factors, print \"NO\"\n        if len(dic) == 0:\n            print(\"NO\")\n        \n        # If there's only one prime factor, check if its count is less than 6\n        elif len(dic) == 1:\n            x = keys[0]\n            y = dic[x]\n            if y < 6:\n                print(\"NO\")\n            else:\n                # Print \"YES\" and construct the product of the prime factor raised to different powers\n                print(\"YES\")\n                print(str(x) +'' + str(x**2) +'' + str(x**(y-3)))\n        \n        # If there are two prime factors, check if their counts sum to less than 4\n        elif len(dic) == 2:\n            x1, x2 = keys[0], keys[1]\n            y1, y2 = dic[x1], dic[x2]\n            if y1 + y2 <= 3:\n                print(\"NO\")\n            else:\n                # Print \"YES\" and construct the product of the prime factors raised to different powers\n                print(\"YES\")\n                print(str(x1) +'' + str(x2) +'' + str((x1**(y1-1)) * (x2**(y2-1))))\n        \n        # If there are more than two prime factors, print \"YES\" and construct the product of the prime factors raised to their respective powers\n        else:\n            x1, x2 = keys[0], keys[1]\n            y1, y2 = dic[x1], dic[x2]\n            print(\"YES\")\n            print(str(x1**y1) +'' + str(x2**y2) +'' + str(m // (x1**y1) // (x2**y2)))\n\n\nif __name__ == \"__main__\":\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases from the input.\n2. For each test case, read the number to be tested.\n3. Use the `nonprime` function to check if the number is prime. If it is, proceed to the next step.\n4. If the number is prime, use the `nonprime` function again to find another factor of the number, starting from the next prime number after the first factor.\n5. If the second factor is also prime and the three numbers are distinct, print \"YES\" and the three numbers.\n6. If the conditions in step 5 are not met, print \"NO\".\n7. If the number is not prime, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef nonprime(number, start=2):\n    # Check if a number is prime\n    from math import sqrt\n    for i in range(start, int(sqrt(number)) + 1):\n        # If the number is divisible by any number in the range, it's not prime\n        if number % i == 0:\n            return [True, i]\n    # If the number is not divisible by any number in the range, it's prime\n    return [False]\n\n# Read the number of test cases\ntestcases = int(input())\nfor k in range(testcases):\n    # Read the number to be tested\n    numbertobetested = int(input())\n    \n    # Check if the number is prime\n    initial = nonprime(numbertobetested)\n    if initial[0]:\n        # If the number is prime, find another factor\n        k = nonprime(numbertobetested // initial[1], start=initial[1] + 1)\n        # Check if the second factor is prime and the three numbers are distinct\n        if k[0] and (initial[1]!= k[1] and initial[1]!= ((numbertobetested // initial[1]) // k[1]) and k[1]!= ((numbertobetested // initial[1]) // k[1])):\n            # Print \"YES\" and the three numbers\n            print(\"YES\")\n            print(str(initial[1]) + \" \" + str(k[1]) + \" \" + str(((numbertobetested // initial[1]) // k[1])))\n        else:\n            # Print \"NO\" if the conditions are not met\n            print(\"NO\")\n    else:\n        # Print \"NO\" if the number is not prime\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `n` from the input.\n2. Iterate over each test case using a for loop, ranging from 0 to `n-1`.\n3. For each test case, read the integer `z` from the input.\n4. Initialize an empty list `l` to store the factors of `z`.\n5. Iterate from 2 to `z` (exclusive) to find the first factor of `z`. If `z` is divisible by `i`, append `i` to `l` and divide `z` by `i`. This step ensures that we find the largest factor first.\n6. If no factor is found in the previous step, or if `i` is greater than the square root of `z`, break the loop.\n7. Iterate from 2 to `z` (exclusive) again to find the second factor of `z`. If `z` is divisible by `j` and `j` is not already in `l`, append `j` to `l` and divide `z` by `j`. This step ensures that we find the second largest factor that is distinct from the first factor.\n8. If no second factor is found in the previous step, or if `j` is greater than the square root of `z`, break the loop.\n9. Check if `l` has less than 2 elements, or if `z` is equal to 1, or if `z` is already in `l`. If any of these conditions are true, print \"NO\".\n10. Otherwise, print \"YES\" and the elements of `l` as the factors of `z`.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nn = int(input())\n\n# Iterate over each test case\nfor k in range(n):\n    # Read the integer z for the current test case\n    z = int(input())\n    \n    # Initialize an empty list to store the factors of z\n    l = []\n    \n    # Find the first factor of z\n    for i in range(2, z):\n        # Check if z is divisible by i\n        if z % i == 0:\n            # Append i to l and divide z by i\n            l.append(i)\n            z = z // i\n            # Break the loop since we found the first factor\n            break\n        # If i is greater than the square root of z, break the loop\n        if (i * i) > z:\n            break\n    \n    # Find the second factor of z\n    for j in range(2, z):\n        # Check if z is divisible by j and j is not already in l\n        if z % j == 0 and j not in l:\n            # Append j to l and divide z by j\n            l.append(j)\n            z = z // j\n            # Break the loop since we found the second factor\n            break\n        # If j is greater than the square root of z, break the loop\n        if (j * j) > z:\n            break\n    \n    # Check if it's impossible to represent z as a * b * c\n    if len(l) < 2 or z == 1 or z in l:\n        # Print \"NO\" if it's impossible\n        print('NO')\n    else:\n        # Print \"YES\" and the factors of z\n        print('YES')\n        print(l[0], l[1], z)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    }
]