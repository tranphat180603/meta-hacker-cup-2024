[
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case:\n   a. Read the integer `n` from the input.\n   b. Initialize an empty set `uniq` to store unique factors of `n`.\n   c. Find the first factor `i` of `n` such that `2 <= i <= sqrt(n)`. Add `i` to `uniq` and divide `n` by `i`.\n   d. Find the second factor `i` of `n` such that `2 <= i <= sqrt(n)` and `i` is not in `uniq`. Add `i` to `uniq` and divide `n` by `i`.\n   e. Check if `uniq` has less than 2 elements or if `n` is in `uniq` or if `n` is 1. If any of these conditions are true, print \"NO\".\n   f. Otherwise, print \"YES\" and the elements of `uniq` (including `n`).\n\nCOMMENTED CODE:\n```python\n#C. Product of Three Numbers\nfrom math import sqrt,ceil\n\n# Iterate over each test case\nfor _ in range(int(input())):\n    # Read the integer n from the input\n    n = int(input())\n    \n    # Initialize an empty set uniq to store unique factors of n\n    uniq = set()\n    \n    # Find the first factor i of n such that 2 <= i <= sqrt(n)\n    # and add i to uniq, then divide n by i\n    for i in range(2,ceil(sqrt(n))):\n        if n%i == 0 :\n            uniq.add(i)\n            n /= i\n            break\n    \n    # Find the second factor i of n such that 2 <= i <= sqrt(n)\n    # and i is not in uniq, then add i to uniq and divide n by i\n    for i in range(2,ceil(sqrt(n))):\n        if n%i == 0 and (i not in uniq):\n            uniq.add(i)\n            n /= i\n            break\n    \n    # Check if uniq has less than 2 elements or if n is in uniq or if n is 1\n    # If any of these conditions are true, print \"NO\"\n    if len(uniq)<2 or (n in uniq) or n == 1:\n        print(\"NO\")\n    else:\n        # Otherwise, print \"YES\" and the elements of uniq (including n)\n        print(\"YES\")\n        uniq.add(int(n))\n        print(*uniq)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all distinct divisors of `n` using the `div` function.\n4. Sort the divisors in ascending order.\n5. If the number of divisors is greater than 2, try to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n` by iterating through the divisors.\n6. If such integers are found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n7. If the number of divisors is not greater than 2, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef div(n):\n    # Find all distinct divisors of n\n    s = set()\n    for i in range(2, int(n**0.5)+2):  # Only need to check up to sqrt(n)\n        if n % i == 0:\n            # Add both i and n // i to the set to ensure distinctness\n            s.add(i)\n            s.add(n // i)\n    return s\n\nt = int(input())  # Read the number of test cases\nfor _ in range(t):\n    n = int(input())  # Read the integer n for each test case\n    s = list(div(n))  # Find divisors of n\n    s.sort()  # Sort divisors in ascending order\n    if len(s) > 2:\n        # Try to find three distinct integers a, b, and c such that a * b * c = n\n        found = 0\n        a = b = c = 0\n        d = len(s)\n        for i in range(d):\n            for j in range(i + 1, d):\n                if n % (s[i] * s[j]) == 0:\n                    # Check if the remaining factor is distinct and greater than or equal to 2\n                    g = n // (s[i] * s[j])\n                    if g!= s[i] and g!= s[j] and g >= 2:\n                        found = 1\n                        a = s[i]\n                        b = s[j]\n                        c = g\n                        break\n            if found:\n                break\n        if found:\n            # Print \"YES\" and the values of a, b, and c\n            print('YES')\n            print(a, b, c)\n        else:\n            # Print \"NO\" if no such integers are found\n            print('NO')\n    else:\n        # Print \"NO\" if the number of divisors is not greater than 2\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all distinct prime factors of `n` using the `facts` function.\n4. If the number of distinct prime factors is less than 3, print \"NO\" and move to the next test case.\n5. Initialize a dictionary `have` to keep track of the prime factors that have been used.\n6. Iterate through the prime factors of `n`. For each prime factor `x`, mark it as used in the `have` dictionary.\n7. Iterate through the prime factors of `n` again. For each pair of prime factors `x` and `y`, calculate the third factor `z` as `n / (x * y)`.\n8. If `z` is equal to `x` or `y`, skip this pair.\n9. If `z` is a prime factor that has been used (i.e., `have[z]` is `True`) and `x * y * z` equals `n`, print \"YES\" and the values of `x`, `y`, and `z`.\n10. If no such pair is found after iterating through all prime factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom collections import defaultdict as dd\n\n# Function to find all distinct prime factors of a number\ndef facts(x):\n    # Initialize an empty set to store prime factors\n    f = set()\n    # Iterate from 2 to the square root of x\n    for i in range(2, int(x**0.5) + 1):\n        # If x is divisible by i, add i and x // i to the set of prime factors\n        if x % i == 0:\n            f.add(i)\n            f.add(x // i)\n    # Return the list of prime factors\n    return list(f)\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find all distinct prime factors of n\n    fac = facts(n)\n    # If the number of distinct prime factors is less than 3, print \"NO\"\n    if len(fac) < 3:\n        print('NO')\n    else:\n        # Initialize a dictionary to keep track of used prime factors\n        have = dd(lambda: False)\n        \n        # Calculate the square root of n\n        root = n ** 0.5\n        # Mark each prime factor as used in the dictionary\n        for x in fac:\n            have[x] = True\n        # Initialize a flag to track whether a solution is found\n        done = False\n        # Iterate through the prime factors of n\n        for i in range(len(fac)):\n            # Iterate through the remaining prime factors\n            for j in range(i + 1, len(fac)):\n                # Get the current pair of prime factors\n                x, y = fac[i], fac[j]\n                # Calculate the third factor\n                z = n // (x * y)\n                # If z is equal to x or y, skip this pair\n                if z == x or z == y:\n                    continue\n                # If z is a used prime factor and x * y * z equals n, print \"YES\" and the values of x, y, and z\n                if have[z] == True and x * y * z == n:\n                    done = True\n                    print('YES')\n                    print(x, y, z)\n                    break\n            # If a solution is found, break the loop\n            if done:\n                break\n                \n        # If no solution is found, print \"NO\"\n        if not done:\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using a while loop and a for loop.\n4. Initialize three variables `a`, `b`, and `c` to 1.\n5. Iterate through the prime factors and assign them to `a`, `b`, and `c` in a way that ensures `a`, `b`, and `c` are distinct.\n6. Check if `a`, `b`, and `c` are all greater than 1 and distinct. If not, print \"NO\".\n7. If `a`, `b`, and `c` are valid, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef getnumbers(n): \n    # Initialize an empty list to store prime factors\n    divisor = []\n    \n    # Divide n by 2 as long as it's divisible\n    while n % 2 == 0: \n        # Append 2 to the list of prime factors\n        divisor.append(2), \n        # Divide n by 2\n        n = n / 2\n    \n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3,int(math.sqrt(n))+1,2): \n        # while i divides n, print i ad divide n \n        while n % i== 0: \n            # Append i to the list of prime factors\n            divisor.append(int(i)), \n            # Divide n by i\n            n = n / i\n    \n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        # Append n to the list of prime factors\n        divisor.append(int(n))\n    \n    # Initialize the variables with 1\n    a, b, c, size = 0, 0, 0, 0\n    a = b = c = 1\n    size = len(divisor) \n    \n    # Iterate through the prime factors\n    for i in range(size): \n  \n        # check for first number a \n        if (a == 1): \n            # Multiply a by the current prime factor\n            a = a * divisor[i] \n  \n        # check for second number b \n        elif (b == 1 or b == a): \n            # Multiply b by the current prime factor\n            b = b * divisor[i] \n  \n        # check for third number c \n        else: \n            # Multiply c by the current prime factor\n            c = c * divisor[i] \n    \n    # check for all unwanted condition \n    if (a == 1 or b == 1 or c == 1\n        or a == b or b == c or a == c): \n        # If any of the conditions are met, print \"NO\"\n        print('NO') \n    else: \n        # If all conditions are met, print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a, b, c) \n  \n# Driver function \nfor i in range(int(input())): \n    # Read the integer n for the current test case\n    n = int(input())\n    # Call the getnumbers function with n\n    getnumbers(n)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find all divisors of `n` up to the square root of `n` using the `divisor` function.\n4. If no divisors are found, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n5. Otherwise, select the smallest divisor `a` and divide `n` by `a`.\n6. Find all divisors of the new `n` using the `divisor` function.\n7. Iterate through the divisors to find a pair `(i, n//i)` such that `i!= a`, `n%i == 0`, `n//i!= a`, `n//i!= i`, and `n//i!= 1`.\n8. If such a pair is found, print \"YES\" and the product `a * i * n//i`.\n9. If no such pair is found after iterating through all divisors, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math as m\n\n# Function to find all divisors of a number up to its square root\ndef divisor(n):\n    # Initialize an empty list to store divisors\n    arr = []\n    # Iterate from 2 to the square root of n (inclusive)\n    for i in range(2, int(m.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If divisible, add i to the list of divisors\n            arr.append(i)\n    # Return the list of divisors\n    return arr\n\n# Read the number of test cases\nt = int(input())\n# Iterate through each test case\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find all divisors of n\n    temp = divisor(n)\n    # If no divisors are found, it's impossible to represent n as a product of three distinct integers\n    if temp == []:\n        print(\"NO\")\n    else:\n        # Select the smallest divisor a\n        a = temp[0]\n        # Divide n by a\n        n = n // temp[0]\n        # Initialize a flag to track whether a valid pair is found\n        boo = True\n        # Find all divisors of the new n\n        temp = divisor(n)\n        # Iterate through the divisors to find a pair (i, n//i) that satisfies the conditions\n        for i in temp:\n            # Check if i is not equal to a, n is divisible by i, n//i is not equal to a, n//i is not equal to i, and n//i is not equal to 1\n            if i!= a and n % i == 0 and n // i!= a and n // i!= i and n // i!= 1:\n                # If such a pair is found, print \"YES\" and the product a * i * n//i\n                print(\"YES\")\n                print(a, i, n // i)\n                # Set the flag to False to indicate that a valid pair is found\n                boo = False\n                # Break out of the loop since a valid pair is found\n                break\n        # If no valid pair is found after iterating through all divisors, print \"NO\"\n        if boo:\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read an integer `n` from the input.\n3. Define a function `check(x)` that takes an integer `x` as input and checks if it can be represented as the product of three distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`.\n4. In the `check(x)` function, find the square root of `x` and iterate from 2 to the square root of `x` to find a factor `i` of `x`.\n5. If a factor `i` is found, iterate from 2 to the square root of `x/i` to find another factor `j` of `x/i` such that `j!= i`.\n6. If both factors `i` and `j` are found, check if `x/(i*j)` is a distinct integer and not equal to `i` or `j`.\n7. If all conditions are met, return \"YES\" along with the values of `i`, `j`, and `x/(i*j)`.\n8. If no factors `i` and `j` are found, return \"NO\".\n9. For each test case, call the `check(x)` function and print the result.\n\nCOMMENTED CODE:\n```python\nfrom math import *\n\n# Read the number of test cases\nt = int(input())\n\n# Define a function to check if a number can be represented as the product of three distinct integers\ndef check(x):\n    # Initialize a flag to track if a factor is found\n    flag = 0\n    \n    # Iterate from 2 to the square root of x to find a factor i of x\n    for i in range(2, floor(sqrt(x))+1):\n        # If x is divisible by i, set the flag to 1 and break the loop\n        if x%i == 0:\n            flag = 1\n            break\n    \n    # If a factor i is found, iterate from 2 to the square root of x/i to find another factor j of x/i\n    if flag!=0:        \n        for j in range(2, floor(sqrt(x/i))+1):    \n            # If j is not equal to i and x/i is divisible by j, set a count to 1 and break the loop\n            if j!=i and (x/i)%j == 0:\n                count = 1\n                break\n        \n        # If both factors i and j are found, check if x/(i*j) is a distinct integer and not equal to i or j\n        if count!= 0:        \n            if x/(i*j)!=i and x/(i*j)!=1 and x/(i*j)!= j:\n                # If all conditions are met, return \"YES\" along with the values of i, j, and x/(i*j)\n                return \"YES\\n\"+str(i)+\" \"+str(j)+\" \"+str(int(x/(i*j)))\n    \n    # If no factors i and j are found, return \"NO\"\n    return \"NO\"\t \t\t\n\n# For each test case, read an integer n from the input and call the check(x) function\nfor _ in range(t):\n    x = int(input())\n    print(check(x))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, `n`.\n2. Iterate through each test case using a for loop.\n3. Read the value of `m` for each test case.\n4. Initialize `c` to 2 and an empty list `p` to store prime factors.\n5. Use a while loop to find prime factors of `m`.\n6. Inside the while loop, check if `m` is divisible by `c` (a potential prime factor).\n7. If `m` is divisible by `c`, divide `m` by `c` and append `c` to the list `p`.\n8. Increment `c` by 1 and repeat steps 6-7 until `c*c` is greater than `m` or `len(p)` is 2.\n9. After the while loop, check if `len(p)` is 2 and `m` is not already in `p`.\n10. If the condition in step 9 is true, print \"YES\" and the prime factors `p` along with `m`.\n11. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nn = int(input())\n\n# Iterate through each test case\nfor i in range(n):\n    # Read the value of m for each test case\n    m = int(input())\n\n    # Initialize c to 2 and an empty list p to store prime factors\n    c = 2\n    p = []\n\n    # Use a while loop to find prime factors of m\n    while len(p) < 2 and c * c < m:\n        # Check if m is divisible by c (a potential prime factor)\n        if m % c == 0:\n            # If m is divisible by c, divide m by c and append c to the list p\n            m = m // c\n            p.append(c)\n        # Increment c by 1 and repeat the loop\n        c += 1\n\n    # After the while loop, check if len(p) is 2 and m is not already in p\n    if len(p) == 2 and m not in p:\n        # If the condition is true, print \"YES\" and the prime factors p along with m\n        print(\"YES\")\n        print(*p, m)\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n`.\n3. Initialize variables `f`, `A`, `B`, `C`, and `f1` to keep track of the factors of `n`.\n4. Iterate through numbers from 2 to the square root of `n` to find its factors and store them in `f1`.\n5. Iterate through the factors of `n` to find three distinct integers `a`, `b`, `c` such that `a * b * c = n`.\n6. If such integers are found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin, stdout\n\n# Read the number of test cases\nfor _ in range(int(stdin.readline())):\n    # Read the integer n for the current test case\n    n = int(stdin.readline())\n\n    # Initialize variables to keep track of factors and result\n    f = 2  # starting factor\n    A = B = C = -1  # initialize result variables\n    f1 = []  # list to store factors of n\n\n    # Iterate through numbers from 2 to the square root of n to find its factors\n    while f * f <= n:\n        # Check if n is divisible by the current factor\n        if n % f == 0:\n            # If divisible, add the factor to the list\n            f1.append(f)\n        f += 1\n\n    # Get the number of factors found\n    nn = len(f1)\n\n    # Iterate through the factors to find three distinct integers a, b, c\n    for i in range(nn):\n        for j in range(i + 1, nn):\n            # Calculate the third factor c\n            c = n // (f1[i] * f1[j])\n            # Check if c is not equal to the other two factors and their product equals n\n            if c * f1[i] * f1[j] == n and c!= f1[i] and c!= f1[j]:\n                # If conditions are met, update the result variables\n                A, B, C = f1[i], f1[j], c\n                break\n\n    # Check if three distinct integers were found\n    if A == -1:\n        # If not, print \"NO\"\n        print('NO')\n    else:\n        # If found, print \"YES\" and the values of a, b, and c\n        print('YES')\n        print(A, B, C)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case, reading the integer `n` for each case.\n3. For each `n`, call the `prf` function to find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n` or determine if it's impossible to do so.\n4. If `prf` returns a list of three integers, print \"YES\" followed by the sorted list of integers. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef prf(x):\n    # Initialize an empty list to store the factors\n    a = []\n    # Initialize a variable to keep track of the current factor\n    b = 1\n    # Initialize a variable to start checking from 2\n    n = 2\n    # Calculate the square root of x\n    m = int(math.sqrt(x))\n    \n    # Iterate over possible factors from 2 to the square root of x\n    while n <= m:\n        # Check if x is divisible by n\n        if x%n == 0:\n            # If n is not already in the list, add it\n            if not(n in a): a.append(n)\n            # If n*b is not already in the list and x*b > 1, add n*b\n            elif not(n*b in a) and x*b > 1:\n                a.append(n*b)\n                b = 1\n            # Otherwise, update b to be the product of n and b\n            else: b *= n\n            # Divide x by n\n            x //= n\n        # If x is not divisible by n, increment n by 1 or 2 (depending on whether n is 2)\n        else:\n            if n == 2: n += 1\n            else: n += 2\n        \n        # Check if we have found three distinct factors\n        if len(a) == 3: return a\n        # Check if we have found two factors and the remaining x*b is a valid factor\n        elif len(a) == 2 and not(x*b in a) and x*b > 1:\n            a.append(x*b)\n            return a\n        # If we have found two factors but the remaining x*b is not a valid factor, return \"NO\"\n        elif len(a) == 2:\n            return 'NO'\n    \n    # If we have not found three distinct factors, return \"NO\"\n    return 'NO'\n\n# Read the number of test cases\nn = int(input())\n# Iterate over each test case\nfor i in range(n):\n    # Read the integer n for the current test case\n    x = int(input())\n    # Call the prf function to find three distinct factors\n    re = prf(x)\n    # If prf returns a list of three integers, print \"YES\" followed by the sorted list\n    if type(re) == type([1, 2, 3]):\n        print('YES')\n        print(*sorted(re))\n    # Otherwise, print \"NO\"\n    else:\n        print(re)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize a variable `tmp` to store the current prime factor, initially set to 0.\n4. Iterate through all numbers from 2 to the square root of `n` to find prime factors of `n`.\n5. For each number `i` in the iteration, check if `n` is divisible by `i`. If it is, check if `i` is not equal to `n//i` and both are not equal to `tmp`. If these conditions are met, it means we have found three distinct prime factors, so return `tmp`, `i`, and `n//i`.\n6. If no such factors are found, continue the iteration.\n7. If no factors are found after the iteration, it means `n` cannot be represented as a product of three distinct integers, so return -1.\n8. If a valid representation is found, print \"YES\" and the representation.\n9. If no valid representation is found, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef cal1(n,tmp):\n    # Find three distinct prime factors of n\n    i = 2\n    while i*i<=n:\n        if n % i == 0:\n            # Check if i and n//i are distinct and not equal to tmp\n            if (i!= n//i and i!= tmp and n//i!= tmp):\n                # Return tmp, i, and n//i as the three distinct prime factors\n                return (tmp,i,n//i)\n        i+=1\n    # If no valid factors are found, return -1\n    return (-1,0,0)\n\ndef cal(n):\n    # Initialize tmp to store the current prime factor\n    tmp = 0\n    i = 2\n    while i*i<=n:\n        if n % i == 0 and n//i!= i:\n            # Check if n//i and i are distinct prime factors\n            res,a,b = cal1(n//i,i)\n            if res!= -1:\n                # If valid factors are found, return 1 and the factors\n                return (1,res,a,b)\n        i+=1\n    # If no valid factors are found, return 0 and 0\n    return (0,0,0,0)\n\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the integer n for each test case\n    n = int(input())\n    # Call the cal function to find three distinct prime factors of n\n    res,a,b,c = cal(n)\n    # Check if valid factors are found\n    if res == 1:\n        # If valid factors are found, print \"YES\" and the factors\n        print('YES')\n        print(a,b,c)\n    else:\n        # If no valid factors are found, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `x` to store the factors of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n5. If `n` is divisible by the current number `i`, add `i` to the list `x`, divide `n` by `i`, and increment a counter `c`.\n6. If `c` reaches 2, break the loop as we have found two distinct factors.\n7. If the length of `x` is less than 2, print \"NO\" as it is impossible to represent `n` as a product of three distinct integers.\n8. If `x[0]` is not equal to `n` and `x[1]` is not equal to `n`, add `n` to the list `x`.\n9. If the length of `x` is 3, print \"YES\" and the elements of `x`.\n10. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef STR(): return list(input())\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef MAP2():return map(float,input().split())\ndef LIST(): return list(map(int, input().split()))\ndef STRING(): return input()\nimport string\nimport sys\nfrom heapq import heappop, heappush\nfrom bisect import *\nfrom collections import deque, Counter, defaultdict\nfrom math import *\nfrom itertools import permutations, accumulate\ndx = [-1, 1, 0, 0  ]\ndy = [0, 0 , 1 , - 1]\n\n# Iterate over each test case\nfor tt in range(INT()):\n    # Read the integer n for the current test case\n    n = INT()\n    \n    # Initialize an empty list x to store the factors of n\n    x = []\n    \n    # Initialize a counter c to keep track of the number of factors found\n    c = 0\n    \n    # Iterate from 2 to the square root of n (inclusive) to find factors of n\n    for i in range(2, int(sqrt(n)) + 1):\n        # Check if n is divisible by the current number i\n        if n % i == 0 :\n            # Add i to the list x\n            x.append(i)\n            # Divide n by i\n            n//= i\n            # Increment the counter c\n            c += 1\n            # If c reaches 2, break the loop as we have found two distinct factors\n            if c == 2 :\n                break\n    \n    # If the length of x is less than 2, print \"NO\" as it is impossible to represent n as a product of three distinct integers\n    if len(x) < 2 :\n        print('NO')\n    else:\n        # If x[0] is not equal to n and x[1] is not equal to n, add n to the list x\n        if x[0]!= n and x[1]!= n :\n            x.append(n)\n        \n        # If the length of x is 3, print \"YES\" and the elements of x\n        if len(x) == 3 :\n            print('YES')\n            print(*x)\n        else:\n            # Otherwise, print \"NO\"\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Initialize variables `f` (flag), `a`, `b`, `c` to track the result.\n5. Create a set `primes` to store prime numbers up to the square root of `n`.\n6. Use the Sieve of Eratosthenes algorithm to find prime numbers up to the square root of `n`.\n7. Iterate over the prime numbers in `primes`.\n8. For each prime `i`, check if `n` is divisible by `i`.\n9. If `n` is divisible by `i`, set `a` to `i` and `bc` to `n` divided by `i`.\n10. Find the prime factors of `bc` using the same method.\n11. If a valid combination of `a`, `b`, `c` is found, set `f` to `True` and break the loop.\n12. If no valid combination is found, print \"NO\".\n13. If a valid combination is found, print \"YES\" and the combination of `a`, `b`, `c`.\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt=int(input())\nfor i in range(t):\n    # Initialize variables to track the result\n    f=False\n    a=-1\n    b=-1\n    c=-1\n    # Read the integer n for the current test case\n    n=int(input())\n    # Create a set to store prime numbers up to the square root of n\n    primes=set()\n    # Calculate the upper limit for the Sieve of Eratosthenes algorithm\n    st=math.ceil(n**0.5)+1\n    # Initialize a list to track prime numbers\n    p=[True]*(st)\n    # Use the Sieve of Eratosthenes algorithm to find prime numbers up to the square root of n\n    for i in range(2,st):\n        if p[i]:\n            # Add the prime number to the set\n            primes.add(i)\n            # Mark multiples of the prime number as non-prime\n            for j in range(i,st,i):\n                p[j]=False\n    # Iterate over the prime numbers in primes\n    for i in range(2,st):\n        # Check if a valid combination is already found\n        if f:\n            break\n        # Check if n is divisible by the current prime\n        if n%i==0:\n            # Set a to the current prime\n            a=i\n            # Calculate bc as n divided by a\n            bc=n//i\n            # Calculate the upper limit for the Sieve of Eratosthenes algorithm\n            st1=math.ceil(bc**0.5)+1\n            # Check if bc is a prime number\n            if bc not in primes:\n                # Iterate over the prime numbers up to the square root of bc\n                for j in range(2,st1):\n                    # Skip the prime number if it is equal to a\n                    if j==a:\n                        continue\n                    # Check if bc is divisible by the current prime\n                    if bc%j==0 :\n                        # Check if the combination is valid\n                        if bc//j==a or j==bc//j:\n                            continue\n                        # Set b and c to the current prime and bc divided by the prime\n                        b=j\n                        c=bc//j\n                        # Set the flag to True and break the loop\n                        f=True\n                        # Print the combination\n                        #print(a,b,c)\n                        break\n    # Print the result\n    if f:\n        print(\"YES\")\n        print(a,b,c)\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, find all factors of the given number `n` using the `f(x)` function.\n3. Sort the factors in ascending order and remove duplicates.\n4. Iterate through the sorted factors to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n5. Check if `a` and `b` are distinct and if `n` is divisible by `a * b`. Also, check if `n / (a * b)` is not equal to `a`, `b`, or `1`.\n6. If the conditions in step 5 are met, print \"YES\" and the values of `a`, `b`, and `n / (a * b)`.\n7. If no such `a`, `b`, and `c` are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\ninput = sys.stdin.readline\n\nt=int(input())  # Read the number of test cases\n\nimport math\n\ndef f(x):  # Function to find all factors of a number\n    xr=math.ceil(math.sqrt(x))  # Calculate the square root of x and round up to the nearest integer\n    LIST=[]  # Initialize an empty list to store factors\n    for i in range(1,xr+1):  # Iterate from 1 to the square root of x\n        if x%i==0:  # Check if x is divisible by i\n            LIST.append(i)  # If x is divisible by i, add i to the list\n            LIST.append(x//i)  # Also add x // i to the list\n    return sorted(set(LIST))[1:]  # Return the sorted list of factors, excluding 1\n\nfor test in range(t):  # Iterate through each test case\n    n=int(input())  # Read the input number for the current test case\n    L=f(n)  # Find all factors of n\n    A=L[0]  # Initialize a variable to store the first factor\n    for i in f(n):  # Iterate through the factors\n        if i!=A and i*A<n and n%(i*A)==0 and n//(i*A)!=i and n//(i*A)!=A and n//(i*A)!=1:  # Check the conditions for a, b, and c\n            print(\"YES\")  # If the conditions are met, print \"YES\"\n            print(A,i,n//(i*A))  # Print the values of a, b, and n / (a * b)\n            break  # Break the loop as we have found a valid solution\n\n    else:  # If the loop completes without finding a valid solution\n        print(\"NO\")  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find all prime factors of `n` and store them in a list `z`.\n4. Sort the list `z` in ascending order.\n5. Iterate through the list `z` and for each prime factor `l`, use binary search to find another prime factor `z[ans]` such that `l * z[ans] * (n / (l * z[ans])) = n` and `l!= z[ans]`.\n6. If such a pair is found, print \"YES\" and the three distinct integers `l`, `z[ans]`, and `n / (l * z[ans])`.\n7. If no such pair is found after iterating through the entire list `z`, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom collections import defaultdict as dc\nfrom heapq import *\nimport math\nimport bisect\nfrom collections import deque as dq\n\ndef inp():\n    # Read an integer from input\n    p = int(input())\n    return p\n\ndef line():\n    # Read a list of integers from input\n    p = list(map(int, input().split()))\n    return p\n\ndef check(n, d, x):\n    # Check if n is greater than or equal to x + ceil(d / (x + 1))\n    if x < 0:\n        return 0\n    return n >= (x + math.ceil(d / (x + 1)))\n\ndef unique(a, b, c):\n    # Check if a, b, and c are distinct\n    p = set()\n    p.add(a)\n    p.add(b)\n    p.add(c)\n    if len(p) == 3:\n        return 1\n    return 0\n\ndef bs(a, n, z, val):\n    # Binary search for a prime factor of n\n    l = 0\n    r = n\n    while l < r:\n        mid = (l + r) // 2\n        if val % (a * z[mid]) == 0 and val // (a * z[mid])!= 1:\n            # Check if a * z[mid] and val // (a * z[mid]) are distinct\n            if unique(a, z[mid], val // (a * z[mid])):\n                return mid\n        if val > (a * z[mid]):\n            l = mid + 1\n        else:\n            r = mid - 1\n    if val % (a * z[mid]) == 0 and val // (a * z[mid])!= 1:\n        # Check if a * z[mid] and val // (a * z[mid]) are distinct\n        if unique(a, z[mid], val // (a * z[mid])):\n            return mid\n    return -1\n\nfor _ in range(inp()):\n    # Read the integer n for each test case\n    a = inp()\n    z = []\n    for i in range(2, int(pow(a, 0.5)) + 1):\n        # Find all prime factors of n\n        if a % i == 0:\n            z.append(i)\n            if (i!= a // i):\n                z.append(a // i)\n    z.sort()\n    k = 0\n    for i in range(len(z)):\n        # Iterate through the list of prime factors\n        l = z[i]\n        ans = bs(l, len(z), z, a)\n        if ans!= -1:\n            # If a pair of distinct prime factors is found, print the result\n            print('YES')\n            print(l, z[ans], a // (l * z[ans]))\n            k = 1\n            break\n    if k == 0:\n        # If no pair of distinct prime factors is found, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for the current test case from the input.\n4. Initialize an empty list `ans` to store the factors of `n`.\n5. Iterate from 2 to the cube root of `n` (rounded up) using a for loop.\n6. Check if `n` is divisible by the current number `i` using the modulo operator (`n%i == 0`).\n7. If `n` is divisible by `i`, append `i` to the `ans` list and update `n` by dividing it by `i` (`n = n//i`).\n8. Repeat step 6 and 7 until `n` is no longer divisible by any number in the range or until the `ans` list contains exactly two elements.\n9. Check if the `ans` list contains exactly two elements and if the remaining value of `n` is greater than the second element in the `ans` list.\n10. If the condition in step 9 is true, print \"YES\" and the elements of the `ans` list along with the remaining value of `n`.\n11. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the factors of n\n    ans = []\n    \n    # Iterate from 2 to the cube root of n (rounded up)\n    for i in range(2,int(n**(2/3))+1):\n        # Check if n is divisible by the current number i\n        if n%i == 0:\n            # If n is divisible by i, append i to the ans list and update n\n            ans.append(i)\n            n = n//i  # Divide n by i to find the next factor\n    \n    # Check if the ans list contains exactly two elements and if the remaining value of n is greater than the second element in the ans list\n    if len(ans) == 2 and ans[1] < n:\n        # If the condition is true, print \"YES\" and the elements of the ans list along with the remaining value of n\n        print('YES')\n        print(*ans, n)  # Use the * operator to unpack the elements of the ans list\n    else:\n        # Otherwise, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. If `n` is less than 8, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`.\n5. Initialize an empty list `l` to store the prime factors of `n`.\n6. Iterate from 2 to the square root of `n` (inclusive) to find the prime factors of `n`.\n7. If `n` is divisible by `i`, add `i` to the list `l` and divide `n` by `i`.\n8. If `l` is not empty, proceed to find the remaining prime factors of `n`.\n9. Iterate from `l[-1]` to the square root of `n` (inclusive) to find the remaining prime factors of `n`.\n10. If `n` is divisible by `i`, add `t*i` to the list `l` (where `t` is the current product of prime factors) and divide `n` by `i`.\n11. If `l` has less than 2 elements, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`.\n12. If `t` is 1 or equal to `l[-1]`, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`.\n13. Add `t` to the list `l` and divide `n` by `l[0]*l[1]`.\n14. If `m` (the remaining value of `n`) is greater than or equal to 2, add `m` to the list `l`.\n15. Convert the list `l` to a set `s` to remove duplicates.\n16. If the length of `s` is less than the length of `l` or if `l` has less than 3 elements, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`.\n17. Otherwise, print \"YES\" and the elements of `l` as the representation of `n` as a product of three distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`.\n\nCOMMENTED CODE:\n```python\nfor _ in range(int(input())):\n    n = int(input())\n    m = n\n    l = []\n    t = 1\n    f = 0\n    g = 0\n\n    # If n is less than 8, it's impossible to represent n as a product of three distinct integers a, b, and c such that 2 \u2264 a, b, c\n    if n < 8:\n        print(\"NO\")\n        \n    else:\n        # Iterate from 2 to the square root of n (inclusive) to find the prime factors of n\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                # If n is divisible by i, add i to the list l and divide n by i\n                if not l:\n                    l.append(i)\n                    f = 1\n                    break\n        \n        # If l is not empty, proceed to find the remaining prime factors of n\n        if f == 1:\n            n = n // l[-1]\n            # Iterate from l[-1] to the square root of n (inclusive) to find the remaining prime factors of n\n            for i in range(l[-1], int(n**0.5) + 1):\n                while n % i == 0:\n                    # If n is divisible by i, add t*i to the list l (where t is the current product of prime factors) and divide n by i\n                    if l[-1] == t * i:\n                        t = t * i\n                    else:\n                        l.append(t * i)\n                        n = n // i\n                        g = 1\n                        break\n                \n                # If g is 1, break the loop as we have found the remaining prime factors of n\n                if g == 1:\n                    break\n            \n            # If l has less than 2 elements, print \"NO\" as it's impossible to represent n as a product of three distinct integers a, b, and c such that 2 \u2264 a, b, c\n            if len(l) < 2:\n                if t == 1 or t == l[-1]:\n                    print(\"NO\")\n                else:\n                    # Add t to the list l and divide n by l[0]*l[1]\n                    l.append(t)\n                    m = m // (l[0] * l[1])\n                    # If m is greater than or equal to 2, add m to the list l\n                    if m >= 2:\n                        l.append(m)\n            \n            # Convert the list l to a set s to remove duplicates\n            s = set(l)\n            # If the length of s is less than the length of l or if l has less than 3 elements, print \"NO\" as it's impossible to represent n as a product of three distinct integers a, b, and c such that 2 \u2264 a, b, c\n            if len(s) < len(l) or len(l) <= 2:\n                print(\"NO\")\n            else:\n                # Print \"YES\" and the elements of l as the representation of n as a product of three distinct integers a, b, and c such that 2 \u2264 a, b, c\n                print(\"YES\")\n                print(\" \".join(map(str, l)))\n        else:\n            # If l is empty, print \"NO\" as it's impossible to represent n as a product of three distinct integers a, b, and c such that 2 \u2264 a, b, c\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `factorize` function.\n4. If the number of prime factors is less than 3, it is impossible to represent `n` as a product of three distinct integers, so print \"NO\" and move to the next test case.\n5. If the first two prime factors are the same, combine them into a single factor and remove the duplicate.\n6. If the number of prime factors is still less than 3 after step 5, it is impossible to represent `n` as a product of three distinct integers, so print \"NO\" and move to the next test case.\n7. Reduce the remaining prime factors into a single factor by multiplying them together.\n8. If the set of prime factors has less than 3 distinct elements, it is impossible to represent `n` as a product of three distinct integers, so print \"NO\" and move to the next test case.\n9. Print \"YES\" and the three distinct prime factors as the solution.\n\nCOMMENTED CODE:\n```python\nimport sys\nimport math\nfrom functools import reduce\n\n\ndef getN():\n    # Read an integer from the input\n    return int(input())\n\n\ndef getNM():\n    # Read two integers from the input\n    return map(int, input().split())\n\n\ndef getList():\n    # Read a list of integers from the input\n    return list(map(int, input().split()))\n\n\ndef getArray(intn):\n    # Read an array of integers from the input\n    return [int(input()) for i in range(intn)]\n\n\ndef input():\n    # Read a line from the input and remove the newline character\n    return sys.stdin.readline().rstrip()\n\n\ndef factorize(n):\n    # Find the prime factors of a number\n    factors = []\n    for i in range(2, int(math.sqrt(n) + 1)):\n        # While the number is divisible by i, add i to the factors and divide the number by i\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If the number is not 1, it means it is a prime factor, so add it to the factors\n    if n!= 1:\n        factors.append(n)\n    return factors\n\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = getN()\n    # Find the prime factors of n\n    factors = factorize(n)\n\n    # If the number of prime factors is less than 3, it is impossible to represent n as a product of three distinct integers\n    if len(factors) < 3:\n        print(\"NO\")\n        continue\n\n    # If the first two prime factors are the same, combine them into a single factor and remove the duplicate\n    if factors[0] == factors[1]:\n        factors[1] = factors[1] * factors[2]\n        factors.pop(2)\n\n    # If the number of prime factors is still less than 3 after step 5, it is impossible to represent n as a product of three distinct integers\n    if len(factors) < 3:\n        print(\"NO\")\n        continue\n    # Reduce the remaining prime factors into a single factor by multiplying them together\n    factors[2] = reduce((lambda x, y: x * y), factors[2:])\n\n    # If the set of prime factors has less than 3 distinct elements, it is impossible to represent n as a product of three distinct integers\n    if len(set(factors)) < 3:\n        print(\"NO\")\n        continue\n    # Print \"YES\" and the three distinct prime factors as the solution\n    print(\"YES\")\n    print(*factors[:3])\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty dictionary `d` to store the prime factors of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find its prime factors.\n5. If `n` is divisible by `i`, add `i` to the dictionary `d` with a count of 1, and divide `n` by `i` until it's no longer divisible by `i`.\n6. If `n` is greater than 2 after the loop, add it to the dictionary `d` with a count of 1.\n7. Check the length of the dictionary `d`.\n8. If the length is 3 or more, find three distinct prime factors `a`, `b`, and `c` from the dictionary `d`, sort them in descending order, and print \"YES\" along with the values of `a`, `b`, and `c`.\n9. If the length is 2, find two prime factors `p` and `q` from the dictionary `d`, calculate the remaining factor `s` by multiplying the remaining prime factors, sort `p` and `q` in descending order, and print \"YES\" along with the values of `p`, `q`, and `s`.\n10. If the length is 1, find the single prime factor `p` from the dictionary `d`, calculate the remaining factors `q` and `s` by multiplying the remaining prime factors, and print \"YES\" along with the values of `p`, `q`, and `s`.\n11. If none of the above conditions are met, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nfrom math import *\ninput=sys.stdin.readline\nfrom math import *\n\n# Read the number of test cases\nt=int(input())\n\nwhile t>0:\n    t-=1\n\n    # Read the integer n for the current test case\n    n=int(input())\n\n    # Initialize an empty dictionary d to store the prime factors of n\n    d={}\n\n    # Iterate from 2 to the square root of n (inclusive) to find its prime factors\n    for i in range(2,int(ceil(sqrt(n)))+1):\n        if n%i==0:\n            # Add i to the dictionary d with a count of 1, and divide n by i until it's no longer divisible by i\n            d[i]=0\n            while n%i==0:\n                n//=i\n                d[i]+=1\n\n    # If n is greater than 2 after the loop, add it to the dictionary d with a count of 1\n    if n>2:\n        d[n]=1\n\n    # Check the length of the dictionary d\n    if len(d)>=3:\n        # Find three distinct prime factors a, b, and c from the dictionary d, sort them in descending order\n        a=[]\n        for i in d:\n            a.append(i**d[i])\n        a.sort(reverse=True)    \n        # Print \"YES\" along with the values of a, b, and c\n        p=a[0]\n        q=a[1]\n        s=1\n        for k in range(2,len(a)):\n            s*=a[k]\n        print(\"YES\")\n        print(p,q,s)\n        continue\n    elif len(d)==2:\n        # Find two prime factors p and q from the dictionary d\n        a=[]\n        s=0\n        for i in d:\n            s+=d[i]\n        # If the sum of the counts of p and q is less than or equal to 3, print \"NO\"\n        if s<=3:\n            print(\"NO\")\n            continue\n        # Calculate the remaining factor s by multiplying the remaining prime factors\n        s=1    \n        for i in d:\n            a.append(i)\n            s*=i**(d[i]-1)\n        a.sort()\n        p=a[0]\n        q=a[1]\n      \n        # Print \"YES\" along with the values of p, q, and s\n        print(\"YES\")\n        print(p,q,s)\n            \n    else:\n        # Find the single prime factor p from the dictionary d\n        c=0\n        a=[]\n        for i in d:\n            if 6>d[i]>=3:\n                # Add p to the list a, subtract 1 from its count in the dictionary d, and add p^d[i]-1 to the list a\n                a.append(i)\n                d[i]-=1\n                a.append(i**(d[i]))\n            elif d[i]>=6:    \n                # Add p to the list a, add p^2 to the list a, and add p^(d[i]-3) to the list a\n                a.append(i)\n                a.append(i**2)\n                a.append(i**(d[i]-3))\n            else:\n                # Add p^d[i] to the list a\n                a.append(i**d[i])\n        \n        # If the length of the list a is less than 3, print \"NO\"\n        if len(a)<3:\n            print(\"NO\")\n            continue\n        # Find the three largest prime factors p, q, and s from the list a, sort them in descending order\n        a.sort(reverse=True)    \n        p=a[0]\n        q=a[1]\n        s=1\n        for k in range(2,len(a)):\n            s*=a[k]\n        # Print \"YES\" along with the values of p, q, and s\n        print(\"YES\")\n        print(p,q,s)\n        continue\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Calculate the upper bound `s` for the possible factors of `n` using the square root of `n` and add 10 to it.\n4. Initialize an empty list `ans` to store the factors of `n`.\n5. Iterate over the range from 2 to `s` (inclusive) to find factors of `n`.\n6. For each number `i` in the range, check if `n` is divisible by `i` and if the length of `ans` is less than 2.\n7. If both conditions are true, append `i` to `ans` and divide `n` by `i`.\n8. After the loop, check if the length of `ans` is 2 and if the second element of `ans` is less than the remaining `n`.\n9. If both conditions are true, append the remaining `n` to `ans`.\n10. Check if the length of `ans` is 3.\n11. If it is, print \"YES\" and the elements of `ans` separated by spaces.\n12. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nimport math\nwhile t:  # Iterate over each test case\n    n = int(input())  # Read the integer n for the current test case\n    s = int(math.sqrt(n) + 10)  # Calculate the upper bound for possible factors\n    ans = []  # Initialize an empty list to store factors\n    for i in range(s)[2:]:  # Iterate over the range from 2 to s (inclusive)\n        if n % i == 0 and len(ans) < 2:  # Check if n is divisible by i and if ans has less than 2 elements\n            ans.append(i)  # Append i to ans\n            n //= i  # Divide n by i\n    if len(ans) == 2 and ans[1] < n:  # Check if ans has 2 elements and the second element is less than the remaining n\n        ans.append(n)  # Append the remaining n to ans\n    if len(ans) == 3:  # Check if ans has 3 elements\n        print(\"YES\")  # Print \"YES\"\n        print(ans[0], ans[1], ans[2], sep=' ')  # Print the elements of ans separated by spaces\n    else:\n        print(\"NO\")  # Print \"NO\"\n    t -= 1  # Decrement the test case counter\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. Sort the prime factors in ascending order.\n5. Initialize variables `x`, `y`, and `z` to store the three distinct integers.\n6. Check if the length of the prime factors list is less than 3. If so, it's impossible to find three distinct integers, so print \"NO\".\n7. If the second prime factor is the same as the first, check if there are more than two prime factors. If so, use the next two prime factors as `y` and `z`. Otherwise, it's impossible to find three distinct integers, so print \"NO\".\n8. If `x`, `y`, and `z` are all distinct and `z` is not 1, print \"YES\" and the values of `x`, `y`, and `z`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to find prime factors of a number\ndef primeFactors(n): \n    # Initialize an empty list to store prime factors\n    output = []\n    \n    # Divide n by 2 until it's no longer divisible\n    while n % 2 == 0: \n        # Add 2 to the list of prime factors\n        output.append(2)\n        # Divide n by 2\n        n = n / 2 \n    \n    # Iterate from 3 to the square root of n (inclusive) in steps of 2\n    for i in range(3,int(math.sqrt(n))+1,2):  \n        # While n is divisible by i, add i to the list of prime factors and divide n by i\n        while n%i==0: \n            output.append(i) \n            n = n / i \n    \n    # If n is greater than 2, it's a prime number, so add it to the list\n    if n > 2: \n        output.append(int(n))\n    \n    # Return the list of prime factors\n    return output\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor g in range(0,t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Find the prime factors of n\n    a = primeFactors(n)\n    \n    # Sort the prime factors in ascending order\n    a.sort()\n    \n    # Initialize a flag to indicate whether a solution is found\n    output = 1\n    \n    # Initialize variables to store the three distinct integers\n    x = y = z = 0\n    \n    # Set x to the first prime factor\n    x = a[0]\n    \n    # If there's only one prime factor, it's impossible to find three distinct integers\n    if(len(a)==1):\n        output = 0\n    \n    # If a solution is found, check if the second prime factor is the same as the first\n    if(output==1):\n        if(a[1]!=a[0]):\n            # If the second prime factor is different, set y to the second prime factor\n            y = a[1]\n            # Calculate z as n divided by the product of x and y\n            z = int(n/(x*y))\n        else:\n            # If the second prime factor is the same as the first, check if there are more than two prime factors\n            if(len(a)>2):\n                # If there are more than two prime factors, set y to the product of the second and third prime factors\n                y = a[1]*a[2]\n                # Calculate z as n divided by the product of x and y\n                z = int(n/(x*y))\n            else:\n                # If there are only two prime factors, it's impossible to find three distinct integers\n                output = 0\n    \n    # If a solution is found and z is not 1, and x, y, and z are all distinct, print the solution\n    if(output==1 and z!=1 and x!=y and y!=z and x!=z):\n        print(\"YES\")\n        print(x,y,z)\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the number `n`.\n3. Find the prime factorization of `n` using the `pp` function.\n4. If the number of prime factors is less than 3, print \"NO\" and move to the next test case.\n5. If the second and third prime factors are the same, print \"NO\" and move to the next test case.\n6. Otherwise, print \"YES\" and the three distinct integers `a`, `b`, and `c` where `a` is the first prime factor, `b` is the second prime factor, and `c` is the product of the remaining prime factors.\n\nCOMMENTED CODE:\n```python\nfrom __future__ import division, print_function\n\nimport os\nimport sys, math\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n# Function to find prime factors of a number\nprime = []  # List to store prime factors\ndef pp(n):\n    # Divide n by 2 until it's no longer divisible\n    while n%2 == 0:\n        n /= 2\n        prime.append(2)  # Add 2 to the list of prime factors\n    import math\n    k = int(math.sqrt(n))  # Find the square root of n\n    for i in range(3, k+1):  # Iterate from 3 to the square root of n\n        if n%i == 0:  # If n is divisible by i\n            while n%i == 0:  # Divide n by i until it's no longer divisible\n                n /= i\n                prime.append(i)  # Add i to the list of prime factors\n    if n > 2:  # If n is a prime number greater than 2\n        prime.append(n)  # Add n to the list of prime factors\n\ndef main():\n    t = int(input())  # Read the number of test cases\n    while t:  # Iterate over each test case\n        t -= 1\n        n = int(input())  # Read the number for the current test case\n        prime.clear()  # Clear the list of prime factors\n        pp(n)  # Find the prime factors of n\n        if len(prime) < 3:  # If the number of prime factors is less than 3\n            print(\"NO\")  # Print \"NO\"\n            continue  # Move to the next test case\n        ok = True  # Flag to check if the solution is valid\n        a = prime[0]  # First prime factor\n        b = prime[1]  # Second prime factor\n        c = 1  # Product of remaining prime factors\n        for i in range(2, len(prime)):  # Iterate over the remaining prime factors\n            c *= prime[i]  # Multiply the product by the current prime factor\n        if b == a:  # If the second prime factor is the same as the first\n            b *= prime[2]  # Multiply the second prime factor by the third prime factor\n            c /= prime[2]  # Divide the product by the third prime factor\n            if len(prime) < 4 or c == a or c == b:  # If the product is not a distinct integer\n                print(\"NO\")  # Print \"NO\"\n                continue  # Move to the next test case\n            print(\"YES\")  # Print \"YES\"\n            c = int(c)  # Convert the product to an integer\n            print(a, b, c)  # Print the three distinct integers\n        elif b == c:  # If the second prime factor is the same as the product\n            print(\"NO\")  # Print \"NO\"\n        else:  # If the solution is valid\n            print(\"YES\")  # Print \"YES\"\n            c = int(c)  # Convert the product to an integer\n            print(a, b, c)  # Print the three distinct integers\n\n# region fastio\n\nBUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\nif __name__ == \"__main__\":\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `li` to store the factors of `n`.\n4. Iterate from `i = 2` to the square root of `n` (inclusive) to find factors of `n`.\n5. For each factor `i`, check if `n` is divisible by `i`. If it is, add `i` to the list `li` and divide `n` by `i`.\n6. If the length of `li` is 3, multiply the last two elements of `li` and remove the last element from `li`.\n7. If the length of `li` is 2, check if the remaining `n` is not equal to the last element of `li` and not equal to 1. If it is not, add `n` to `li`.\n8. If `li` has exactly 3 distinct elements, print \"YES\" and the elements of `li` as the result.\n9. If `li` does not have exactly 3 distinct elements, print \"NO\".\n\nCOMMENTED CODE:\n```python\n#!/usr/bin/python3\n\nimport math\ndi = dict()  # This dictionary is not used in the code\n\ndef couns(x, n):  # Function to find the next factor of n\n    # Find the next factor of n starting from x\n    z = int(math.sqrt(n))  # Calculate the square root of n\n    for i in range(x, z+2):  # Iterate from x to the square root of n\n        if n % i == 0:  # Check if n is divisible by i\n            return i  # Return the factor i\n    return 1  # If no factor is found, return 1\n\ndef countofmul(n):  # Function to find three distinct factors of n\n    # If n is in the dictionary di, return the stored result\n    # li = list()  # Initialize an empty list to store factors\n    #... (rest of the code remains the same)\n\n    li = list()  # Initialize an empty list to store factors\n    i = 2  # Initialize the starting factor\n    val = 0  # Initialize a variable (not used in the code)\n    while n >= 2:  # Iterate until n is less than 2\n        i = couns(i, n)  # Find the next factor of n\n        if i!= 1:  # Check if the factor is not 1\n            li.append(i)  # Add the factor to the list\n            n = n // i  # Divide n by the factor\n            # Check if the length of li is 3\n            if len(li) == 3:\n                li[-2] *= li[-1]  # Multiply the last two elements of li\n                li.remove(li[-1])  # Remove the last element from li\n            # Check if the length of li is 2\n            if len(li) == 2:\n                if li[0]!= li[1] and li[1]!= n and li[0]!= n and n!= 1:\n                    li.append(n)  # Add n to li\n                    return li  # Return the list li\n        else:\n            return []  # If no factor is found, return an empty list\n\nn = int(input())  # Read the number of test cases\nfor i in range(n):  # Iterate over the test cases\n    x = int(input())  # Read the integer n for each test case\n    r = countofmul(x)  # Find three distinct factors of n\n    # Check if the length of r is 3 or more\n    if len(r) >= 3:\n        a = r[0]  # Assign the first element of r to a\n        b = r[1]  # Assign the second element of r to b\n        c = r[2]  # Assign the third element of r to c\n        print(\"YES\")  # Print \"YES\"\n        print(a, b, c)  # Print the factors a, b, and c\n    else:\n        print(\"NO\")  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize a variable `i` to 2 and an empty list `tmp` to store the prime factors of `n`.\n4. Iterate through numbers from 2 to the square root of `n` (inclusive) to find prime factors of `n`.\n5. If `n` is divisible by `i`, add `i` to the `tmp` list and divide `n` by `i`.\n6. If the length of `tmp` is 3, break the loop as we have found three distinct prime factors.\n7. If the length of `tmp` is less than 2, print \"NO\" as it is impossible to represent `n` as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n8. If the length of `tmp` is 2, check if there exists a third prime factor `x` such that `n` can be represented as `tmp[0] * tmp[1] * x`.\n9. If such `x` exists and is not already in `tmp`, print \"YES\" and the three prime factors.\n10. If no such `x` exists, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nimport math\ninput = sys.stdin.readline\nins = lambda: input().rstrip()\nini = lambda: int(input().rstrip())\ninm = lambda: map(int, input().split())\ninl = lambda: list(map(int, input().split()))\n\nt = ini()  # Read the number of test cases\nfor _ in range(t):\n    n = ini()  # Read the integer n for each test case\n    i = 2  # Initialize the variable i to 2\n    tmp = []  # Initialize an empty list tmp to store prime factors\n    while n >= i * i:  # Iterate through numbers from 2 to the square root of n\n        if i == 5 and n % 5 == 0 and 4 in tmp:  # Handle a special case for 5 and 4\n            tmp.remove(4)\n        if n % i == 0:  # Check if n is divisible by i\n            tmp.append(i)  # Add i to the tmp list\n            n //= i  # Divide n by i\n        if len(tmp) == 3:  # If we have found three distinct prime factors, break the loop\n            break\n        i += 1  # Increment i\n    if len(tmp) <= 1:  # If we have less than two prime factors, it is impossible to represent n as a \u22c5 b \u22c5 c\n        print(\"NO\")\n    elif len(tmp) >= 2:  # If we have two or more prime factors\n        if len(tmp) == 3:  # If we have exactly three prime factors\n            y = (n / (tmp[0] * tmp[2])).is_integer()  # Check if n can be represented as tmp[0] * tmp[1] * tmp[2]\n            if tmp[0] * tmp[1] * tmp[2] == n:  # If n can be represented as tmp[0] * tmp[1] * tmp[2]\n                print(\"YES\")  # Print \"YES\"\n                print(tmp[0], tmp[1], tmp[2])  # Print the three prime factors\n                continue\n            elif y and n / (tmp[0] * tmp[2]) not in tmp:  # If n can be represented as tmp[0] * tmp[2] * x and x is not already in tmp\n                print(\"YES\")  # Print \"YES\"\n                print(tmp[0], tmp[2], n // (tmp[0] * tmp[2]))  # Print the three prime factors\n                continue\n        x = (n / (tmp[0] * tmp[1])).is_integer()  # Check if n can be represented as tmp[0] * tmp[1] * x\n        if x and n / (tmp[0] * tmp[1]) not in tmp:  # If n can be represented as tmp[0] * tmp[1] * x and x is not already in tmp\n            print(\"YES\")  # Print \"YES\"\n            print(tmp[0], tmp[1], n // (tmp[0] * tmp[1]))  # Print the three prime factors\n        else:\n            print(\"NO\")  # Print \"NO\"\n    else:\n        print(\"NO\")  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case.\n3. Read the number `n` for the current test case.\n4. Check if it's impossible to find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n`. If `2*3*4 > n`, it's impossible, so print \"NO\".\n5. Initialize variables `a` and `b` to 0.\n6. Find the first prime factor `a` of `n` by iterating from 2 to the square root of `n` and checking if `n` is divisible by the current number.\n7. Divide `n` by `a` to reduce the problem size.\n8. Find the second prime factor `b` of `n` by iterating from 2 to the square root of `n` and checking if `n` is divisible by the current number. Ensure that `b` is not equal to `a`.\n9. Divide `n` by `b` to reduce the problem size.\n10. Check if it's still impossible to find the third prime factor. If `a` or `b` is 0, or if `n` is equal to `b` or `a`, it's impossible, so print \"NO\".\n11. If all checks pass, print \"YES\" and the values of `a`, `b`, and `n`.\n\nCOMMENTED CODE:\n```python\n# Product of three numbers\n\nfrom math import *\n\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the number for the current test case\n    num = int(input())\n    \n    # Check if it's impossible to find three distinct integers a, b, c\n    if 2*3*4 > num:\n        # If impossible, print \"NO\"\n        print(\"NO\")\n    else:\n        # Initialize variables a and b to 0\n        a, b = 0, 0\n        \n        # Find the first prime factor a of n\n        for i in range(2, int(sqrt(num))+1):\n            # Check if n is divisible by the current number\n            if num % i == 0:\n                # If divisible, set a to the current number and divide n by a\n                a = i\n                num //= i\n                # Break the loop since we found the first prime factor\n                break\n        \n        # Find the second prime factor b of n\n        for i in range(2, int(sqrt(num))+1):\n            # Check if n is divisible by the current number and if it's not equal to a\n            if num % i == 0 and i!= a:\n                # If divisible and not equal to a, set b to the current number and divide n by b\n                b = i\n                num //= i\n                # Break the loop since we found the second prime factor\n                break\n        \n        # Check if it's still impossible to find the third prime factor\n        if a==0 or b==0 or num==b or num ==a:\n            # If impossible, print \"NO\"\n            print(\"NO\")\n        else:\n            # If all checks pass, print \"YES\" and the values of a, b, and n\n            print(\"YES\")\n            print(a, b, num)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize variables: `a` to 2 (the smallest possible value for `a`), `tr` to False (a flag to track if a solution is found), `cnt` to 0 (a counter to track the number of factors found), and `ans` as an empty list to store the factors.\n5. Use a while loop to find factors of `n`. The loop continues as long as `a` squared is less than or equal to `n` and `cnt` is less than 2.\n6. Inside the loop, check if `n` is divisible by `a`. If it is, divide `n` by `a` and append `a` to the `ans` list. Increment `cnt` to track the number of factors found.\n7. Increment `a` by 1 to check the next possible factor.\n8. After the loop, append the remaining value of `n` to the `ans` list.\n9. Check if the length of `ans` is 3 and if the second element of `ans` is less than the third element. If both conditions are true, print \"YES\" and the elements of `ans`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Initialize variables\n    a = 2  # The smallest possible value for a\n    tr = False  # Flag to track if a solution is found\n    cnt = 0  # Counter to track the number of factors found\n    ans = []  # List to store the factors\n\n    # Use a while loop to find factors of n\n    while (a * a <= n) and (cnt < 2):\n        # Check if n is divisible by a\n        if n % a == 0:\n            # If divisible, divide n by a and append a to the ans list\n            n = n // a\n            ans.append(a)\n            # Increment cnt to track the number of factors found\n            cnt += 1\n        # Increment a to check the next possible factor\n        a += 1\n\n    # Append the remaining value of n to the ans list\n    ans.append(n)\n\n    # Check if the length of ans is 3 and if the second element of ans is less than the third element\n    if (len(ans) == 3) and (ans[1] < ans[2]):\n        # If both conditions are true, print \"YES\" and the elements of ans\n        print('YES')\n        print(*ans)\n    else:\n        # Otherwise, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Find all factors of `n` up to the square root of `n` using a loop.\n5. Store the factors in a list `fact` and a set `factors` to avoid duplicates.\n6. Iterate through the factors to find a valid triplet `(a, b, c)` such that `a * b * c = n` and `a`, `b`, `c` are distinct integers greater than or equal to 2.\n7. For each factor `a`, iterate through the remaining factors to find a factor `b` such that `a * b` divides `n` and `n / (a * b)` is not equal to `a` or `b`.\n8. If a valid triplet is found, print \"YES\" and the triplet `(a, b, n / (a * b))`.\n9. If no valid triplet is found after checking all factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor i in range(int(input())):\n    # Function to find the required triplets\n    def findTriplets(x):\n        # To store the factors\n        fact = [];\n        factors = set();\n\n        # Find factors in sqrt(x) time\n        for i in range(2, int(sqrt(x))):\n            # Check if x is divisible by i\n            if (x % i == 0):\n                # Add i and x // i to the factors list\n                fact.append(i);\n                if (x / i!= i):\n                    fact.append(x // i);\n\n                # Add i and x // i to the factors set to avoid duplicates\n                factors.add(i);\n                factors.add(x // i);\n\n        # Flag to indicate if a valid triplet is found\n        found = False;\n        k = len(fact);\n\n        # Iterate through the factors to find a valid triplet\n        for i in range(k):\n            # Choose a factor\n            a = fact[i];\n\n            # Iterate through the remaining factors\n            for j in range(k):\n                # Choose another factor\n                b = fact[j];\n\n                # Check if the conditions for a valid triplet are met\n                if ((a!= b) and (x % (a * b) == 0)\n                        and (x / (a * b)!= a)\n                        and (x / (a * b)!= b)\n                        and (x / (a * b)!= 1)):\n                    # Print the valid triplet\n                    print(\"YES\");\n                    print(a, b, x // (a * b));\n                    found = True;\n                    break;\n\n            # If a valid triplet is found, break the loop\n            if (found):\n                break;\n\n        # If no valid triplet is found, print \"NO\"\n        if (not found):\n            print(\"NO\");\n\n    # Read the integer n for the current test case\n    x = int(input());\n\n    # Call the findTriplets function\n    findTriplets(x);\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case, reading the value of `n` for each case.\n3. For each `n`, find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n` or determine if it's impossible to do so.\n4. If it's impossible, print \"NO\" for the current test case.\n5. If it's possible, print \"YES\" and any possible such representation of `n` as `a \u22c5 b \u22c5 c`.\n\nCOMMENTED CODE:\n```python\ndef find_factors(a, k):  # Function to find two factors of k\n    # Iterate from a+1 to the square root of k (inclusive) to find a factor\n    for i in range(a+1, int(k**0.5) + 1):\n        if k % i == 0:  # Check if i is a factor of k\n            return i, k // i  # Return the factor pair\n    return -1, -1  # Return -1, -1 if no factor pair is found\n\nn = int(input())  # Read the number of test cases\nfor i in range(n):  # Iterate over each test case\n    k = int(input())  # Read the value of n for the current test case\n    a1, k2 = find_factors(1, k)  # Find two factors of k starting from 1\n    if a1 == -1:  # If no factor pair is found\n        print('NO')  # Print \"NO\" for the current test case\n    else:\n        a2, a3 = find_factors(a1, k2)  # Find two factors of k2 starting from a1\n        if a2 == -1:  # If no factor pair is found\n            print('NO')  # Print \"NO\" for the current test case\n        elif (a2 == a3) or (a3 == a1):  # Check if the factors are distinct\n            print('NO')  # Print \"NO\" for the current test case\n        else:\n            print('YES')  # Print \"YES\" for the current test case\n            print(a1, a2, a3)  # Print the factor representation of n\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the `func` function.\n4. Initialize an empty list `X` to store the three distinct integers.\n5. Initialize `j` as the first prime factor of `n` and append it to `X`.\n6. Initialize `h` as the first prime factor `j` and `k` as 1.\n7. While `k` is less than the length of the prime factors list and `h` is less than or equal to `j`, multiply `h` by the `k`-th prime factor and increment `k`.\n8. If `k` exceeds the length of the prime factors list, it means `n` cannot be represented as a product of three distinct integers, so print \"NO\".\n9. Otherwise, calculate the product of the remaining prime factors and append it to `X` if it is not equal to 1 or the first two elements of `X`.\n10. Check if the length of the set `X` is 3. If it is, print \"YES\" and the elements of `X`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math as mt\n\ndef func(n):\n    # Find prime factors of n\n    a = []\n    while(n % 2 == 0):\n        # If n is divisible by 2, append 2 to the list and divide n by 2\n        a.append(2)\n        n = n // 2\n    for i in range(3, mt.ceil(mt.sqrt(n)) + 1, 2):\n        # Iterate over odd numbers from 3 to the square root of n\n        while(n % i == 0):\n            # If n is divisible by i, append i to the list and divide n by i\n            n = n // i\n            a.append(i)\n    # If n is greater than 2, it means n is a prime number, so append it to the list\n    if(n > 2):\n        a.append(n)\n    return a\n\nt = int(input())\n# Read the number of test cases\nfor i in range(t):\n    n = int(input())\n    # For each test case, read the integer n\n    C = list(func(n))\n    # Find prime factors of n\n    X = []\n    j = C[0]\n    X.append(C[0])\n    h = 1\n    k = 1\n    # Initialize h as the first prime factor and k as 1\n    while(k < len(C) and h <= j):\n        # While k is less than the length of the prime factors list and h is less than or equal to j\n        h = h * C[k]\n        # Multiply h by the k-th prime factor\n        k += 1\n    X.append(h)\n    # Append h to X\n    p = 1\n    # Initialize p as 1\n    if(k > len(C)):\n        # If k exceeds the length of the prime factors list, it means n cannot be represented as a product of three distinct integers\n        print(\"NO\")\n    else:\n        for i in range(k, len(C)):\n            # Iterate over the remaining prime factors\n            p = p * C[i]\n        # Calculate the product of the remaining prime factors\n        if(p!= 1 and p!= X[0] and p!= X[1]):\n            # If p is not equal to 1 or the first two elements of X, append p to X\n            X.append(p)\n        if(len(set(X)) == 3):\n            # Check if the length of the set X is 3\n            print(\"YES\")\n            # If it is, print \"YES\" and the elements of X\n            print(*X)\n        else:\n            # Otherwise, print \"NO\"\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `l` to store the factors of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n5. If `n` is divisible by `i`, add `i` and `n//i` to the list `l`. If `n//i` equals `i`, only add `i` to the list.\n6. If the length of `l` is less than 3, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n7. Otherwise, generate all combinations of 3 elements from `l` using the `combinations` function from the `itertools` module.\n8. Iterate over the combinations and check if the product of the three elements equals `n`.\n9. If a combination is found where the product equals `n`, print \"YES\" and the combination, then break the loop.\n10. If no combination is found, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom itertools import combinations\nfrom math import sqrt\n\n# Iterate over each test case\nfor _ in range(int(input())):\n    # Initialize an empty list to store factors of n\n    l = []\n    \n    # Read the integer n from the input\n    n = int(input())\n    \n    # Iterate from 2 to the square root of n to find factors\n    for i in range(2, int(sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If n//i is not equal to i, add both i and n//i to the list\n            if n // i!= i:\n                l.append(i)\n                l.append(n // i)\n            # If n//i equals i, only add i to the list\n            else:\n                l.append(i)\n    \n    # Check if it's impossible to represent n as a product of three distinct integers\n    if len(l) < 3:\n        print(\"NO\")\n    else:\n        # Generate all combinations of 3 elements from l\n        k = combinations(l, 3)\n        \n        # Iterate over the combinations\n        for i in k:\n            # Check if the product of the three elements equals n\n            if i[0] * i[1] * i[2] == n:\n                # If a combination is found, print \"YES\" and the combination, then break the loop\n                print(\"YES\")\n                print(i[0], i[1], i[2])\n                break\n        # If no combination is found, print \"NO\"\n        else:\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases from the input.\n2. For each test case, read the integer n.\n3. Iterate over all possible values of a from 2 to the square root of n (inclusive).\n4. For each value of a, iterate over all possible values of b from a + 1 to the square root of n // a (inclusive).\n5. Calculate the value of c as n // (a * b).\n6. Check if a * b * c equals n and if c is not equal to a or b.\n7. If the conditions in step 6 are met, print \"YES\" and the values of a, b, and c.\n8. If no such values of a, b, and c are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases from the input\ntest_cases = int(input())\n\ndef process():\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Iterate over all possible values of a from 2 to the square root of n (inclusive)\n    for a in range(2, int(math.sqrt(n)) + 1):\n        # For each value of a, iterate over all possible values of b from a + 1 to the square root of n // a (inclusive)\n        for b in range(a + 1, int(math.sqrt(n // a)) + 1):\n            # Calculate the value of c as n // (a * b)\n            c = n // (a * b)\n            # Check if a * b * c equals n and if c is not equal to a or b\n            if a * b * c == n and c!= b and c!= a:\n                # If the conditions are met, print \"YES\" and the values of a, b, and c\n                print('YES')\n                print(a, b, c)\n                # Return from the function to move to the next test case\n                return\n\n    # If no such values of a, b, and c are found, print \"NO\"\n    print('NO')\n\n# Iterate over all test cases\nfor i in range(test_cases):\n    # Process each test case\n    process()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `fac` to store the prime factors of `n`.\n5. Initialize a counter `count` to keep track of the number of prime factors found.\n6. Initialize a variable `p` to 1, which will be used to check if `n` is divisible by `i`.\n7. Calculate the square root of `n` and store it in `z`.\n8. Iterate from `i=2` to `z` (inclusive) to find prime factors of `n`.\n9. Inside the loop, check if `n` is divisible by `i` using the modulo operator (`n%i==0`).\n10. If `n` is divisible by `i`, set `p` to 1, append `i` to the `fac` list, and update `n` by dividing it by `i`.\n11. Increment the `count` variable to keep track of the number of prime factors found.\n12. After the loop, check if `n` is not already in the `fac` list and if the length of `fac` is 2.\n13. If both conditions are true, it means we have found three distinct prime factors, so append \"YES\" to the `ans` list and join the `fac` list to form the output string.\n14. If either condition is false, append \"NO\" to the `ans` list.\n15. After processing all test cases, iterate over the `ans` list and print each element.\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\nans = []  # Initialize an empty list to store the output for each test case\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    fac = []  # Initialize an empty list to store the prime factors of n\n    count = 0  # Initialize a counter to keep track of the number of prime factors found\n    i = 2  # Initialize the variable i to 2\n    p = 0  # Initialize a variable p to 0\n    z = math.sqrt(n)  # Calculate the square root of n\n    while count!= 2 and i < z:\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If n is divisible by i, set p to 1, append i to fac, and update n\n            p = 1\n            fac.append(str(i))\n            n = n // i\n            count += 1\n        i += 1\n    # Check if n is not already in fac and if the length of fac is 2\n    if str(n) not in fac and len(fac) == 2:\n        # If both conditions are true, append \"YES\" to ans and join fac to form the output string\n        ans.append(\"YES\")\n        fac.append(str(n))\n        ans.append(' '.join(fac))\n    else:\n        # If either condition is false, append \"NO\" to ans\n        ans.append(\"NO\")\n# Print the output for each test case\nfor i in ans:\n    print(i)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, `num`.\n2. Iterate through each test case.\n3. For each test case, read the integer `a`.\n4. Check if `a` is prime using the `isPrime` function. If it is, print \"NO\" and move to the next test case.\n5. If `a` is not prime, find its factors using the `print_factors` function.\n6. Check if the number of factors is exactly 3. If it is, print \"YES\" and the factors (excluding the last factor if it is greater than the square root of `a`).\n7. If the number of factors is not exactly 3, print \"NO\".\n8. Repeat steps 2-7 for all test cases.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to check if a number is prime\ndef isPrime(n):\n    # Corner cases\n    if (n <= 1): \n        # If n is less than or equal to 1, it's not prime\n        return False\n    if (n <= 3): \n        # 2 and 3 are prime numbers\n        return True\n\n    # This is checked so that we can skip middle five numbers in below loop\n    if (n % 2 == 0 or n % 3 == 0): \n        # If n is divisible by 2 or 3, it's not prime\n        return False\n\n    i = 5\n    while(i * i <= n): \n        # Check divisibility up to the square root of n\n        if (n % i == 0 or n % (i + 2) == 0): \n            # If n is divisible by any number between 5 and its square root, it's not prime\n            return False\n        i = i + 6\n\n    return True\n\n# Function to find factors of a number\ndef print_factors(x):\n    # Initialize variables\n    num=0\n    fac=1\n    li=[]  # List to store factors\n    tri=x  # Temporary variable to store the remaining value\n\n    # Find factors\n    for i in range(2, int(math.sqrt(x))+1):\n        if tri % i == 0:\n            # If i is a factor, increment the count and update the factor and remaining value\n            num+=1\n            fac = fac*i\n            li.append(i)\n            tri = tri/i\n            # Stop when we find two factors\n            if(num==2):\n                break\n\n    # Check if the remaining value is a factor\n    if(x%fac==0):\n        # If the remaining value is greater than the current factor, add it to the list\n        if(int(x/fac)>i):\n            li.append(int(x/fac))\n\n    return li\n\n# Read the number of test cases\nnum = int(input())\n\n# Iterate through each test case\nfor i in range(num):\n    # Initialize variables\n    lis=[]  # List to store factors\n    a = int(input())  # Read the integer for the current test case\n\n    # Check if a is less than 2\n    if(a<2):\n        # If a is less than 2, print \"NO\" and move to the next test case\n        print(\"NO\")\n        continue\n\n    # Check if a is prime\n    isp = isPrime(a)\n    if(isp==True):\n        # If a is prime, print \"NO\" and move to the next test case\n        print(\"NO\")\n    else:\n        # If a is not prime, find its factors\n        lis = print_factors(a)\n\n        # Check if the number of factors is exactly 3\n        if(len(lis)==3):\n            # If the number of factors is exactly 3, print \"YES\" and the factors\n            print(\"YES\")\n            for i in range(2):\n                print(lis[i],end=\" \")\n            print(lis[i+1])\n        else:\n            # If the number of factors is not exactly 3, print \"NO\"\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Check if `n` is a prime number. If it is, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers.\n5. If `n` is not prime, check if it has a prime factor `i` such that `n // i` is not prime. If it does, proceed to the next step.\n6. Find the prime factorization of `n // i` to get the other two distinct integers `b` and `c`.\n7. If `a`, `b`, and `c` are distinct, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to check if a number is prime\ndef isPrime(n):\n    # Iterate from 2 to n-1 to check for factors\n    for i in range(2, n):\n        # If n is divisible by any number in this range, it's not prime\n        if n % i:\n            continue\n        # If n is divisible by any number, it's not prime\n        return False\n    # If n is not divisible by any number in the range, it's prime\n    return True\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Check if n is prime\n    if isPrime(n):\n        # If n is prime, it's impossible to represent n as a product of three distinct integers\n        print(\"NO\")\n    else:\n        # Initialize a flag to track if a valid representation is found\n        ip = False\n        # Initialize a variable to store the prime factor i\n        i = 0\n\n        # Iterate from 2 to the square root of n to find a prime factor i\n        for i in range(2, int(math.sqrt(n)) + 1):\n            # Check if n is divisible by i\n            if n % i == 0:\n                # Check if n // i is not prime\n                if not isPrime(n // i):\n                    # Set the flag to True and break the loop\n                    ip = True\n                    break\n\n        # If a valid representation is found, proceed to find the other two distinct integers\n        if ip:\n            # Reset the flag\n            ip = False\n\n            # Iterate from i+1 to the square root of n // i to find the other prime factor j\n            for j in range(i + 1, int(math.sqrt(n // i)) + 1):\n                # Check if n // i is divisible by j\n                if (n // i) % j == 0:\n                    # Set the flag to True and store the values of a, b, and c\n                    ip = True\n                    a = i\n                    b = j\n                    c = (n // i) // j\n                    break\n\n            # Check if a, b, and c are distinct\n            if ip and (a!= b and b!= c and a!= c):\n                # Print \"YES\" and the values of a, b, and c\n                print(\"YES\")\n                print(a, b, c)\n            else:\n                # Print \"NO\" if a, b, and c are not distinct\n                print(\"NO\")\n        else:\n            # Print \"NO\" if no valid representation is found\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `ans` to store the prime factors of `n`.\n4. Use a sieve to generate all prime numbers up to `N` (set to `1e5` in this solution).\n5. Iterate through the prime numbers and check if `n` is divisible by any prime number `p`. If it is, divide `n` by `p` and add `p` to the `ans` list. Recursively call the `f` function to continue factoring `n`.\n6. If `n` is not divisible by any prime number `p` (i.e., `p*p > n`), stop the factoring process.\n7. If the length of `ans` is less than or equal to 1, it means that `n` cannot be factored into three distinct integers, so print \"NO\" and move to the next test case.\n8. If the length of `ans` is exactly 2, it means that one of the factors is a perfect square. In this case, iterate through the prime numbers from 2 to the square root of `n` to find the remaining factor.\n9. If the length of `ans` plus the remaining factor `n` has three distinct elements, print \"YES\" and the factors; otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin\n\n# Read input line by line and strip whitespace\ninp = (s.rstrip() for s in stdin).__next__\n\n# Function to read integers from input\ndef mpint():\n\treturn map(int, inp().split())\n\n# Sieve to generate prime numbers up to N\nN = int(1e5)\nis_prime = [True] * (N + 1)  # Initialize boolean array with True values\nis_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\nprime = []  # List to store prime numbers\nfor n in range(2, N + 1):\n\tif is_prime[n]:  # If n is prime\n\t\tprime.append(n)  # Add n to the list of prime numbers\n\tfor p in prime:  # Iterate through prime numbers\n\t\tif n * p > N:  # Stop if p*p > n to avoid index out of range\n\t\t\tbreak\n\t\tis_prime[p * n] = False  # Mark multiples of p as non-prime\n\t\tif n % p == 0:  # If n is a multiple of p, stop the inner loop\n\t\t\tbreak\n\ndef f():\n\tglobal n  # Use global variable n\n\tif len(ans) == 2:  # If ans has two elements, stop the recursion\n\t\treturn\n\n\tfor p in prime:  # Iterate through prime numbers\n\t\tif p*p > n:  # Stop if p*p > n\n\t\t\treturn\n\n\t\tif n % p == 0:  # If n is divisible by p\n\t\t\tn //= p  # Divide n by p\n\t\t\tans.append(p)  # Add p to the ans list\n\t\t\treturn f()  # Recursively call f\n\nfor case in range(int(inp())):  # Iterate through test cases\n\tn = int(inp())  # Read integer n from input\n\tans = []  # Initialize ans list\n\tf()  # Call f to factor n\n\tif len(ans) <= 1:  # If ans has less than or equal to one element\n\t\tprint(\"NO\")  # Print \"NO\"\n\t\tcontinue\n\n\tif ans[0] == ans[1]:  # If the first two elements of ans are equal\n\t\tfor p in range(2, int(n**0.5)+1):  # Iterate through prime numbers\n\t\t\tif n % p == 0:  # If n is divisible by p\n\t\t\t\tn //= p  # Divide n by p\n\t\t\t\tans[1] *= p  # Multiply the second element of ans by p\n\t\t\t\tbreak\n\n\tif len(set(ans + [n])) == 3:  # If the length of the set of ans plus n is three\n\t\tprint(\"YES\")  # Print \"YES\"\n\t\tprint(*ans, n)  # Print the elements of ans and n\n\telse:\n\t\tprint(\"NO\")  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Check if `n` is a prime number. If it is, print \"NO\" and move to the next test case.\n4. Check if the square root of `n` is an integer. If it is, check if the square root is a prime number. If it is, print \"NO\" and move to the next test case.\n5. Check if the fourth root of `n` is an integer. If it is, check if the fourth root is a prime number. If it is, print \"NO\" and move to the next test case.\n6. Iterate from 2 to the square root of `n` (inclusive) to find a factor `i` of `n`.\n7. If a factor `i` is found, divide `n` by `i` and find the factors of the resulting number `n`.\n8. Remove 1 and `n` from the list of factors, as they are not valid choices for `a`, `b`, and `c`.\n9. If the list of factors has more than one element, iterate through the list to find three distinct factors `i`, `j`, and `k` such that `i!= j`, `i!= k`, and `j!= k`.\n10. If such factors are found, print \"YES\" and the values of `i`, `j`, and `k`.\n11. If no such factors are found after iterating through all test cases, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom functools import reduce\n\n# Function to check if a number is prime\ndef is_prime(n):\n    # 1 is not a prime number\n    if n == 1:\n        return False\n    # Check divisibility from 2 to the square root of n\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n# Function to find factors of a number\ndef factors(n):    \n    # Use a list comprehension to generate factors\n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))    \n\n# Read the number of test cases\nt = int(input())\nwhile(t):\n    t-=1\n    # Read the integer n for the current test case\n    n = int(input())\n    # Flag to track if a solution is found\n    b=True\n    # List to store the solution\n    l=[]\n    \n    # Check if n is a prime number\n    if is_prime(n):\n        # If n is prime, print \"NO\" and move to the next test case\n        print(\"NO\")\n        continue\n    \n    # Check if the square root of n is an integer\n    elif int(n**0.5)==n**0.5:\n        # Check if the square root is a prime number\n        if is_prime(n**0.5):\n            # If the square root is prime, print \"NO\" and move to the next test case\n            print(\"NO\")\n            continue\n        # Check if the fourth root of n is an integer\n        elif int(n**0.25)==n**0.25:\n            # Check if the fourth root is a prime number\n            if is_prime(n**0.25):\n                # If the fourth root is prime, print \"NO\" and move to the next test case\n                print(\"NO\")\n                continue\n    \n    # Iterate from 2 to the square root of n to find a factor\n    for i in range(2,int(n**0.5)+1):\n        # Check if n is divisible by i\n        if n%i==0:\n            # Divide n by i\n            n = int(n/i)\n            # Find the factors of the resulting number n\n            s = sorted(list(factors(n)))\n            # Remove 1 and n from the list of factors\n            if 1 in s:\n                s.pop(s.index(1))\n            if n in s:\n                s.pop(s.index(n))\n            # Check if the list of factors has more than one element\n            if len(s)>1:\n                # Iterate through the list to find three distinct factors\n                for ii in range(len(s)):\n                    # Check if the current factor is greater than i\n                    if s[ii]>i:\n                        # Store the current factor as j\n                        j=s[ii]\n                        # Store the last factor as k\n                        k=s[len(s)-ii-1]\n                        # Check if j!= k and i!= k\n                        if j!=k and i!=k:\n                            # Store the factors in the list\n                            l.append(i)\n                            l.append(j)\n                            l.append(k)\n                            # Print \"YES\" and the values of i, j, and k\n                            print(\"YES\")\n                            print(*l)\n                            # Set the flag to False to exit the loop\n                            b=False\n                            break\n                # If a solution is found, exit the loop\n                if not b:\n                    break\n    # If no solution is found after iterating through all test cases, print \"NO\"\n    if b:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `n` from the input.\n2. For each test case, read an integer `a` from the input.\n3. Define a function `f(a)` that takes an integer `a` as input and returns a string representing the result.\n4. In the `f(a)` function, find the smallest prime factor `x` of `a` by iterating from 2 to `a`.\n5. If no prime factor is found, return 'NO'.\n6. Divide `a` by `x` to get a new value `a`.\n7. Find the smallest prime factor `y` of the new `a` by iterating from 2 to `a`.\n8. If no prime factor is found, return 'NO'.\n9. Divide `a` by `y` to get a new value `z`.\n10. Check if `x`, `y`, and `z` are distinct and their product equals the original `a`.\n11. If the conditions are met, return 'YES' followed by the values of `x`, `y`, and `z`.\n12. Otherwise, return 'NO'.\n13. For each test case, call the `f(a)` function and print the result.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nn = int(input())\n\n# Define a function f(a) that takes an integer a as input and returns a string representing the result\ndef f(a):\n    # Initialize variables to store the prime factors\n    q = a  # Store the original value of a\n    x = 0  # Initialize x to store the first prime factor\n    y = 0  # Initialize y to store the second prime factor\n    z = 0  # Initialize z to store the third prime factor\n\n    # Find the smallest prime factor x of a by iterating from 2 to a\n    for i in range(2, a):\n        # If i * i > a, break the loop because all factors of a will be smaller than sqrt(a)\n        if i * i > a:\n            break\n        # If a is divisible by i, it means i is a prime factor of a\n        if a % i == 0:\n            x = i  # Store the first prime factor\n            break\n\n    # If no prime factor is found, return 'NO'\n    if x == 0:\n        return 'NO'\n    else:\n        # Divide a by x to get a new value a\n        a = a // x\n\n    # Find the smallest prime factor y of the new a by iterating from 2 to a\n    for i in range(2, a):\n        # If i * i > a, break the loop because all factors of a will be smaller than sqrt(a)\n        if i * i > a:\n            break\n        # If i is not equal to x and a is divisible by i, it means i is a prime factor of a\n        if i!= x and a % i == 0:\n            y = i  # Store the second prime factor\n            break\n\n    # If no prime factor is found, return 'NO'\n    if y == 0:\n        return 'NO'\n    else:\n        # Divide a by y to get a new value z\n        z = a // y\n\n    # Check if x, y, and z are distinct and their product equals the original a\n    if z!= y and z!= x and y!= x and x * y * z == q:\n        # If the conditions are met, return 'YES' followed by the values of x, y, and z\n        return 'YES' + '\\n' + str(x) +'' + str(y) +'' + str(z)\n    else:\n        # Otherwise, return 'NO'\n        return 'NO'\n\n# For each test case, call the f(a) function and print the result\nfor i in range(n):\n    a = int(input())\n    print(f(a))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `y` to track whether a valid solution is found.\n5. Iterate from `2` to the square root of `n` (inclusive) to find factors of `n`.\n6. For each factor `i`, calculate `x` as `n` divided by `i`.\n7. Iterate from `i+1` to the square root of `n` (inclusive) to find factors of `x`.\n8. For each factor `j` of `x`, check if `x` divided by `j` is not equal to `i` and is greater than `1` and not equal to `j`.\n9. If the conditions in step 8 are met, print \"YES\" and the factors `i`, `j`, and `n` divided by `i*j`.\n10. Set `y` to `1` to indicate that a valid solution is found.\n11. If `y` is `1`, break the loop to move to the next test case.\n12. If no valid solution is found after iterating through all possible factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Initialize a flag to track whether a valid solution is found\n    y = 0\n    \n    # Iterate from 2 to the square root of n to find factors of n\n    for i in range(2, int(n**0.5) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Calculate x as n divided by i\n            x = n // i\n            \n            # Iterate from i+1 to the square root of n to find factors of x\n            for j in range(i + 1, int(n**0.5) + 1):\n                # Check if x is divisible by j\n                if x % j == 0:\n                    # Check if x divided by j is not equal to i and is greater than 1 and not equal to j\n                    if x // j!= i and (x // j) > 1 and (x // j)!= j:\n                        # Print \"YES\" and the factors i, j, and n divided by i*j\n                        print(\"YES\")\n                        print(i, j, n // (i * j))\n                        # Set y to 1 to indicate that a valid solution is found\n                        y = 1\n                        # Break the loop to move to the next test case\n                        break\n            # If a valid solution is found, break the loop\n            if y == 1:\n                break\n    # If no valid solution is found, print \"NO\"\n    if y == 0:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `dels` to store the prime factors of `n`.\n4. Find the square root of `n` and iterate through numbers from 2 to the square root of `n` to find its prime factors.\n5. Store the prime factors in the `dels` list and update `n` by dividing it by the current prime factor.\n6. Repeat step 5 until `n` is reduced to 1.\n7. Append the remaining `n` to the `dels` list.\n8. Initialize variables `a`, `b`, and `c` to store the three distinct integers.\n9. Set `a` to the first element of the `dels` list and `b` to 1.\n10. Iterate through the `dels` list starting from the second element, multiply `b` by each element, and check if `b` is less than or equal to `a`.\n11. If `b` is less than or equal to `a`, update `a` and `b` accordingly.\n12. Set `c` to the remaining value of `n` divided by the product of `a` and `b`.\n13. Check if `a`, `b`, and `c` satisfy the condition `a < b < c` and `a > 1`.\n14. If the condition is satisfied, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    t = n = int(input())\n    \n    # Initialize an empty list to store the prime factors of n\n    dels = []\n    \n    # Find the square root of n\n    sq = int(math.sqrt(n))\n    \n    # Initialize a variable d to 2\n    d = 2\n    \n    # Iterate through numbers from 2 to the square root of n\n    while d <= sq:\n        # Check if n is divisible by d\n        if n % d!= 0:\n            # If not, increment d by 1\n            d += 1\n        else:\n            # If n is divisible by d, append d to the dels list\n            dels.append(d)\n            # Update n by dividing it by d\n            n //= d\n            # Update the square root of n\n            sq = int(math.sqrt(n))\n    \n    # Append the remaining n to the dels list\n    dels.append(n)\n    \n    # Initialize variables a, b, and c\n    a = dels[0]\n    b = 1\n    i = 1\n    \n    # Iterate through the dels list starting from the second element\n    while i < len(dels) and b <= a:\n        # Multiply b by the current element in the dels list\n        b *= dels[i]\n        # Increment i by 1\n        i += 1\n    \n    # Set c to the remaining value of n divided by the product of a and b\n    a, b, c = sorted([a, b, t // (a * b)])\n    \n    # Check if a, b, and c satisfy the condition a < b < c and a > 1\n    if (a > 1) and (a < b < c):\n        # If the condition is satisfied, print \"YES\" and the values of a, b, and c\n        print('YES')\n        print(a, b, t // (a * b))\n    else:\n        # If the condition is not satisfied, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for each test case from the input.\n4. Initialize a counter `count` to keep track of the number of prime factors found.\n5. Initialize an empty list `ans` to store the prime factors.\n6. Calculate the square root of `n` and store it in `r`.\n7. Iterate from `j=2` to `r` (inclusive) to find prime factors of `n`.\n8. Check if `n` is divisible by `j`. If it is, increment `count` and divide `n` by `j`. Append `j` to the `ans` list.\n9. If `count` is less than 2 or no prime factors are found, print 'NO'.\n10. Otherwise, calculate the product of the prime factors in `ans` and store it in `s`.\n11. Check if `temp//s` (where `temp` is the original value of `n`) is not in `ans`. If it is, print 'NO'.\n12. If `temp//s` is not in `ans`, print 'YES' and the prime factors along with `temp//s`.\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\ntest = int(input())\nfor i in range(test):\n    # Read the value of n for each test case\n    n = int(input())\n    # Initialize a counter to keep track of the number of prime factors found\n    count = 0\n    # Initialize an empty list to store the prime factors\n    ans = []\n    # Calculate the square root of n\n    r = math.ceil(math.sqrt(n))\n    # Iterate from j=2 to r (inclusive) to find prime factors of n\n    j = 2\n    while count < 2 and j < r:\n        # Check if n is divisible by j\n        if n % j == 0:\n            # Increment count and divide n by j\n            count += 1\n            n //= j\n            # Append j to the ans list\n            ans.append(j)\n        j += 1\n    # If count is less than 2 or no prime factors are found, print 'NO'\n    if count == 0 or count < 2:\n        print('NO')\n    else:\n        # Calculate the product of the prime factors in ans\n        s = 1\n        for i in ans:\n            s *= i\n        # Check if temp//s (where temp is the original value of n) is not in ans\n        if temp // s not in ans:\n            # Print 'YES' and the prime factors along with temp//s\n            print('YES')\n            print(*ans, temp // s)\n        else:\n            # Print 'NO'\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `f` to track whether a valid solution is found.\n5. Iterate from `2` to the square root of `n` (inclusive) to find factors of `n`.\n6. For each factor `i`, check if `n` is divisible by `i` and if `n/i` is not equal to `i` (to ensure distinct factors).\n7. If `n/i` is not equal to `i`, calculate `t` as `n/i`.\n8. Iterate from `2` to the square root of `t` (inclusive) to find factors of `t`.\n9. For each factor `j` of `t`, check if `t` is divisible by `j` and if `t/j` is not equal to `j` (to ensure distinct factors).\n10. If `t/j` is not equal to `j`, check if `i`, `j`, and `t/j` are distinct integers.\n11. If `i`, `j`, and `t/j` are distinct integers, print \"YES\" and the values of `i`, `j`, and `t/j`.\n12. Set the flag `f` to `1` to indicate that a valid solution is found.\n13. If a valid solution is found, break the loop to move to the next test case.\n14. If no valid solution is found after processing all factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Initialize a flag to track whether a valid solution is found\n    f = 0\n    # Iterate from 2 to the square root of n (inclusive) to find factors of n\n    for i in range(2, int(sqrt(n)) + 1):\n        # Check if n is divisible by i and if n/i is not equal to i\n        if n % i == 0:\n            # If n/i is not equal to i, calculate t as n/i\n            if n // i!= i:\n                t = n // i\n                # Iterate from 2 to the square root of t (inclusive) to find factors of t\n                for j in range(2, int(sqrt(t)) + 1):\n                    # Check if t is divisible by j and if t/j is not equal to j\n                    if t % j == 0:\n                        # If t/j is not equal to j, check if i, j, and t/j are distinct integers\n                        if t // j!= j:\n                            # If i, j, and t/j are distinct integers, print \"YES\" and the values of i, j, and t/j\n                            if i!= j and i!= t // j:\n                                print('YES')\n                                print(i, j, t // j)\n                                # Set the flag f to 1 to indicate that a valid solution is found\n                                f = 1\n                                # Break the loop to move to the next test case\n                                break\n                # If a valid solution is found, break the loop to move to the next test case\n                if f:\n                    break\n    # If no valid solution is found after processing all factors, print \"NO\"\n    if not f:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty dictionary `primes` to store prime factors and their powers.\n4. If `n` is even, divide it by 2 until it's no longer even, and store the power of 2 in `primes`.\n5. Iterate from 3 to the square root of `n` (inclusive) with a step of 2, and for each prime `f` in this range:\n   - If `n` is divisible by `f`, divide `n` by `f` and store the power of `f` in `primes`.\n6. If `n` is greater than 1, it means `n` is a prime number, so store its power in `primes`.\n7. If the length of `primes` is greater than 2, it's possible to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n   - Initialize an empty list `ans` to store the three integers.\n   - Iterate over the prime factors and their powers in `primes`.\n   - For each prime factor `k` and its power `p`:\n     - Multiply `k` by itself `p` times and append the result to `ans`.\n     - If `ans` has two elements, break the loop.\n8. If the length of `primes` is 1, it's possible to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n` only if the power of the single prime factor is greater than 5.\n   - If the power of the single prime factor is greater than 5, calculate the three integers `a`, `b`, and `c` as `k`, `k * k`, and `k^(p-3)`, respectively, and print them.\n   - Otherwise, print \"NO\".\n9. If the length of `primes` is 0, it's impossible to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`, so print \"NO\".\n10. If the length of `primes` is 2, it's possible to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n` only if the sum of the powers of the two prime factors is greater than 3.\n    - If the sum of the powers of the two prime factors is greater than 3, calculate the three integers `a`, `b`, and `c` as the two prime factors and their product, respectively, and print them.\n    - Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\n\n# inf = open('input.txt', 'r')\n# reader = (line.rstrip() for line in inf)\nreader = (line.rstrip() for line in sys.stdin)\ninput = reader.__next__\n\nt = int(input())  # Read the number of test cases\nfor _ in range(t):\n    n = int(input())  # Read the integer n for each test case\n    primes = {}  # Initialize an empty dictionary to store prime factors and their powers\n    if not n & 1:  # If n is even\n        primes[2] = 0  # Store the power of 2 in primes\n        while not n & 1:  # Divide n by 2 until it's no longer even\n            n >>= 1\n            primes[2] += 1\n    f = 3  # Initialize the variable f to 3\n    lim = int(n ** 0.5) + 1  # Calculate the square root of n and add 1\n    while f < lim and f <= n:  # Iterate from 3 to the square root of n (inclusive) with a step of 2\n        if n % f == 0:  # If n is divisible by f\n            primes[f] = 0  # Store the power of f in primes\n            while n % f == 0:  # Divide n by f until it's no longer divisible\n                n //= f\n                primes[f] += 1\n        f += 2  # Increment f by 2\n    if n > 1:  # If n is greater than 1\n        primes[n] = 1  # Store the power of n in primes\n    if len(primes) > 2:  # If the length of primes is greater than 2\n        ans = []  # Initialize an empty list to store the three integers\n        f = 1  # Initialize the variable f to 1\n        i = 0  # Initialize the variable i to 0\n        for i, (k, p) in enumerate(primes.items()):  # Iterate over the prime factors and their powers in primes\n            f *= pow(k, p)  # Multiply k by itself p times\n            if i < 2:  # If i is less than 2\n                ans.append(f)  # Append the result to ans\n                f = 1  # Reset f to 1\n        ans.append(f)  # Append the last result to ans\n        print('YES')  # Print \"YES\"\n        print(*ans)  # Print the three integers\n    elif len(primes) == 1:  # If the length of primes is 1\n        for k, p in primes.items():  # Iterate over the prime factor and its power in primes\n            if p > 5:  # If the power of the prime factor is greater than 5\n                ans = [k, k * k, pow(k, p-3)]  # Calculate the three integers\n                print('YES')  # Print \"YES\"\n                print(*ans)  # Print the three integers\n            else:  # Otherwise\n                print('NO')  # Print \"NO\"\n    else:  # If the length of primes is 0\n        powers = sum(primes.values())  # Calculate the sum of the powers of the prime factors\n        if powers > 3:  # If the sum of the powers is greater than 3\n            fs = []  # Initialize an empty list to store the prime factors\n            for k, p in primes.items():  # Iterate over the prime factors and their powers in primes\n                fs.extend([k] * p)  # Append the prime factor to fs p times\n            ans = []  # Initialize an empty list to store the three integers\n            if fs[0]!= fs[1]:  # If the first two prime factors are different\n                ans.append(fs[0])  # Append the first prime factor to ans\n                ans.append(fs[1])  # Append the second prime factor to ans\n                rest = 2  # Set rest to 2\n            else:  # Otherwise\n                ans.append(fs[0])  # Append the first prime factor to ans\n                ans.append(fs[1] * fs[2])  # Append the product of the first two prime factors to ans\n                rest = 3  # Set rest to 3\n            c = 1  # Initialize the variable c to 1\n            for f in fs[rest:]:  # Iterate over the remaining prime factors in fs\n                c *= f  # Multiply c by the prime factor\n            ans.append(c)  # Append c to ans\n            print('YES')  # Print \"YES\"\n            print(*ans)  # Print the three integers\n        else:  # Otherwise\n            print('NO')  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find all the factors of `n` using the `fact(n)` function.\n4. If the number of factors is less than 3, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c`. Print \"NO\" and move to the next test case.\n5. Sort the factors in ascending order.\n6. Iterate through the sorted factors to find a pair of factors `f[i]` and `f[j]` such that `f[i] * f[j] == d`, where `d = n // a` and `a` is the smallest factor.\n7. If such a pair is found, print \"YES\" and the values of `a`, `f[i]`, and `f[j]`. Move to the next test case.\n8. If no such pair is found after iterating through all factors, print \"NO\" and move to the next test case.\n\nCOMMENTED CODE:\n```python\n# Define a lambda function to read a line of input and strip leading/trailing whitespace\nrr = lambda: input().strip()\n\n# Define a lambda function to read an integer from input\nrri = lambda: int(rr())\n\n# Define a lambda function to read a list of integers from input\nrrm = lambda: [int(x) for x in rr().split()]\n\n# Define a function to find all factors of a number\ndef fact(n):\n    # Initialize an empty list to store factors\n    res = []\n    # Iterate from 2 to the square root of n (inclusive)\n    for i in range(2, int(n ** 0.5) + 1):\n        # If n is divisible by i, add i and n//i to the list of factors\n        if n % i == 0:\n            res.append(i)\n            res.append(n // i)\n    # If n is a perfect square, remove the duplicate factor\n    if (int(n ** 0.5) ** 2 == n):\n        res.pop()\n    # Return the list of factors\n    return res\n\n# Define a function to solve the problem\ndef sol():\n    # Read the integer n for the current test case\n    n = rri()\n    # Find all factors of n\n    f = fact(n)\n    # If the number of factors is less than 3, it's impossible to represent n as a * b * c\n    if (len(f) < 3):\n        print(\"NO\")\n        return\n    # Sort the factors in ascending order\n    f.sort()\n    # The smallest factor is a\n    a = f[0]\n    # Calculate d = n // a\n    d = n // a\n    # Iterate through the sorted factors to find a pair of factors f[i] and f[j] such that f[i] * f[j] == d\n    for i in range(1, len(f)):\n        for j in range(i + 1, len(f)):\n            # If such a pair is found, print \"YES\" and the values of a, f[i], and f[j]\n            if f[i] * f[j] == d:\n                print(\"YES\")\n                print(a, f[i], f[j])\n                return\n    # If no such pair is found, print \"NO\"\n    print(\"NO\")\n    return\n\n# Read the number of test cases\nt = rri()\n# Iterate through each test case\nfor _ in range(t):\n    # Solve the problem for the current test case\n    sol()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all factors of `n` using the `factors` function.\n4. Convert the set of factors to a sorted list `ffactor2`.\n5. Iterate over the list `ffactor2` to find three distinct factors `a`, `b`, and `c` such that `a * b * c == n` and `a >= 2`, `b >= 2`, and `c >= 2`.\n6. If such factors are found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nimport math \nfrom functools import reduce\n\n# Function to find all factors of a number\ndef factors(n):    \n    # Use a set to store unique factors and reduce to combine the results of nested list comprehensions\n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n\n# Iterate over each test case\nfor i in range(t):\n    n = int(input())\n    # Find all factors of n\n    ffactor = (factors(n))\n    # Convert the set of factors to a sorted list\n    ffactor2 = list(set(ffactor))\n    ffactor2.sort()\n    \n    # Flag to indicate if a solution is found\n    ok = False\n    \n    # Iterate over the list of factors to find three distinct factors that multiply to n\n    for i in range(len(ffactor2)):\n        for j in range(i+1, len(ffactor2)):\n            for k in range(j+1, len(ffactor2)):\n                # Check if the current factors are greater than or equal to 2\n                if ffactor2[i] >= 2 and ffactor2[j] >= 2 and ffactor2[k] >= 2:\n                    # Check if the product of the current factors equals n\n                    if ffactor2[i] * ffactor2[j] * ffactor2[k] == n:\n                        # Set the flag to True and store the factors\n                        ok = True\n                        f = ffactor2[i]\n                        s = ffactor2[j]\n                        t = ffactor2[k]\n                        break\n            # If a solution is found, break the inner loop\n            if ok == True:\n                break\n        # If a solution is found, break the outer loop\n        if ok == True:\n            break\n    \n    # Print the result based on whether a solution is found\n    if ok == True:\n        print(\"YES\")\n        print(int(f), int(s), int(t))\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Initialize an empty list `li` to store the input numbers for each test case.\n3. Define a helper function `p2(m, a)` to find two distinct integers `i` and `m/i` such that `i * m/i = m` and `i!= m/i!= a`. The function returns a list containing these two integers if found, or \"no\" if not.\n4. Iterate over each test case, read the input number `k`, and append it to the `li` list.\n5. Iterate over each number `k` in the `li` list.\n6. If `p2(k, 1)` returns a list of two integers, it means we have found two distinct integers `i` and `m/i` such that `i * m/i = k`. We then check if `p2(l[0], l[1])` or `p2(l[1], l[0])` returns a list of two integers. If either of these conditions is true, we print \"YES\" and the three integers `l[0]`, `l[1]`, and the remaining integer found by `p2(l[0], l[1])` or `p2(l[1], l[0])`. If neither condition is true, we print \"NO\".\n7. If `p2(k, 1)` returns \"no\", it means we cannot find two distinct integers `i` and `m/i` such that `i * m/i = k`. In this case, we print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Initialize an empty list to store the input numbers for each test case\nli = []\n\n# Define a helper function to find two distinct integers i and m/i such that i * m/i = m and i!= m/i!= a\ndef p2(m, a):\n    # Iterate over all possible values of i from 2 to the square root of m\n    for i in range(2, int(m ** (0.5)) + 1):\n        # Check if m/i is an integer and i!= m/i!= a\n        if (int(m / i) == m / i) and (i!= m / i!= a) and (i!= a):\n            # If the conditions are met, return a list containing the two integers\n            return [int(i), int(m / i)]\n    # If no such integers are found, return \"no\"\n    return \"no\"\n\n# Iterate over each test case, read the input number k, and append it to the li list\nfor i in range(t):\n    li.append(int(input()))\n\n# Iterate over each number k in the li list\nfor k in li:\n    # If p2(k, 1) returns a list of two integers, it means we have found two distinct integers i and m/i such that i * m/i = k\n    if p2(k, 1)!= \"no\":\n        # Extract the two integers from the list\n        l = p2(k, 1)\n        # Check if p2(l[0], l[1]) returns a list of two integers\n        if p2(l[0], l[1])!= \"no\":\n            # If true, print \"YES\" and the three integers\n            print(\"YES\")\n            print(l[1], p2(l[0], l[1])[0], (p2(l[0], l[1])[1]))\n        # Check if p2(l[1], l[0]) returns a list of two integers\n        elif p2(l[1], l[0])!= \"no\":\n            # If true, print \"YES\" and the three integers\n            print(\"YES\")\n            print(l[0], p2(l[1], l[0])[0], (p2(l[1], l[0])[1]))\n        else:\n            # If neither condition is true, print \"NO\"\n            print(\"NO\")\n    else:\n        # If p2(k, 1) returns \"no\", it means we cannot find two distinct integers i and m/i such that i * m/i = k\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Find the square root of `n` and add 10 to it. This will be the upper limit for our factorization search.\n5. Initialize an empty list `a` to store the factors.\n6. Iterate from 2 to the upper limit (inclusive) and check if `n` is divisible by the current number `i`.\n7. If `n` is divisible by `i`, divide `n` by `i` and append `i` to the list `a`.\n8. If the length of `a` is 2, break the loop as we have found two factors.\n9. After the loop, check if the length of `a` is 2 and `n` is not 1.\n10. If the conditions in step 9 are met, check if `n` is not already in the list `a`.\n11. If `n` is not in `a`, print \"YES\" and the factors in `a` along with `n`.\n12. If `n` is in `a`, print \"NO\".\n13. If the length of `a` is not 2 or `n` is 1, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(0, t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Find the square root of n and add 10 to it\n    z = int(math.sqrt(n)) + 10\n    \n    # Initialize an empty list to store the factors\n    a = []\n    \n    # Iterate from 2 to the upper limit (inclusive)\n    for i in range(2, z + 1):\n        # Check if n is divisible by the current number i\n        if n % i == 0:\n            # If n is divisible, divide n by i and append i to the list a\n            n = n // i\n            a.append(i)\n        # If the length of a is 2, break the loop\n        if len(a) == 2:\n            break\n    \n    # Check if the length of a is 2 and n is not 1\n    if len(a) == 2 and n!= 1:\n        # Check if n is not already in the list a\n        if n not in a:\n            # If n is not in a, print \"YES\" and the factors in a along with n\n            print(\"YES\")\n            print(a[0], a[1], n)\n        else:\n            # If n is in a, print \"NO\"\n            print(\"NO\")\n    else:\n        # If the length of a is not 2 or n is 1, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the square root of `n` and store it in `root`.\n4. Initialize variables `a`, `b`, and `c` to -1.\n5. Iterate from 2 to `root` to find the first factor `a` of `n`.\n6. After finding `a`, divide `n` by `a` and update `n`.\n7. Find the square root of the updated `n` and store it in `root`.\n8. Iterate from 2 to `root` to find the factors `b` and `c` of `n` such that `b` and `c` are distinct from `a`.\n9. If `a` or `b` is not found, print \"NO\".\n10. Otherwise, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef solve(n):\n    # Find the square root of n and store it in root\n    root = int(math.sqrt(n))\n    \n    # Initialize variables a, b, and c to -1\n    a = -1\n    b = -1\n    c = 0\n    \n    # Iterate from 2 to root to find the first factor a of n\n    i = 2\n    while (i <= root):\n        # Check if n is divisible by i\n        if (n % i == 0):\n            # Store i as a and divide n by i\n            a = i\n            n = n / i\n            break\n        # Increment i\n        i = i + 1\n    \n    # Find the square root of the updated n and store it in root\n    root = int(math.sqrt(n))\n    \n    # Iterate from 2 to root to find the factors b and c of n\n    i = 2\n    while (i <= root):\n        # Check if n is divisible by i and i is not equal to a and n/i is not equal to a\n        if (n % i == 0 and i!= a and n / i!= a and i!= n / i):\n            # Store i as b and c as n/i\n            b = i\n            c = int(n / i)\n            break\n        # Increment i\n        i = i + 1\n    \n    # Check if a or b is not found\n    if (a == -1 or b == -1):\n        # Print \"NO\"\n        print(\"NO\")\n    else:\n        # Print \"YES\" and the values of a, b, and c\n        output = \"{0} {1} {2}\"\n        print(\"YES\")\n        print(output.format(a, b, c))\n\n# Read the number of test cases t\nt = int(input())\n\n# Iterate from t to 1\nwhile (t >= 1):\n    # Read the integer n for each test case\n    n = int(input())\n    # Call the solve function\n    solve(n)\n    # Decrement t\n    t = t - 1\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for the current test case from the input.\n4. Initialize an empty list `abc` to store the factors of `n`.\n5. Initialize a variable `x` to 2, which will be used to find factors of `n`.\n6. Use a while loop to find factors of `n`. The loop continues until the length of `abc` is less than 2 and `x` squared is less than `n`.\n7. Inside the while loop, check if `n` is divisible by `x` using the modulo operator (`n % x == 0`).\n8. If `n` is divisible by `x`, append `x` to the `abc` list and divide `n` by `x` using integer division (`n //= x`).\n9. Increment `x` by 1 in each iteration of the while loop.\n10. After the while loop, check if the length of `abc` is 2 and `n` is not already in the `abc` list.\n11. If the condition in step 10 is true, print \"YES\" and the elements of `abc` along with `n`.\n12. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the factors of n\n    abc = []\n    \n    # Initialize a variable x to 2, which will be used to find factors of n\n    x = 2\n    \n    # Use a while loop to find factors of n\n    while len(abc) < 2 and x*x < n:\n        # Check if n is divisible by x\n        if n % x == 0:\n            # If n is divisible by x, append x to the abc list and divide n by x\n            abc.append(x)\n            n //= x\n        # Increment x by 1 in each iteration of the while loop\n        x += 1\n    \n    # Check if the length of abc is 2 and n is not already in the abc list\n    if len(abc) == 2 and n not in abc:\n        # If the condition is true, print \"YES\" and the elements of abc along with n\n        print('YES')\n        print(*abc, n)\n    else:\n        # Otherwise, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read an integer `n` from the input.\n4. Initialize an empty list `a` (not used in the provided code, but included in the original code).\n5. Call the `printDivisors` function with `n` and `a` as arguments to find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n` or determine if it is impossible to do so.\n6. If a solution is found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Define a function to find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n\ndef printDivisors(n, a):\n    # Initialize a flag to track if a solution is found\n    f = 0\n    \n    # Start with the smallest prime number, 2\n    i = 2\n    while i * i <= n:\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Divide n by i\n            n = n // i\n            \n            # Start with the next number, i + 1\n            j = i + 1\n            while j * j <= n:\n                # Check if n is divisible by j\n                if n % j == 0:\n                    # Check if j is not equal to n // j (to ensure distinct integers)\n                    if j!= n // j:\n                        # Print \"YES\" and the values of a, b, and c\n                        print('YES')\n                        print(i, j, n // j)\n                        # Set the flag to 1 to indicate a solution is found\n                        f = 1\n                        # Break out of the inner loop\n                        break\n                # Increment j\n                j += 1\n            # If a solution is found, break out of the outer loop\n            if f == 1:\n                break\n        # Increment i\n        i += 1\n    \n    # If no solution is found, print \"NO\"\n    if f == 0:\n        print('NO')\n\n# Iterate t times to process each test case\nfor _ in range(t):\n    # Read an integer n from the input\n    n = int(input())\n    \n    # Call the printDivisors function with n and an empty list a as arguments\n    printDivisors(n, [])\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the divisors of `n` using the `divisors` function.\n4. If the number of divisors is less than 3, print \"NO\" and move to the next test case.\n5. If the number of divisors is 3 or more, print \"YES\" and the divisors.\n\nCOMMENTED CODE:\n```python\ndef main():\n    def divisors(n):\n        # Initialize an empty list to store the divisors\n        div = []\n        \n        # Iterate from 2 to the square root of n (inclusive)\n        for i in range(2, int(n**0.5) + 1):\n            # If n is divisible by i, add i to the divisors list and divide n by i\n            if n % i == 0:\n                div.append(i)\n                n //= i\n            # If we have found two divisors, break the loop\n            if len(div) == 2:\n                break\n        \n        # If n is not 1 and not already in the divisors list, add it\n        if n not in div and n!= 1:\n            div.append(n)\n        \n        return div\n\n    # Read the number of test cases\n    for _ in range(int(input())):\n        # Read the integer n for the current test case\n        n = int(input())\n        \n        # Find the divisors of n\n        d = divisors(n)\n        \n        # If the number of divisors is less than 3, print \"NO\" and move to the next test case\n        if len(d) < 3:\n            print('NO')\n            continue\n        \n        # If the number of divisors is 3 or more, print \"YES\" and the divisors\n        print('YES')\n        print(*d)\n\nmain()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `T` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `l` to store the factors of `n`.\n4. Initialize a variable `ans` to 'YES', assuming it's possible to find three distinct integers `a`, `b`, `c` such that `a \u22c5 b \u22c5 c = n`.\n5. Initialize a variable `hello` to 1, which will be used to find factors of `n`.\n6. Iterate three times to find three distinct factors of `n`.\n   - In each iteration, call the `check` function to find a factor `hello` of `n` greater than the current value of `hello`.\n   - If `hello` is not found, set `ans` to 'NO' and break the loop if `n` is less than 2.\n   - If `hello` is found, append it to the list `l` and update `n` by dividing it by `hello`.\n7. If `ans` is still 'YES' after the loop, print 'YES' and the three factors stored in `l`.\n8. If `ans` is 'NO', print 'NO'.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nT = int(input())\n\n# Function to find a factor of n greater than p\ndef check(n, p):\n    # Initialize ans to -1, indicating no factor found\n    ans = -1\n    # Iterate from p+1 to the square root of n\n    for i in range(p+1, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If divisible, store i as the factor and break the loop\n            ans = i\n            break\n    # Return the found factor or -1 if not found\n    return ans\n\n# Iterate over each test case\nfor i in range(T):\n    # Initialize an empty list to store factors\n    l = []\n    # Read the integer n for the current test case\n    n = int(input())\n    # Initialize ans to 'YES', assuming it's possible to find three distinct factors\n    ans = 'YES'\n    # Initialize hello to 1, which will be used to find factors of n\n    hello = 1\n    # Iterate three times to find three distinct factors of n\n    for j in range(3):\n        # Find a factor hello of n greater than the current value of hello\n        hello = check(n, hello)\n        # If no factor is found and n is less than 2, set ans to 'NO' and break the loop\n        if hello == -1 and n < 2:\n            ans = 'NO'\n            break\n        # If no factor is found, set hello to n and append it to the list l\n        else:\n            if hello == -1 or j == 2:\n                hello = n\n                # Check if the last element in l is the same as hello\n                if len(l) > 0 and l[-1] == hello:\n                    # If the same, set ans to 'NO' and break the loop\n                    ans = 'NO'\n                    break\n            # Update n by dividing it by hello\n            n = n // hello\n            # Append hello to the list l\n            l.append(hello)\n    # Print the result for the current test case\n    print(ans)\n    # If ans is 'YES', print the three factors stored in l\n    if ans == 'YES':\n        print(str(l[0]) +'' + str(l[1]) +'' + str(l[2]))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a `for` loop.\n3. Read the value of `n` for each test case from the input.\n4. Initialize variables `a`, `b`, and `c` to 0.\n5. Iterate from 2 to the square root of `n` (inclusive) to find the first factor `a` of `n`.\n6. If `a` is 0, it means `n` is a prime number or has no factors in the given range, so print \"NO\" and continue to the next test case.\n7. Otherwise, divide `n` by `a` to update `n`.\n8. Iterate from `a+1` to the square root of `n` (inclusive) to find the factors `b` and `c` of `n`.\n9. If `b` is 0, it means `n` cannot be represented as a product of three distinct integers in the given range, so print \"NO\" and continue to the next test case.\n10. Otherwise, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor i in range(t):  # Iterate over each test case\n    n = int(input())  # Read the value of n for each test case\n    a = 0  # Initialize variable a\n    b = 0  # Initialize variable b\n    c = 0  # Initialize variable c\n\n    # Find the first factor a of n\n    for i in range(2, int(n ** 0.5) + 2):\n        if n % i == 0:  # Check if n is divisible by i\n            n //= i  # Divide n by i\n            a = i  # Update a\n            break  # Exit the loop\n\n    # If a is 0, it means n is a prime number or has no factors in the given range\n    if a == 0:\n        print(\"NO\")  # Print \"NO\"\n        continue  # Skip to the next test case\n\n    # Find the factors b and c of n\n    for j in range(a + 1, int(n ** 0.5) + 2):\n        if n % j == 0 and n // j!= j and n // j!= a:  # Check if n is divisible by j and j is not equal to n//j or a\n            b = j  # Update b\n            c = n // j  # Update c\n            break  # Exit the loop\n\n    # If b is 0, it means n cannot be represented as a product of three distinct integers in the given range\n    if b == 0:\n        print(\"NO\")  # Print \"NO\"\n        continue  # Skip to the next test case\n\n    # Print \"YES\" and the values of a, b, and c\n    print(\"YES\")\n    print(a, b, c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize a list `l` to store the factors of `n`.\n4. Find the first prime factor `c` of `n` by iterating from 2 to the square root of `n`.\n5. If `n` is a prime number, print \"NO\" and move to the next test case.\n6. Find the second prime factor by iterating from `c+1` to the square root of `n`.\n7. If `n` is not a product of two distinct prime factors, print \"NO\" and move to the next test case.\n8. Check if the remaining factor `sn//(l[0]*l[1])` is a prime factor of `n`. If it is not, add it to the list `l`.\n9. If the list `l` has three distinct elements, print \"YES\" and the elements of `l`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nwhile t > 0:\n    t -= 1\n\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Store the original value of n\n    sn = n\n\n    # Initialize a list to store the factors of n\n    l = []\n\n    # Find the first prime factor c of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Add i to the list of factors\n            l.append(i)\n            # Update n by dividing it by i\n            n = n // i\n            # Store the first prime factor c\n            c = i\n            # Break the loop as we have found the first prime factor\n            break\n\n    # If n is a prime number, print \"NO\" and move to the next test case\n    else:\n        print(\"NO\")\n        continue\n\n    # Find the second prime factor\n    for i in range(c + 1, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Add i to the list of factors\n            l.append(i)\n            # Update n by dividing it by i\n            n = n // i\n            # Break the loop as we have found the second prime factor\n            break\n\n    # If n is not a product of two distinct prime factors, print \"NO\" and move to the next test case\n    else:\n        print(\"NO\")\n        continue\n\n    # Check if the remaining factor sn//(l[0]*l[1]) is a prime factor of n\n    if (sn // (l[0] * l[1]))!= 1 and (sn // (l[0] * l[1]) not in l):\n        # Add the remaining factor to the list of factors\n        l.append(sn // (l[0] * l[1]))\n        # Print \"YES\" and the elements of the list\n        print(\"YES\")\n        print(*l)\n    else:\n        # Print \"NO\" if the remaining factor is not a prime factor of n\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, find the prime factors of the given number `n` using the `fac(n)` function.\n3. If the number of prime factors is less than 3, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n4. Otherwise, iterate through the prime factors to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n5. If such integers are found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\n\n# Function to enable fast input/output\ndef fastio():\n    # Import necessary modules\n    from io import StringIO\n    from atexit import register\n    # Redirect standard input and output\n    global input\n    sys.stdin = StringIO(sys.stdin.read())\n    input = lambda : sys.stdin.readline().rstrip('\\r\\n')\n    sys.stdout = StringIO()\n    # Register a function to write the output to the standard output at the end\n    register(lambda : sys.__stdout__.write(sys.stdout.getvalue()))\n\n# Enable fast input/output\nfastio()\n\n# Define constants\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\n# Import necessary modules\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\n# Function to find three distinct integers a, b, c such that a * b * c = n\ndef ok(n):\n    # This function is not used in the code, so it's left empty\n    pass\n\n# Function to find the prime factors of a number\ndef fac(n):\n    # Initialize an empty list to store the prime factors\n    res = []\n    # Iterate from 2 to the square root of n\n    for i in range(2, int(n ** 0.5 + 1)):\n        # If n is divisible by i, add i to the list of prime factors\n        if n % i:\n            continue\n        res.append(i)\n        # If i^2 is not equal to n, add n // i to the list of prime factors\n        if i ** 2!= n:\n            res.append(n // i)\n    # Return the list of prime factors in sorted order\n    return sorted(res)\n\n# Main function to solve the problem\ndef main():\n    # Read the number of test cases\n    t, = I()\n    # Iterate through each test case\n    while t:\n        t -= 1\n        # Read the number for the current test case\n        n, = I()\n        # Initialize a flag to indicate whether a solution is found\n        ans = 'YES'\n        # Find the prime factors of the current number\n        f = fac(n)\n        # If the number of prime factors is less than 3, it's impossible to represent n as a product of three distinct integers\n        if len(f) < 3:\n            print('NO')\n            continue\n        # Get the length of the list of prime factors\n        m = len(f)\n        # Iterate through the prime factors to find three distinct integers a, b, and c such that a * b * c = n\n        for i in range(m):\n            for j in range(i + 1, m):\n                # Calculate the value of k as n // (f[i] * f[j])\n                k = n // (f[i] * f[j])\n                # Check if k is in the list of prime factors and k is not equal to f[i] or f[j]\n                if k in f and k!= f[i] and k!= f[j]:\n                    # If such integers are found, print \"YES\" and the values of a, b, and c\n                    print('YES')\n                    print(f[i], f[j], k)\n                    break\n            else:\n                # If no solution is found, continue to the next iteration\n                continue\n            # If a solution is found, break the loop\n            break\n        else:\n            # If no solution is found after iterating through all prime factors, print \"NO\"\n            print('NO')\n\n# Call the main function\nmain()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `ans` to store the factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find the first factor of `n`.\n6. If `n` is divisible by the current number `i` and `i` is not already in `ans`, divide `n` by `i` and add `i` to `ans`.\n7. Repeat step 5 to find the second factor of `n`.\n8. If `ans` has less than 2 elements or `n` is 1 or `n` is already in `ans`, print \"NO\".\n9. Otherwise, add `n` to `ans` and print \"YES\" followed by the elements of `ans`.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to calculate the factorial of a number\ndef fact(n):\n    # Initialize the answer as 1\n    ans = 1\n    # Iterate from 2 to n (inclusive) and multiply the answer by each number\n    for i in range(2, n+1):\n        ans *= i\n    return ans\n\n# Function to calculate the combination of n choose c\ndef comb(n, c):\n    # Return the combination using the formula n! / (c! * (n-c)!)\n    return fact(n) // (fact(n-c) * c)\n\n# Read the number of test cases from the input\nfor _ in range(int(input())):\n    # Read the integer n from the input\n    n = int(input())\n    # Initialize an empty list to store the factors of n\n    ans = []\n    # Iterate from 2 to the square root of n (inclusive) to find the first factor of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if n is divisible by the current number i and i is not already in ans\n        if n % i == 0 and i not in ans:\n            # Divide n by i and add i to ans\n            n //= i\n            ans.append(i)\n            # Break the loop as we have found the first factor\n            break\n    # Repeat the process to find the second factor of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i not in ans:\n            n //= i\n            ans.append(i)\n            break\n    # Check if it is impossible to represent n as a * b * c\n    if len(ans) < 2 or n == 1 or n in ans:\n        # Print \"NO\" if it is impossible\n        print('NO')\n    else:\n        # Add n to ans\n        ans.append(n)\n        # Print \"YES\" followed by the elements of ans\n        print('YES')\n        print(ans[0], ans[1], ans[2])\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Generate all factors of `n` using the `getprod` function.\n4. If the number of factors is less than or equal to 2, it is impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n5. Otherwise, sort the factors in ascending order.\n6. Iterate through the factors to find three distinct factors `a`, `b`, and `c` such that `a * b * c == n` and `a >= 2`, `b >= 2`, and `c >= 2`.\n7. If such factors are found, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef getprod(n):\n    # Generate all factors of n\n    res = []\n    i = 1\n    while(i*i <= n):\n        if(n%i == 0):\n            # If n is divisible by i, add i and n//i to the result list\n            res.append(i)\n            if(n//i!= i):\n                res.append(n//i)\n        i += 1\n    return res\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    num = int(input())\n    # Generate all factors of n\n    res = getprod(num)\n    \n    # If the number of factors is less than or equal to 2, it is impossible to represent n as a product of three distinct integers\n    if(len(res) <= 2):\n        print('NO')\n    else:\n        # Sort the factors in ascending order\n        res.sort()\n        \n        # Initialize variables to store the factors a, b, and c\n        a,b,c = -1,-1,-1\n        # Initialize a flag to track whether the factors are found\n        flag = 0\n        # Initialize a variable to iterate through the factors\n        i = 0\n        # Get the length of the factors list\n        n = len(res)\n        \n        # Iterate through the factors to find three distinct factors a, b, and c such that a * b * c == n and a >= 2, b >= 2, and c >= 2\n        while(i < n):\n            # Initialize variables to iterate through the remaining factors\n            j,k = i+1,n-1\n            # Iterate through the remaining factors to find the correct factors a, b, and c\n            while(j < k):\n                # Calculate the product of the current factors\n                x = res[i]*res[j]*res[k]\n                # If the product is equal to n and all factors are greater than or equal to 2, update the factors a, b, and c and set the flag to 1\n                if(x == num and res[i]>= 2 and res[j]>= 2 and res[k]>= 2):\n                    a,b,c = res[i],res[j],res[k]\n                    flag = 1\n                    break\n                # If the product is less than n, increment j to increase the product\n                elif(x < num):\n                    j += 1\n                # If the product is greater than n, decrement k to decrease the product\n                else:\n                    k -= 1\n            # If the factors are found, break the loop\n            if(flag == 1):\n                break\n            # Increment i to move to the next factor\n            i += 1\n        # If the factors are not found, print \"NO\"\n        if(a == -1):\n            print('NO')\n        # Otherwise, print \"YES\" and the values of a, b, and c\n        else:\n            print('YES')\n            print(a,b,c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n`.\n3. Find all factors of `n` in the range `[2, sqrt(n)]` and store them in a list `fac`.\n4. If `fac` is not empty, proceed to find three distinct integers `a`, `b`, `c` such that `a * b * c = n`.\n5. Initialize `x` as the second element of the first factor pair in `fac`.\n6. Iterate from `2` to `sqrt(x)` to find a factor `i` of `x` that is not equal to the first factor `fac[0][0]`.\n7. If such a factor `i` is found and `i` is not equal to `x // i`, print \"YES\" and the three integers `fac[0][0]`, `i`, and `x // i`.\n8. If no such factor `i` is found, print \"NO\".\n9. If `fac` is empty, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nI = sys.stdin.readline  # Import readline function from sys module and assign it to I\n\nans = \"\"  # Initialize an empty string to store the output for all test cases\n\n# Iterate over each test case\nfor _ in range(int(I())):\n    n = int(input())  # Read the integer n for the current test case\n\n    # Find all factors of n in the range [2, sqrt(n)] and store them in a list fac\n    fac = [(i, n // i) for i in range(2, int(n ** 0.5) + 1) if n % i == 0]\n\n    # If fac is not empty, proceed to find three distinct integers a, b, c such that a * b * c = n\n    if len(fac)!= 0:\n        x = fac[0][1]  # Initialize x as the second element of the first factor pair in fac\n        flag = 1  # Initialize a flag to track whether a valid solution is found\n\n        # Iterate from 2 to sqrt(x) to find a factor i of x that is not equal to the first factor fac[0][0]\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0 and i!= fac[0][0]:\n                if i!= x // i:  # Check if i is not equal to x // i\n                    # If a valid solution is found, print \"YES\" and the three integers fac[0][0], i, and x // i\n                    ans += \"YES\\n\"\n                    ans += \"{} {} {}\\n\".format(fac[0][0], i, x // i)\n                    flag = 0  # Set the flag to 0 to indicate that a valid solution is found\n                    break\n\n        # If no valid solution is found, print \"NO\"\n        if flag:\n            ans += \"NO\\n\"\n\n    # If fac is empty, print \"NO\"\n    else:\n        ans += \"NO\\n\"\n\n# Print the output for all test cases\nprint(ans)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, T.\n2. For each test case, read the number N.\n3. Initialize an empty list L to store the prime factors of N.\n4. While N is divisible by 2, append 2 to L and divide N by 2.\n5. Iterate from 3 to the square root of N (inclusive) with a step of 2. For each i, while N is divisible by i, append i to L and divide N by i.\n6. If N is greater than 2 after the above steps, append N to L.\n7. If the length of L is less than 3, print 'NO'.\n8. Otherwise, assign the first element of L to t1, the second element to t2, and initialize t3 to 1.\n9. If t1 and t2 are the same, assign t2 to be the product of t2 and the next element in L, and then multiply all remaining elements in L to get t3.\n10. Otherwise, multiply all elements in L (except the first two) to get t3.\n11. Check if t1, t2, and t3 are distinct and greater than 1. If they are, print 'YES' and the values of t1, t2, and t3. Otherwise, print 'NO'.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nT = int(input())\n\n# Iterate over each test case\nfor _ in range(0, T):\n    # Read the number N\n    N = int(input())\n\n    # Initialize an empty list L to store the prime factors of N\n    L = []\n\n    # While N is divisible by 2, append 2 to L and divide N by 2\n    while (N % 2 == 0):\n        L.append(2)\n        N = N // 2\n\n    # Iterate from 3 to the square root of N (inclusive) with a step of 2\n    for i in range(3, int(math.sqrt(N)) + 1, 2):\n        # While N is divisible by i, append i to L and divide N by i\n        while (N % i == 0):\n            L.append(i)\n            N = N // i\n\n    # If N is greater than 2 after the above steps, append N to L\n    if (N > 2):\n        L.append(N)\n\n    # If the length of L is less than 3, print 'NO'\n    if (len(L) < 3):\n        print('NO')\n    else:\n        # Assign the first element of L to t1, the second element to t2, and initialize t3 to 1\n        t1 = L[0]\n        t2 = L[1]\n        t3 = 1\n\n        # If t1 and t2 are the same, assign t2 to be the product of t2 and the next element in L, and then multiply all remaining elements in L to get t3\n        if (L[1] == L[0]):\n            t2 = L[1] * L[2]\n            for j in range(3, len(L)):\n                t3 *= L[j]\n        # Otherwise, multiply all elements in L (except the first two) to get t3\n        else:\n            for j in range(2, len(L)):\n                t3 *= L[j]\n\n        # Check if t1, t2, and t3 are distinct and greater than 1\n        if (t1!= t2 and t2!= t3 and t1!= t3 and t1 > 1 and t2 > 1 and t3 > 1):\n            # If they are, print 'YES' and the values of t1, t2, and t3\n            print('YES')\n            print(t1, t2, t3)\n        else:\n            # Otherwise, print 'NO'\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `fact` to store the prime factors of `n`.\n4. While `n` is divisible by 2, append 2 to `fact` and divide `n` by 2.\n5. Iterate from 3 to the square root of `n` (inclusive) with a step of 2. For each `i` in this range, while `n` is divisible by `i`, append `i` to `fact` and divide `n` by `i`.\n6. If `n` is greater than 2, append `n` to `fact`.\n7. Remove duplicates from `fact` by converting it to a set and back to a list.\n8. If the length of `fact` is 1, check if the count of the only element is greater than 4. If so, calculate the remaining factor and check if it's greater than 2 and not equal to the other two factors. If all conditions are met, print \"YES\" and the three factors; otherwise, print \"NO\".\n9. If the length of `fact` is 2, calculate the product of the two factors and check if the count of either factor is greater than or equal to 2. If so, calculate the remaining factor and check if it's greater than 2 and not equal to the other two factors. If all conditions are met, print \"YES\" and the three factors; otherwise, print \"NO\".\n10. If the length of `fact` is greater than 2, calculate the product of the first two factors and check if the remaining factor is greater than 2 and not equal to the other two factors. If all conditions are met, print \"YES\" and the three factors; otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n# Read the number of test cases\nt = int(input())\nfor q in range(t):\n    # Read the integer n for each test case\n    n = int(input())\n    # Initialize an empty list to store prime factors\n    m = n\n    fact = []\n    # While n is divisible by 2, append 2 to fact and divide n by 2\n    while m % 2 == 0:\n        fact.append(2)\n        m = m / 2\n    # Iterate from 3 to the square root of n (inclusive) with a step of 2\n    for i in range(3, int(math.sqrt(m)) + 1, 2):\n        # While n is divisible by i, append i to fact and divide n by i\n        while m % i == 0:\n            fact.append(i)\n            m = m / i\n    # If n is greater than 2, append n to fact\n    if m > 2:\n        fact.append(m)\n    # Remove duplicates from fact\n    dist = list(set(fact))\n    # If the length of fact is 1\n    if len(dist) == 1:\n        # Check if the count of the only element is greater than 4\n        if fact.count(dist[0]) > 4:\n            # Calculate the remaining factor\n            o = dist[0]\n            t = dist[0] * dist[0]\n            # Check if the remaining factor is greater than 2 and not equal to the other two factors\n            if (n / (o * t)) > 2 and int((n / (o * t)))!= o and int((n / (o * t)))!= t:\n                # Print \"YES\" and the three factors\n                print('YES')\n                print(int(o), int(t), int((n / (o * t))))\n            else:\n                # Print \"NO\"\n                print('NO')\n        else:\n            # Print \"NO\"\n            print('NO')\n    # If the length of fact is 2\n    elif len(dist) == 2:\n        # Calculate the product of the two factors\n        o = dist[0]\n        t = dist[1]\n        # Check if the count of either factor is greater than or equal to 2\n        if (fact.count(o) + fact.count(t)) >= 4:\n            # Calculate the remaining factor\n            if (n / (o * t)) > 2 and int((n / (o * t)))!= o and int((n / (o * t)))!= t:\n                # Print \"YES\" and the three factors\n                print('YES')\n                print(int(o), int(t), int((n / (o * t))))\n            else:\n                # Print \"NO\"\n                print('NO')\n        else:\n            # Print \"NO\"\n            print('NO')\n    # If the length of fact is greater than 2\n    if len(dist) > 2:\n        # Calculate the product of the first two factors\n        o = dist[0]\n        t = dist[1]\n        # Check if the remaining factor is greater than 2 and not equal to the other two factors\n        if (n / (o * t)) > 2 and int((n / (o * t)))!= o and int((n / (o * t)))!= t:\n            # Print \"YES\" and the three factors\n            print('YES')\n            print(int(o), int(t), int((n / (o * t))))\n        else:\n            # Print \"NO\"\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate through each test case, reading the integer `n`.\n3. Initialize an empty list `tmp` to store the prime factors of `n`.\n4. Iterate from `i = 2` to the square root of `n` to find prime factors.\n5. If `n` is divisible by `i`, add `i` to the `tmp` list and divide `n` by `i`.\n6. If the length of `tmp` is 3, break the loop as we have found three distinct prime factors.\n7. If the length of `tmp` is less than 3, continue to the next step.\n8. If the length of `tmp` is 2, check if there exists a prime factor `x` such that `n / (tmp[0] * tmp[1]) == x`. If found, add `x` to `tmp` and break the loop.\n9. If the length of `tmp` is still less than 3, check if `n` can be represented as a product of three distinct integers. If not, append \"NO\" to the `ans` list.\n10. If `n` can be represented as a product of three distinct integers, append \"YES\" to the `ans` list and store the three integers in the `andsindex` list.\n11. Repeat steps 2-10 for all test cases.\n12. Print the result for each test case.\n\nCOMMENTED CODE:\n```python\nimport sys\nimport math\ninput = sys.stdin.readline\nins = lambda: input().rstrip()\nini = lambda: int(input().rstrip())\ninm = lambda: map(int, input().split())\ninl = lambda: list(map(int, input().split()))\n\nt = ini()\nans = []\nandsindex = [0] * t\nfor _ in range(t):\n    n = ini()\n    i = 2\n    tmp = []  # list to store prime factors\n    while n >= i * i:\n        if i == 5 and n % 5 == 0 and 4 in tmp:  # special case for 5 and 4\n            tmp.remove(4)\n        if n % i == 0:  # if n is divisible by i\n            tmp.append(i)  # add i to tmp\n            n //= i  # divide n by i\n        if len(tmp) == 3:  # if we have found three distinct prime factors\n            break\n        i += 1\n    if len(tmp) <= 1:  # if we cannot find three distinct prime factors\n        ans.append(\"NO\")  # append \"NO\" to ans\n    elif len(tmp) >= 2:  # if we have found two or more prime factors\n        if len(tmp) == 3:  # if we have found exactly three prime factors\n            y = (n / (tmp[0] * tmp[2])).is_integer()  # check if n / (tmp[0] * tmp[2]) is an integer\n            if tmp[0] * tmp[1] * tmp[2] == n:  # if n can be represented as a product of three distinct integers\n                ans.append(\"YES\")  # append \"YES\" to ans\n                andsindex[len(ans) - 1] = f\"{tmp[0]} {tmp[1]} {tmp[2]}\"  # store the three integers in andsindex\n                continue\n            elif y and n / (tmp[0] * tmp[2]) not in tmp:  # if n / (tmp[0] * tmp[2]) is an integer and not in tmp\n                ans.append(\"YES\")  # append \"YES\" to ans\n                andsindex[len(ans) - 1] = f\"{tmp[0]} {tmp[2]} {n // (tmp[0] * tmp[2])}\"  # store the three integers in andsindex\n                continue\n        x = (n / (tmp[0] * tmp[1])).is_integer()  # check if n / (tmp[0] * tmp[1]) is an integer\n        if x and n / (tmp[0] * tmp[1]) not in tmp:  # if n / (tmp[0] * tmp[1]) is an integer and not in tmp\n            ans.append(\"YES\")  # append \"YES\" to ans\n            andsindex[len(ans) - 1] = f\"{tmp[0]} {tmp[1]} {n // (tmp[0] * tmp[1])}\"  # store the three integers in andsindex\n        else:  # if n cannot be represented as a product of three distinct integers\n            ans.append(\"NO\")  # append \"NO\" to ans\nfor i in range(t):\n    print(ans[i])\n    if ans[i] == \"YES\":  # if the result is \"YES\"\n        print(andsindex[i])  # print the three integers\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `ar` to store the prime factors of `n`.\n5. Initialize a variable `i` to 2, which will be used to find prime factors of `n`.\n6. While `i` squared is less than `n` and the length of `ar` is less than 2, perform the following steps:\n   - Check if `n` is divisible by `i`. If it is, append `i` to `ar` and divide `n` by `i`.\n   - Increment `i` by 1.\n7. If the length of `ar` is 2, it means we have found two prime factors of `n`. Print \"YES\" and then print the two prime factors and the remaining value of `n`.\n8. If the length of `ar` is not 2, it means we cannot represent `n` as a product of three distinct integers `a`, `b`, and `c` such that `2 \u2264 a, b, c`. Print \"NO\".\n\nCOMMENTED CODE:\n```python\nI = input  # function to read input from the user\npr = print  # function to print output to the user\n\ndef main():\n    # Read the number of test cases\n    for _ in range(int(I())):\n        # Initialize an empty list to store prime factors\n        ar = []\n        # Read the integer n from the input\n        n, i = int(I()), 2\n        # Find prime factors of n\n        while i * i < n and len(ar) < 2:\n            # Check if n is divisible by i\n            if n % i == 0:\n                # If divisible, append i to ar and divide n by i\n                ar.append(i)\n                n //= i\n            # Increment i by 1\n            i += 1\n        # Check if we have found two prime factors\n        if len(ar) == 2:\n            # Print \"YES\" and the two prime factors and the remaining value of n\n            pr('YES')\n            pr(*ar, n)\n        else:\n            # If not, print \"NO\"\n            pr('NO')\nmain()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty set `st` to store prime factors.\n4. Iterate from 2 to the square root of `n` (inclusive) to find the first prime factor `i` of `n` that is not in `st`. Store `i` in `st` and divide `n` by `i`.\n5. Repeat step 4 to find the second prime factor `i` of `n` that is not in `st`. Store `i` in `st` and divide `n` by `i`.\n6. If `n` is 1 or if `n` is in `st` or if the size of `st` is less than 2, print \"NO\" and return.\n7. Otherwise, print \"YES\" and the three distinct integers `a`, `b`, `c` such that `a * b * c = n`. The integers are the elements of `st` plus `n`.\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin, stdout\nfrom math import sqrt\n\ndef solve():\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty set to store prime factors\n    st = set()\n    \n    # Find the first prime factor i of n that is not in st\n    for i in range(2, int(sqrt(n)) + 1):\n        # Check if n is divisible by i and i is not in st\n        if n % i == 0 and i not in st:\n            # Store i in st and divide n by i\n            st.add(i)\n            n /= i\n            # Break the loop as we have found the first prime factor\n            break\n    \n    # Find the second prime factor i of n that is not in st\n    for i in range(2, int(sqrt(n)) + 1):\n        # Check if n is divisible by i and i is not in st\n        if n % i == 0 and i not in st:\n            # Store i in st and divide n by i\n            st.add(i)\n            n /= i\n            # Break the loop as we have found the second prime factor\n            break\n    \n    # Check if n is 1 or if n is in st or if the size of st is less than 2\n    if n == 1 or n in st or len(st) < 2:\n        # Print \"NO\" and return\n        print(\"NO\")\n        return 0\n    else:\n        # Print \"YES\" and the three distinct integers a, b, c such that a * b * c = n\n        print(\"YES\")\n        A = []\n        # Add the elements of st to A\n        for i in st: A.append(int(i))\n        # Add n to A\n        A.append(int(n))\n        # Print the elements of A\n        print(A[0], A[1], A[2])\n    return 0\n\n# Read the number of test cases t\nt = int(input())\n# Iterate over the test cases\nfor i in range(t):\n    # Call the solve function for the current test case\n    solve()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `flag` to track whether a valid solution is found.\n5. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n6. For each factor `i`, check if `n` is divisible by `i` and if `i` is not equal to `n//i` (to ensure distinct factors).\n7. If `i` has distinct factors `a` and `b` (obtained using the `fact` function), and `n//i` has distinct factors `c` and `d`, check if `a`, `b`, and `c` are distinct from `n//i` and each other.\n8. If a valid solution is found, print \"YES\" along with the values of `a`, `b`, and `c` or `c`, `d`, and `i`, and set `flag` to `True`.\n9. If no valid solution is found after iterating over all factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Function to find distinct factors of a number\ndef fact(k):\n    # Iterate from 2 to the square root of k (inclusive) to find factors\n    for i in range(2,(int(sqrt(k)+1))):\n        # Check if k is divisible by i\n        if k%i == 0:\n            # Check if i is not equal to k//i (to ensure distinct factors)\n            if k//i!= i:\n                # Return the distinct factors\n                f = k//i\n                return f,i\n    # If no distinct factors are found, return 0,0\n    return 0,0\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    # Iterate over each test case\n    for __ in range(t):\n        # Read the integer n for the current test case\n        n  = int(input())\n        # Initialize a flag to track whether a valid solution is found\n        flag = False\n        # Iterate from 2 to the square root of n (inclusive) to find factors\n        for i in range(2,(int(sqrt(n)+1))):\n            # Check if n is divisible by i\n            if n%i == 0:\n                # Check if i is not equal to n//i (to ensure distinct factors)\n                if n//i!= i:\n                    # Find distinct factors of i\n                    f = n//i\n                    a,b = fact(i)\n                    # Find distinct factors of f\n                    c,d = fact(f)\n                    # Check if a, b, and c are distinct from n//i and each other\n                    if a!= f and b!= f and(a!= 0):\n                        # Print \"YES\" along with the values of a, b, and c\n                        print(\"YES\")\n                        print(a,b,f)\n                        # Set flag to True\n                        flag = True\n                        # Break the loop as a valid solution is found\n                        break\n                    # Check if c, d, and i are distinct from n and each other\n                    elif c!= i and d!= i and(d!= 0):\n                        # Print \"YES\" along with the values of c, d, and i\n                        print(\"YES\")\n                        print(c,d,i)\n                        # Set flag to True\n                        flag = True\n                        # Break the loop as a valid solution is found\n                        break\n        # If no valid solution is found, print \"NO\"\n        if not flag:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read an integer `n` from the input.\n4. Initialize variables `a`, `b`, and `c` to 0. These variables will store the three distinct integers that multiply to `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find the first factor `a` of `n` such that `a >= 2`.\n6. If no such factor is found, print \"NO\" and move to the next test case.\n7. If a factor `a` is found, divide `n` by `a` and store the result in `n`.\n8. Iterate from 2 to the square root of `n` (inclusive) to find the second factor `b` of `n` such that `b >= 2` and `b!= a`.\n9. If no such factor is found, print \"NO\" and move to the next test case.\n10. If a factor `b` is found, divide `n` by `b` and store the result in `n`.\n11. If `n` is not equal to `b`, it means that `n` has been completely factored into `a`, `b`, and `c`. Print \"YES\" and the values of `a`, `b`, and `n` (which is `c`).\n12. If `n` is equal to `b`, it means that `n` cannot be factored into three distinct integers `a`, `b`, and `c` such that `a >= 2`, `b >= 2`, and `c >= 2`. Print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Initialize variables\n    a = 0\n    b = 0\n    n = int(input())  # Read the integer n for the current test case\n\n    # Find the first factor a of n such that a >= 2\n    for j in range(int(math.sqrt(n)) - 1):\n        if n % (j + 2) == 0:  # Check if j+2 is a factor of n\n            n = n // (j + 2)  # Divide n by the factor\n            a = j + 2  # Store the factor in a\n            break  # Exit the loop since we found a factor\n\n    # If no factor is found, print \"NO\"\n    if a == 0:\n        print(\"NO\")\n    else:\n        # Find the second factor b of n such that b >= 2 and b!= a\n        for j in range(int(math.sqrt(n)) - 2):\n            if n % (j + 3) == 0 and j + 3!= a:  # Check if j+3 is a factor of n and j+3!= a\n                n = n // (j + 3)  # Divide n by the factor\n                if n!= j + 3:  # Check if n is not equal to j+3\n                    b = j + 3  # Store the factor in b\n                    break  # Exit the loop since we found a factor\n\n        # If no factor is found, print \"NO\"\n        if b == 0:\n            print(\"NO\")\n        else:\n            # Print \"YES\" and the values of a, b, and n (which is c)\n            print(\"YES\")\n            print(a, b, n)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for the current test case from the input.\n4. Initialize variables `i` to 2, `fl` to 0, and an empty list `divs` to store the divisors of `n`.\n5. Use a while loop to find the divisors of `n`. The loop continues until `i*i` is greater than `n`.\n6. Inside the loop, check if `n` is divisible by `i`. If it is, append `i` to the `divs` list and divide `n` by `i`.\n7. If the length of `divs` is 2, break the loop as we have found two distinct divisors.\n8. If the length of `divs` is less than 2 after the loop, set `fl` to 1, indicating that it is impossible to represent `n` as a product of three distinct integers.\n9. If `fl` is 1, print \"NO\" and continue to the next test case.\n10. If `n` is equal to 1 or if `n` is equal to any of the divisors in `divs`, print \"NO\" as it is impossible to represent `n` as a product of three distinct integers.\n11. Otherwise, append `n` to the `divs` list and print \"YES\" followed by the divisors in `divs`.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor xx in range(t):\n    # Read the value of n for the current test case\n    n = int(input())\n    \n    # Initialize variables\n    i = 2  # starting divisor\n    fl = 0  # flag to check if it is possible to represent n as a product of three distinct integers\n    divs = []  # list to store the divisors of n\n    \n    # Use a while loop to find the divisors of n\n    while(i*i <= n):\n        # Check if n is divisible by i\n        if n%i == 0:\n            # If n is divisible by i, append i to the divs list and divide n by i\n            divs.append(i)\n            n//=i\n        # If the length of divs is 2, break the loop as we have found two distinct divisors\n        if len(divs) == 2:\n            break\n        # Increment i by 1\n        i += 1\n    \n    # If the length of divs is less than 2, set fl to 1, indicating that it is impossible to represent n as a product of three distinct integers\n    if len(divs) < 2: \n        fl = 1\n    \n    # If fl is 1, print \"NO\" and continue to the next test case\n    if fl == 1:\n        print(\"NO\")\n        continue\n    \n    # If n is equal to 1 or if n is equal to any of the divisors in divs, print \"NO\" as it is impossible to represent n as a product of three distinct integers\n    kr = n\n    if kr == 1 or kr == divs[0] or kr == divs[1]:\n        print(\"NO\")\n        continue\n    \n    # Otherwise, append n to the divs list and print \"YES\" followed by the divisors in divs\n    else:\n        divs.append(kr)\n        print(\"YES\")\n        print(\" \".join([str(v) for v in divs]))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    }
]