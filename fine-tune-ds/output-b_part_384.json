[
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `l` to store the test case values.\n4. Iterate through each test case value in `l` and call the `pro` function with the current value `j`.\n5. In the `pro` function, iterate through all integers `a` from 2 to the cube root of `j` (inclusive).\n6. For each `a`, check if `j` is divisible by `a` (i.e., `j % a == 0`).\n7. If `j` is divisible by `a`, iterate through all integers `b` from `a + 1` to the square root of `j` (inclusive).\n8. For each `b`, check if `(j // a)` is divisible by `b` (i.e., `(j // a) % b == 0`) and if `(j // a) // b` is not equal to `a` and not equal to the square root of `(j // a)`.\n9. If all conditions in step 8 are met, print \"YES\" and the values of `a`, `b`, and `(j // a) // b`.\n10. If no such `a` and `b` are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef pro(j):  # Function to find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n\n    for a in range(2, int(j ** (1 / 3)) + 1):  # Iterate through all integers a from 2 to the cube root of j\n        if j % a == 0:  # Check if j is divisible by a\n            for b in range(a + 1, int(j ** (1 / 2))):  # Iterate through all integers b from a + 1 to the square root of j\n                if (j // a) % b == 0 and (j // a) // b!= a and ((j // a) // b)!= int((j // a) ** (1 / 2)):  # Check if (j // a) is divisible by b and if (j // a) // b is not equal to a and not equal to the square root of (j // a)\n                    print(\"YES\")  # Print \"YES\" if all conditions are met\n                    print(a, b, (j // a) // b)  # Print the values of a, b, and (j // a) // b\n                    return  # Return from the function\n    print(\"NO\")  # Print \"NO\" if no such a and b are found\n    return  # Return from the function\n\nt = int(input())  # Read the number of test cases\nl = []  # Initialize an empty list to store the test case values\nfor i in range(t):  # Iterate through each test case\n    n = int(input())  # Read the integer n from the input\n    l.append(n)  # Append the test case value to the list\n\nfor j in l:  # Iterate through each test case value in the list\n    pro(j)  # Call the pro function with the current value j\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case, read the integer `n`.\n3. Initialize a variable `a` to 2, which will be used to find the first factor of `n`.\n4. Use a while loop to find the first factor `a` such that `a * a * a < n`. This is done to ensure that we don't miss any factors that are smaller than the cube root of `n`.\n5. Inside the loop, check if `n` is divisible by `a` using the modulo operator (`n % a == 0`). If it is, proceed to find the other two factors `b` and `c`.\n6. Initialize a variable `b` to `a + 1`, which will be used to find the second factor of `n`.\n7. Use another while loop to find the second factor `b` such that `b * b < n // a`. This is done to ensure that we don't miss any factors that are smaller than the square root of `n // a`.\n8. Inside the inner loop, check if `(n // a)` is divisible by `b` using the modulo operator (`(n // a) % b == 0`). If it is, proceed to find the third factor `c`.\n9. Calculate the third factor `c` as `n // a // b`.\n10. Check if `a`, `b`, and `c` are distinct integers. If they are, print \"YES\" and the values of `a`, `b`, and `c`.\n11. If no such factors are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef main():\n    # Read the number of test cases\n    n = int(input())\n    \n    # Iterate over each test case\n    for _ in range(n):\n        # Read the integer n\n        num = int(input())\n        \n        # Initialize a variable a to 2\n        a = 2\n        \n        # Use a while loop to find the first factor a such that a * a * a < n\n        while a * a * a < num:\n            # Check if n is divisible by a\n            if num % a == 0:\n                # Initialize a variable b to a + 1\n                b = a + 1\n                \n                # Use another while loop to find the second factor b such that b * b < n // a\n                while b * b < num // a:\n                    # Check if (n // a) is divisible by b\n                    if (num // a) % b == 0:\n                        # Calculate the third factor c as n // a // b\n                        c = num // a // b\n                        \n                        # Check if a, b, and c are distinct integers\n                        if a!= c and b!= c:\n                            # Print \"YES\" and the values of a, b, and c\n                            print(\"YES\")\n                            print(a, b, c)\n                            # Break out of the loop\n                            break\n                    # Increment b\n                    b += 1\n            # Increment a\n            a += 1\n        \n        # If no such factors are found, print \"NO\"\n        print(\"NO\")\n\n# Read the number of test cases\np = int(input())\n\n# Iterate over each test case\nfor i in range(p):\n    # Call the main function\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find all the factors of `n` using the `factor` function.\n4. If the number of factors is less than 3, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c`. Print \"NO\".\n5. Otherwise, initialize `a`, `b`, and `c` to 1.\n6. Iterate through the factors of `n` starting from the second factor (index 1).\n7. If the current factor is less than or equal to `a`, multiply `b` by the current factor.\n8. Otherwise, multiply `c` by the current factor.\n9. If `c` is equal to 1 or `c` is equal to either `a` or `b`, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c`. Print \"NO\".\n10. Otherwise, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\ndef factor(n):\n    # Initialize an empty list to store the factors of n\n    ans = []\n    # Initialize the divisor to 2\n    d = 2\n    # Continue the loop until the square of the divisor is less than or equal to n\n    while d * d <= n:\n        # If n is divisible by the divisor, append the divisor to the list of factors and divide n by the divisor\n        if n % d == 0:\n            ans.append(d)\n            n = n // d\n        # If n is not divisible by the divisor, increment the divisor by 1\n        else:\n            d += 1\n    # If n is greater than 1, it means n is a prime number, so append n to the list of factors\n    if n > 1:\n        ans.append(n)\n    # Return the list of factors\n    return ans\n\n# Read the number of test cases\nt = int(input())\n# Iterate through each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find the factors of n\n    ans = factor(n)\n    # If the number of factors is less than 3, it's impossible to represent n as a * b * c for distinct integers a, b, c such that 2 \u2264 a, b, c\n    if len(ans) < 3:\n        print(\"NO\")\n    # Otherwise, initialize a, b, and c to 1\n    else:\n        a = 1\n        b = 1\n        c = 1\n        # Iterate through the factors of n starting from the second factor (index 1)\n        for i in range(1, len(ans)):\n            # If the current factor is less than or equal to a, multiply b by the current factor\n            if ans[i] <= a:\n                b *= ans[i]\n            # Otherwise, multiply c by the current factor\n            else:\n                c *= ans[i]\n        # If c is equal to 1 or c is equal to either a or b, it's impossible to represent n as a * b * c for distinct integers a, b, c such that 2 \u2264 a, b, c\n        if c == 1 or c == a or c == b:\n            print('NO')\n        # Otherwise, print \"YES\" and the values of a, b, and c\n        else:\n            print(\"YES\")\n            print(a, b, c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `a` to store the factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n6. If `n` is divisible by the current number `i`, add `i` to the list `a` and divide `n` by `i`.\n7. If the length of `a` is 2, break the loop as we have found two distinct factors.\n8. After the loop, check if the length of `a` is 2 and `n` is greater than the second element of `a`.\n9. If the condition in step 8 is true, print \"YES\" and the three distinct integers `a[0]`, `a[1]`, and `n`.\n10. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store factors\n    c = 0\n    a = []\n    \n    # Iterate from 2 to the square root of n to find factors\n    for i in range(2, int(n**0.5)+1):\n        # Check if n is divisible by the current number i\n        if n % i == 0:\n            # Add i to the list of factors\n            a.append(i)\n            # Divide n by i\n            n = n//i\n            # If we have found two distinct factors, break the loop\n            if len(a) == 2:\n                break\n    \n    # Check if we have found two distinct factors and n is greater than the second factor\n    if len(a) == 2 and n > a[1]:\n        # Print \"YES\" and the three distinct integers\n        print('YES')\n        print(a[0], a[1], n)\n    else:\n        # Print \"NO\" if we couldn't find three distinct integers\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, denoted as `n`.\n2. Iterate through each test case using a for loop, ranging from `0` to `n-1`.\n3. For each test case, read the input number `num`.\n4. Initialize an empty list `list1` to store the prime factors of `num`.\n5. Initialize a variable `j` to `2`, which will be used to check for prime factors.\n6. Use a while loop to find prime factors of `num`. The loop continues as long as `j*j` is less than `num` and the length of `list1` is less than `2`.\n7. Inside the while loop, check if `num` is divisible by `j`. If it is, divide `num` by `j` and append `j` to `list1`.\n8. Increment `j` by `1` in each iteration.\n9. After the while loop, check if the length of `list1` is `2` and if `num` is not already in `list1`. If both conditions are true, it means we have found three distinct integers `a`, `b`, and `c` such that `a*b*c = num`.\n10. If the conditions in step 9 are met, print \"YES\" and the values of `list1` and `num` separated by spaces.\n11. If the conditions in step 9 are not met, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nn = int(input())\n\n# Iterate through each test case\nfor i in range(n):\n    # Read the input number for the current test case\n    num = int(input())\n    \n    # Initialize an empty list to store prime factors\n    list1 = []\n    \n    # Initialize a variable to check for prime factors\n    j = 2\n    \n    # Use a while loop to find prime factors\n    while (j*j < num and len(list1) < 2):\n        # Check if num is divisible by j\n        if (num % j == 0):\n            # If divisible, divide num by j and append j to list1\n            num = num // j\n            list1.append(j)\n        # Increment j by 1\n        j += 1\n    \n    # Check if we have found three distinct integers\n    if (len(list1) == 2 and num not in list1):\n        # If conditions are met, print \"YES\" and the values of list1 and num\n        print(\"YES\")\n        # Print the values of list1 and num separated by spaces\n        for k in list1:\n            print(k, end=\" \")\n        print(num)\n    else:\n        # If conditions are not met, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the `prime_factors` function.\n4. If the number of distinct prime factors is less than 2, it's impossible to represent `n` as `a * b * c` with distinct integers `a`, `b`, and `c`. Print \"NO\" and move to the next test case.\n5. If the number of distinct prime factors is 2, check if the third factor `c` is a prime factor or less than 2. If so, print \"NO\" and move to the next test case.\n6. If the number of distinct prime factors is 1, check if the exponent of the prime factor is greater than 5. If so, set `a` and `b` to the prime factor raised to the power of 1 and 2, respectively. Otherwise, print \"NO\" and move to the next test case.\n7. Calculate the third factor `c` as `n // (a * b)`.\n8. Print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\n''' Hey stalker :) '''\nINF = 10**10\n\ndef main():\n    #print = out.append\n    ''' Cook your dish here! '''\n    # Read the number of test cases\n    n = get_int()\n    \n    # For each test case\n    for _ in range(n):\n        # Read the integer n\n        n = get_int()\n        \n        # Find the prime factors of n\n        factors = prime_factors(n)\n        \n        # Get the distinct prime factors\n        keys = list(factors.keys())\n        \n        # If there's only one distinct prime factor\n        if len(factors) == 1:\n            # If the exponent of the prime factor is greater than 5\n            if factors[keys[0]] > 5:\n                # Set a and b to the prime factor raised to the power of 1 and 2, respectively\n                a = keys[0]\n                b = keys[0]**2\n            else:\n                # Print \"NO\" and move to the next test case\n                print(\"NO\")\n                continue\n        \n        # If there are two distinct prime factors\n        elif len(factors) == 2:\n            # Set a and b to the two distinct prime factors\n            a, b = keys[:2]\n            \n            # Calculate the third factor c\n            c = n // (a * b)\n            \n            # If c is a prime factor or less than 2, print \"NO\" and move to the next test case\n            if c == a or c == b or c < 2:\n                print(\"NO\")\n                continue\n        \n        # Calculate the third factor c\n        c = n // (a * b)\n        \n        # Print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a, b, c)\n\ndef prime_factors(n):  # n**0.5 complex\n    # Initialize an empty dictionary to store the prime factors\n    factors = dict()\n    \n    # Iterate from 2 to the square root of n\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        # While n is divisible by i\n        while n % i == 0:\n            # If i is already a prime factor, increment its count\n            if i in factors:\n                factors[i] += 1\n            # Otherwise, add i as a prime factor with a count of 1\n            else:\n                factors[i] = 1\n            # Update n by dividing it by i\n            n = n // i\n    \n    # If n is greater than 2, it's a prime factor\n    if n > 2:\n        factors[n] = 1\n    \n    # Return the dictionary of prime factors\n    return (factors)\n\n''' Pythonista fLite 1.1 '''\nimport sys\nfrom collections import defaultdict, Counter\nfrom bisect import bisect_left, bisect_right\n#from functools import reduce\nimport math\ninput = iter(sys.stdin.buffer.read().decode().splitlines()).__next__\nout = []\nget_int = lambda: int(input())\nget_list = lambda: list(map(int, input().split()))\n#main()\n[main() for _ in range(int(input()))]\nprint(*out, sep='\\n')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a variable `found` to 0, which will be used to track whether a valid triplet is found.\n5. Initialize a variable `i` to 2, which will be used to iterate over possible factors of `n`.\n6. Iterate over possible factors `i` of `n` until `i*i` is greater than `n`.\n7. For each factor `i`, check if `n` is divisible by `i`.\n8. If `n` is divisible by `i`, calculate `n1` as `n` divided by `i`.\n9. Initialize a variable `j` to 2, which will be used to iterate over possible factors of `n1`.\n10. Iterate over possible factors `j` of `n1` until `j*j` is greater than `n1`.\n11. For each factor `j` of `n1`, check if `n1` is divisible by `j`.\n12. If `n1` is divisible by `j`, check if `i`, `n1//j`, and `j` are distinct and greater than or equal to 2.\n13. If the conditions in step 12 are met, print \"YES\" and the triplet `i`, `n1//j`, and `j`.\n14. If no valid triplet is found after iterating over all possible factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize a variable to track whether a valid triplet is found\n    found = 0\n    \n    # Initialize a variable to iterate over possible factors of n\n    i = 2\n    \n    # Iterate over possible factors i of n until i*i is greater than n\n    while i*i <= n:\n        # Check if n is divisible by i\n        if (n % i == 0): \n            # Calculate n1 as n divided by i\n            n1 = n//i\n            \n            # Initialize a variable to iterate over possible factors of n1\n            j = 2\n            \n            # Initialize a variable to track whether a valid factor is found\n            comp = 0\n            \n            # Iterate over possible factors j of n1 until j*j is greater than n1\n            while j*j <= n1:\n                # Check if n1 is divisible by j\n                if n1 % j == 0:\n                    # Check if i, n1//j, and j are distinct and greater than or equal to 2\n                    if i == n1//j or i == j or (n1//j == j) or n//j == 1 or j == 1:\n                        # If not, increment j and continue\n                        j += 1\n                        continue\n                    else:\n                        # If the conditions are met, set found to 1 and break the loop\n                        if found or n1//j == 1 or j == 1:\n                            break\n                        found = 1\n                        # Print \"YES\" and the triplet i, n1//j, and j\n                        print('YES')\n                        print(i, n1//j, j)\n                # Increment j\n                j += 1\n        \n        # Increment i\n        i += 1\n    \n    # If no valid triplet is found, print \"NO\"\n    if not found:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `ans` to store the factors of `n`.\n5. Iterate from `2` to `n` (exclusive) to find factors of `n`.\n6. For each number `i` in the range, check if `i` is a factor of `n` by checking if `n` is divisible by `i` (`n % i == 0`).\n7. If `i` is a factor, append it to the `ans` list and divide `n` by `i` to reduce the problem size.\n8. If the length of `ans` is `2`, it means we have found two factors, so append the remaining `n` to `ans` and break the loop.\n9. After the loop, check if the length of `ans` is `3`. If it is, print \"YES\" and the elements of `ans` as the factors. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the factors of n\n    ans = []\n    \n    # Iterate from 2 to n (exclusive) to find factors of n\n    for i in range(2, n):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # If i is a factor, append it to the ans list and divide n by i\n            ans.append(i)\n            n //= i\n        # If we have found two factors, append the remaining n to ans and break the loop\n        if len(ans) == 2:\n            ans.append(n)\n            break\n    \n    # Check if we have found three factors\n    if len(ans) == 3:\n        # If yes, print \"YES\" and the elements of ans as the factors\n        print('YES')\n        print(*ans)\n    else:\n        # If not, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Check if `n` is less than 24. If true, print \"NO\" and move to the next test case.\n4. Initialize an empty list `ans` to store the prime factors of `n`.\n5. Initialize a counter `count` to 0 and a variable `cond` to True.\n6. Start a while loop that continues until `count` is less than 2.\n7. Inside the loop, call the `Prime` function to find the smallest prime factor `m` of `n`.\n8. If `m` is 0, it means `n` is a prime number, so set `cond` to False and break the loop.\n9. Otherwise, append `m` to the `ans` list, increment `count`, update `n` by dividing it by `m`, and increment `d` by 1.\n10. After the loop, check if `n` is in the `ans` list. If true, print \"NO\" and move to the next test case.\n11. Otherwise, append `n` to the `ans` list and print \"YES\" followed by the elements of the `ans` list.\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin\n\n# Function to find the smallest prime factor of a number\ndef Prime(d, n):\n    # Check if n is divisible by d\n    if n%d == 0:\n        # If divisible, return d as the smallest prime factor\n        return d\n    # If not divisible, increment d and continue searching for a prime factor\n    while d * d <= n:\n        # Check if n is divisible by d\n        if n % d == 0:\n            # If divisible, return d as the smallest prime factor\n            return d\n        # If not divisible, increment d\n        d = d + 1\n    # If no prime factor is found, return 0\n    return 0\n\n# Read the number of test cases\nfor _ in range(int(stdin.readline())):\n    # Read the integer n for the current test case\n    n = int(stdin.readline())\n    # Check if n is less than 24\n    if n < 24:\n        # If true, print \"NO\" and move to the next test case\n        print(\"NO\")\n        continue\n    # Initialize an empty list to store the prime factors of n\n    ans = []\n    # Initialize a counter to 0 and a variable to True\n    count = 0\n    cond = True\n    # Initialize d to 2\n    d = 2\n    # Start a while loop that continues until count is less than 2\n    while count < 2:\n        # Call the Prime function to find the smallest prime factor of n\n        m = Prime(d, n)\n        # Check if m is 0\n        if m == 0:\n            # If true, set cond to False and break the loop\n            cond = False\n            break\n        else:\n            # If not 0, append m to the ans list, increment count, update n, and increment d\n            ans.append(m)\n            count += 1\n            n = n // m\n            d = m + 1\n    # Check if cond is True\n    if cond == True:\n        # If true, check if n is in the ans list\n        if n in ans:\n            # If true, print \"NO\" and move to the next test case\n            print(\"NO\")\n        else:\n            # If not in the ans list, append n to the ans list and print \"YES\" followed by the elements of the ans list\n            ans.append(n)\n            print(\"YES\")\n            print(*ans)\n    else:\n        # If cond is False, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case, read the integer `n`.\n3. Initialize an empty list `fac` to store factor pairs of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find a factor pair of `n`. If a factor pair is found, store it in `fac` and break the loop.\n5. If a factor pair is found, check if the other factor (`x`) has any factors other than 1 and itself. If it does, it means `n` can be represented as a product of three distinct integers.\n6. If `x` has no factors other than 1 and itself, it means `n` cannot be represented as a product of three distinct integers.\n7. If no factor pair is found, it means `n` cannot be represented as a product of three distinct integers.\n8. Repeat steps 2-7 for all test cases.\n9. Print the results for all test cases.\n\nCOMMENTED CODE:\n```python\nimport sys\nI = sys.stdin.readline  # Import readline function from sys module and assign it to I\n\nans = \"\"  # Initialize an empty string to store the output for all test cases\nfor _ in range(int(I())):\n    n = int(input())  # Read the integer n for the current test case\n    fac = []  # Initialize an empty list to store factor pairs of n\n    for i in range(2, int(n ** 0.5) + 1):  # Iterate from 2 to the square root of n\n        if n % i == 0:  # Check if i is a factor of n\n            fac.append((i, n // i))  # Store the factor pair in fac\n            break  # Break the loop as we have found a factor pair\n    # If a factor pair is found, check if the other factor (x) has any factors other than 1 and itself\n    if len(fac)!= 0:\n        x = fac[0][1]  # Get the other factor (x) from the factor pair\n        flag = 1  # Initialize a flag to indicate if x has any factors other than 1 and itself\n        for j in range(2, int(x ** 0.5) + 1):  # Iterate from 2 to the square root of x\n            if x % j == 0 and j!= fac[0][0]:  # Check if j is a factor of x and j is not the same as the first factor\n                if j!= x // j:  # Check if j is not the square root of x\n                    ans += \"YES\\n\"  # Print \"YES\" as n can be represented as a product of three distinct integers\n                    ans += \"{} {} {}\\n\".format(fac[0][0], j, x // j)  # Print the factorization\n                    flag = 0  # Set the flag to 0 as x has factors other than 1 and itself\n                    break  # Break the loop as we have found a factorization\n        if flag:  # If the flag is still 1, it means x has no factors other than 1 and itself\n            ans += \"NO\\n\"  # Print \"NO\" as n cannot be represented as a product of three distinct integers\n    else:  # If no factor pair is found, it means n cannot be represented as a product of three distinct integers\n        ans += \"NO\\n\"\nprint(ans)  # Print the output for all test cases\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, check if the number `n` is prime. If it is, print \"NO\" and move to the next test case.\n4. Iterate from 2 to the square root of `n` (inclusive) to find a factor `i` of `n`.\n5. If `n` is divisible by `i`, check if `n // i` is not prime.\n6. If `n // i` is not prime, iterate from 2 to the square root of `n // i` (inclusive) to find a factor `j` of `n // i`.\n7. If `j` is a factor of `n // i` and `i`, `j`, and `n // i // j` are distinct, print \"YES\" and the factors `i`, `j`, and `n // i // j`.\n8. If no such factors are found, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef isPrime(n):\n  # Check if n is 2 or 3, which are the only prime numbers less than 5\n  if n == 2 or n == 3: \n    return True\n  # If n is less than 2 or is even, it's not prime\n  if n % 2 == 0 or n < 2: \n    return False\n  # Iterate from 3 to the square root of n (inclusive) with a step of 2\n  for i in range(3, int(n ** 0.5) + 1, 2):\n    # If n is divisible by i, it's not prime\n    if n % i == 0:\n      return False    \n  # If no divisors are found, n is prime\n  return True\n\nt = int(input())  # Read the number of test cases\nfor _ in range(t):\n  f = 0  # Flag to track if a solution is found\n  n = int(input())  # Read the number for the current test case\n  # If n is prime, it's impossible to represent n as a * b * c\n  if isPrime(n):\n    print(\"NO\")\n    continue\n  # Iterate from 2 to the square root of n to find a factor i\n  for i in range(2, int(n ** 0.5) + 1):\n    # If n is divisible by i\n    if n % i == 0:\n      # If n // i is not prime\n      if not isPrime(n // i):\n        m = n // i  # Store n // i\n        # Iterate from 2 to the square root of m to find a factor j\n        for j in range(2, int(m ** 0.5) + 1):\n          # If j is a factor of m and i, j, and m // j are distinct\n          if m % j == 0 and i!= j!= (m // j)!= i:\n            # Print \"YES\" and the factors i, j, and m // j\n            print(\"YES\")\n            print(i, j, m // j)\n            f = 1  # Set the flag to 1\n            break\n    # If a solution is found, break the loop\n    if f:\n      break\n  # If no solution is found, print \"NO\"\n  if not f:\n    print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case using a loop.\n3. For each test case, read the integer `n`.\n4. Initialize an empty list `c` to store the prime factors of `n`.\n5. Initialize a variable `i` to 2, which will be used to check for prime factors.\n6. Use a while loop to find prime factors of `n`. The loop continues until the length of `c` is less than 2 or `i*i` is greater than or equal to `n`.\n7. Inside the loop, check if `n` is divisible by `i`. If it is, append `i` to the list `c` and divide `n` by `i`.\n8. Increment `i` by 1.\n9. After the loop, check if the length of `c` is 2 and `n` is not in `c`. If this condition is true, it means `n` can be represented as a product of three distinct integers.\n10. If the condition in step 9 is true, print \"YES\" and the elements of `c` along with `n`.\n11. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor q in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store prime factors\n    c = []\n    \n    # Initialize a variable to check for prime factors\n    i = 2\n    \n    # Use a while loop to find prime factors\n    while len(c) < 2 and i * i < n:\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If divisible, append i to the list and divide n by i\n            c.append(i)\n            n = n // i\n        # Increment i by 1\n        i = i + 1\n    \n    # Check if n can be represented as a product of three distinct integers\n    if len(c) == 2 and n not in c:\n        # If condition is true, print \"YES\" and the elements of c along with n\n        print(\"YES\")\n        print(*c, int(n))\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop from `0` to `t-1`.\n3. Read the value of `n` for the current test case from the input.\n4. Calculate the square root of `n` and store it in `q`.\n5. Initialize an empty set `l` to store the factors of `n`.\n6. Iterate over the range from `2` to `q` (inclusive) to find factors of `n`.\n7. For each number `j` in the range, check if `n` is divisible by `j`. If it is, add `j` to the set `l`.\n8. Check if the size of `l` is less than `2`. If it is, print \"NO\" as it's impossible to represent `n` as a product of three distinct integers.\n9. If the size of `l` is `2` or more, proceed to find the three distinct integers.\n10. Convert the set `l` to a sorted list.\n11. Initialize a flag `res` to `False` to track whether a valid solution is found.\n12. Iterate over the list `l` using two nested loops to find three distinct integers `a`, `b`, and `c` such that `a * b * c == n` and `a!= b!= c`.\n13. For each pair of integers `(a, b)` in the list, calculate `c` as `(n // a) // b`.\n14. Check if `a * b * c == n` and `a!= b!= c`. If the condition is met, set `res` to `True` and print the solution.\n15. If a valid solution is found, break out of the inner loop.\n16. If no valid solution is found after iterating over all pairs, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the value of n for the current test case\n    n = int(input())\n\n    # Calculate the square root of n\n    q = int(math.sqrt(n))\n\n    # Initialize an empty set to store the factors of n\n    l = set()\n\n    # Iterate over the range from 2 to q to find factors of n\n    for j in range(2, q + 1):\n        # Check if n is divisible by j\n        if n % j == 0:\n            # Add j to the set l\n            l.add(j)\n\n    # Check if the size of l is less than 2\n    if len(l) < 2:\n        # Print \"NO\" if it's impossible to represent n as a product of three distinct integers\n        print('NO')\n    else:\n        # Convert the set l to a sorted list\n        l = sorted(list(l))\n\n        # Initialize a flag to track whether a valid solution is found\n        res = False\n\n        # Iterate over the list l using two nested loops to find three distinct integers\n        for k in range(len(l) - 1):\n            for p in range(k + 1, len(l)):\n                # Get the current pair of integers (a, b)\n                a = l[k]\n                b = l[p]\n\n                # Calculate c as (n // a) // b\n                c = (n // a) // b\n\n                # Check if a * b * c == n and a!= b!= c\n                if a * b * c == n and b!= c and a!= c:\n                    # Set res to True and print the solution\n                    res = True\n                    print(\"YES\")\n                    print(str(a) +'' + str(b) +'' + str(c))\n                    # Break out of the inner loop\n                    break\n            # If a valid solution is found, break out of the outer loop\n            if res:\n                break\n        # If no valid solution is found, print \"NO\"\n        if not res:\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize a variable `dr` to store the remaining value of `n` after dividing it by prime factors.\n4. Initialize a variable `i` to 2, which will be used to find prime factors of `n`.\n5. Create a dictionary `primes` to store prime factors and their powers.\n6. Iterate from `i = 2` to `sqrt(n)` to find prime factors of `n`.\n7. Inside the loop, check if `n` is divisible by `i`. If it is, divide `n` by `i` and increment the power of `i` in the `primes` dictionary.\n8. After the loop, if `n` is not 1, it means `n` itself is a prime factor, so add it to the `primes` dictionary.\n9. Check the length of the `primes` dictionary. If it's 3 or more, it's possible to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`. Print \"YES\" and the prime factors.\n10. If the length of the `primes` dictionary is 2, check the powers of the prime factors. If one of the powers is 1, it's not possible to find three distinct integers. Print \"NO\" and move to the next test case.\n11. If the length of the `primes` dictionary is 2 and both powers are greater than 1, print \"YES\" and the prime factors.\n12. If the length of the `primes` dictionary is 1, check if the power of the prime factor is greater than or equal to 6. If it is, print \"YES\" and the prime factor and its square.\n13. If none of the above conditions are met, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom collections import defaultdict\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize a variable to store the remaining value of n after dividing it by prime factors\n    dr = n\n    \n    # Initialize a variable to 2, which will be used to find prime factors of n\n    i = 2\n    \n    # Create a dictionary to store prime factors and their powers\n    primes = defaultdict(int)\n    \n    # Iterate from i = 2 to sqrt(n) to find prime factors of n\n    while i * i <= n:\n        # Check if n is divisible by i\n        while dr % i == 0:\n            # If n is divisible by i, divide n by i and increment the power of i in the primes dictionary\n            primes[i] += 1\n            dr //= i\n        # Increment i by 1\n        i += 1\n    \n    # If n is not 1, it means n itself is a prime factor, so add it to the primes dictionary\n    if dr!= 1:\n        primes[dr] += 1\n    \n    # Check the length of the primes dictionary\n    if len(primes) >= 3:\n        # If the length of the primes dictionary is 3 or more, it's possible to find three distinct integers a, b, and c such that a * b * c = n\n        print(\"YES\")\n        # Initialize a variable to 0\n        i = 0\n        # Iterate over the prime factors and print them\n        for par in primes:\n            print(par, end=\" \")\n            # Divide n by the current prime factor\n            n //= par\n            # Increment i by 1\n            i += 1\n            # If i is 2, break the loop\n            if i == 2:\n                break\n        # Print n\n        print(n)\n    elif len(primes) == 2:\n        # If the length of the primes dictionary is 2, check the powers of the prime factors\n        primes = [(k, v) for k, v in primes.items()]\n        # Check if one of the powers is 1\n        if primes[0][1] == 1:\n            # If one of the powers is 1, it's not possible to find three distinct integers\n            if primes[1][1] <= 2:\n                # Print \"NO\" and move to the next test case\n                print(\"NO\")\n                continue\n            else:\n                # If the other power is greater than 2, print \"YES\" and the prime factors\n                print(\"YES\")\n                print(primes[0][0], primes[1][0], n // (primes[0][0] * primes[1][0]))\n        elif primes[1][1] == 1:\n            # If the other power is 1, it's not possible to find three distinct integers\n            if primes[0][1] <= 2:\n                # Print \"NO\" and move to the next test case\n                print(\"NO\")\n                continue\n            else:\n                # If the first power is greater than 2, print \"YES\" and the prime factors\n                print(\"YES\")\n                print(primes[0][0], primes[1][0], n // (primes[0][0] * primes[1][0]))\n        else:\n            # If both powers are greater than 1, print \"YES\" and the prime factors\n            print(\"YES\")\n            print(primes[0][0], primes[1][0], n // (primes[0][0] * primes[1][0]))\n    else:\n        # If the length of the primes dictionary is 1, check if the power of the prime factor is greater than or equal to 6\n        primes = [(k, v) for k, v in primes.items()]\n        primes = primes[0]\n        if primes[1] >= 6:\n            # If the power is greater than or equal to 6, print \"YES\" and the prime factor and its square\n            print(\"YES\")\n            print(primes[0], primes[0] ** 2, n // (primes[0] ** 3))\n        else:\n            # If the power is less than 6, print \"NO\"\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the number `n`.\n3. Find the prime factors of `n` and store them in a list `prime`.\n4. Count the occurrences of each prime factor and store them in a dictionary `p`.\n5. Check the number of distinct prime factors:\n   - If there is only one prime factor, check if its power is at least 6. If yes, print a valid triplet; otherwise, print \"NO\".\n   - If there are two prime factors, check if their total power is more than 3. If yes, print a valid triplet; otherwise, print \"NO\".\n   - If there are more than two prime factors, print a valid triplet.\n6. Repeat steps 2-5 for all test cases.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Function to find prime factors of a number\ndef primes(n):\n    # Initialize an empty list to store prime factors\n    prime = []\n    \n    # Divide n by 2 until it's no longer divisible\n    while n % 2 == 0:\n        prime.append(2)  # Add 2 as a prime factor\n        n = n / 2  # Divide n by 2\n    \n    # Find other prime factors\n    for i in range(3, int(math.sqrt(n)) + 1, 2):  # Start from 3 and increment by 2\n        while n % i == 0:\n            prime.append(i)  # Add i as a prime factor\n            n = n / i  # Divide n by i\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        prime.append(int(n))  # Add n as a prime factor\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number for the current test case\n    n = int(input())\n    \n    # Find prime factors of n\n    prime = []\n    primes(n)\n    \n    # Count occurrences of each prime factor\n    p = {}\n    for i in prime:\n        if i in p.keys():\n            p[i] += 1  # Increment count if i is already in p\n        else:\n            p[i] = 1  # Initialize count to 1 if i is not in p\n    \n    # Get distinct prime factors\n    g = list(p.keys())\n    \n    # Check number of distinct prime factors\n    if len(g) == 1:\n        # If there is only one prime factor\n        if p[g[0]] >= 6:\n            # If its power is at least 6, print a valid triplet\n            print(\"YES\")\n            p1 = p[g[0]] - 2  # Calculate remaining power\n            print(g[0], g[0]**2, g[0]**(p[g[0]] - 3))  # Print triplet\n        else:\n            # Otherwise, print \"NO\"\n            print(\"NO\")\n        continue\n    \n    if len(g) == 2:\n        # If there are two prime factors\n        if p[g[0]] + p[g[1]] > 3:\n            # If their total power is more than 3, print a valid triplet\n            print(\"YES\")\n            n1 = g[0]\n            n2 = g[1]\n            p1 = p[g[0]]\n            p2 = p[g[1]]\n            print(n1, n2, (pow(n1, p1 - 1) * pow(n2, p2 - 1)))  # Print triplet\n        else:\n            # Otherwise, print \"NO\"\n            print(\"NO\")\n\n    else:\n        # If there are more than two prime factors\n        print(\"YES\")\n        # Calculate the remaining product\n        ans = pow(g[0], p[g[0]] - 1) * pow(g[1], p[g[1]] - 1)\n        for i in range(2, len(g)):\n            ans *= pow(g[i], p[g[i]])\n        print(g[0], g[1], ans)  # Print triplet\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the number `n` from the input.\n3. Find the prime factorization of `n` using the `findPrimeFac` function.\n4. Count the frequency of each prime factor in the prime factorization.\n5. Check if there are at least two distinct prime factors. If not, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, and `c`.\n6. If there are two distinct prime factors, check if the third factor is distinct from the first two. If not, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, and `c`.\n7. If the third factor is distinct, print \"YES\" and the three factors.\n8. If there are more than two distinct prime factors, check if the frequency of the first prime factor is less than 6. If so, it's impossible to represent `n` as `a * b * c` for distinct integers `a`, `b`, and `c`.\n9. If the frequency of the first prime factor is 6 or more, print \"YES\" and the three factors `p`, `p*p`, and `n//(p ** 3)`.\n\nCOMMENTED CODE:\n```python\nfrom math import floor, sqrt, ceil\n\ndef findPrimeFac(num):\n    # Find the prime factorization of num\n    ans = []\n    lim = ceil(sqrt(num))\n    while num % 2 == 0:\n        # If num is divisible by 2, add 2 to the prime factorization\n        ans.append(2)\n        num //= 2\n    for p in range(3, lim, 2):\n        # Check odd numbers up to the square root of num\n        while num % p == 0:\n            # If num is divisible by p, add p to the prime factorization\n            ans.append(p)\n            num //= p\n    # If num is not 1, it means it's a prime number greater than the square root of num\n    if num!= 1:\n        ans.append(num)\n    return ans\n\nt = int(input())\n# Read the number of test cases\nfor _ in range(t):\n    n = int(input())\n    # Read the number for each test case\n    primeFacs = findPrimeFac(n)\n    # Find the prime factorization of n\n    freq = {}\n    for p in primeFacs:\n        # Count the frequency of each prime factor\n        if p not in freq:\n            freq[p] = 0\n        freq[p] += 1\n    numDist = 0\n    ans = []\n    l = list(freq.keys())\n    # Check if there are at least two distinct prime factors\n    if len(l) >= 2:\n        a = l[0]\n        b = l[1]\n        c = n // (a * b)\n        # Check if the third factor is distinct from the first two\n        if c!= a and c!= b and c!= 1:\n            print(\"YES\")\n            assert n == a*b*c\n            print(a, b, c)\n        else:\n            print(\"NO\")\n    # If there are more than two distinct prime factors, check the frequency of the first prime factor\n    elif len(l) == 0 or freq[l[0]] < 6:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        p = l[0]\n        print(p, p*p, n//(p ** 3))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize three variables `a`, `b`, and `c` to store the distinct integers.\n4. Call the function `szuk_podz` with `n` and `a = 1` to find the first distinct integer `a` such that `2 \u2264 a` and `a` divides `n`.\n5. If `a` is not found, print \"NO\" and move to the next test case.\n6. Calculate `x` as `n` divided by `a`.\n7. Call the function `szuk_podz` with `x` and `a` to find the second distinct integer `b` such that `2 \u2264 b`, `b` divides `x`, and `b` is not equal to `a`.\n8. If `b` is not found, print \"NO\" and move to the next test case.\n9. Calculate `c` as `x` divided by `b`.\n10. If `c` is equal to `a` or `c` is equal to `b`, print \"NO\" and move to the next test case.\n11. If `c` is greater than 0 and `b` is greater than 0, print \"YES\" and the values of `a`, `b`, and `c`.\n12. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Function to find the first distinct integer that divides n\ndef szuk_podz(liczba, a = 1):\n    # Iterate from 2 to the square root of n\n    for x in range(2, int(sqrt(liczba)) + 1):\n        # Check if x divides n and x is not equal to a\n        if liczba % x == 0 and x!= a:\n            # Return the first distinct integer that divides n\n            return x\n    # If no distinct integer is found, return -1\n    return -1\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Initialize variables a, b, and c\n    a, b, c = szuk_podz(n), 0, 0\n    # Calculate x as n divided by a\n    x = n // a\n    # If a is not found, print \"NO\" and move to the next test case\n    if a == -1:\n        print(\"NO\")\n        continue\n    # Call the function szuk_podz with x and a to find the second distinct integer b\n    b = szuk_podz(x, a)\n    # Calculate c as x divided by b\n    c = x // b\n    # If b is not found, print \"NO\" and move to the next test case\n    if b == -1:\n        print(\"NO\")\n        continue\n    # If c is equal to a or c is equal to b, print \"NO\" and move to the next test case\n    if c == a or c == b:\n        print(\"NO\")\n        continue\n    # If c is greater than 0 and b is greater than 0, print \"YES\" and the values of a, b, and c\n    if c > 0 and b > 0:\n        print(\"YES\")\n        print(a, b, c)\n    # Otherwise, print \"NO\"\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `s` to store the prime factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find the prime factors of `n`.\n6. If `n` is divisible by the current number `i`, add `i` to the list `s` and divide `n` by `i`. Otherwise, increment `i` by 1.\n7. If `n` is not 1 after the loop, add `n` to the list `s`.\n8. Initialize an empty list `a` to store the distinct prime factors of `n`.\n9. Iterate over the list `s` and multiply the current number with the previous number in the list `a`. If the result is not already in `a`, add it to `a`.\n10. If the length of `a` is at least 3, print \"YES\" and the first three elements of `a` as the distinct integers `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor kek in range(t):  # Iterate over each test case\n    n = int(input())  # Read the integer n for the current test case\n    i = 2  # Initialize the variable i to 2\n    s = list()  # Initialize an empty list s to store the prime factors of n\n    while i < n ** (1 / 2) + 1:  # Iterate from 2 to the square root of n\n        if n % i == 0:  # If n is divisible by i\n            s.append(i)  # Add i to the list s\n            n //= i  # Divide n by i\n        else:\n            i += 1  # Increment i by 1\n    if n!= 1:  # If n is not 1 after the loop\n        s.append(n)  # Add n to the list s\n    a = list()  # Initialize an empty list a to store the distinct prime factors of n\n    x = 1  # Initialize the variable x to 1\n\n    for i in range(1, len(s)):  # Iterate over the list s\n        x *= s[i]  # Multiply the current number with the previous number in the list a\n        if x not in a:  # If the result is not already in a\n            a.append(x)  # Add it to a\n            x = 1  # Reset x to 1\n        else:\n            continue  # Skip to the next iteration\n\n    a[-1] *= x  # Multiply the last element of a with x\n\n    if len(a) >= 3:  # If the length of a is at least 3\n        x = 1  # Initialize x to 1\n        for i in range(2, len(a)):  # Iterate over the list a starting from the second element\n            x *= a[i]  # Multiply x with the current number in a\n        print('YES')  # Print \"YES\"\n        print(a[0], a[1], x)  # Print the first three elements of a as the distinct integers a, b, and c\n    else:\n        print('NO')  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `out` to store the factors of `n`.\n5. Start a while loop with `d` initialized to 2, which will be used to find factors of `n`.\n6. Inside the loop, check if `n` is divisible by `d` (i.e., `n % d == 0`).\n7. If `n` is divisible by `d`, append `d` to the `out` list and divide `n` by `d` (i.e., `n //= d`).\n8. Continue the loop until `d` squared is greater than `n`.\n9. After the loop, check if the length of `out` is 2 and if `n` is greater than the second element in `out`.\n10. If the condition in step 9 is true, print \"YES\" and the elements in `out` as the factors of `n`.\n11. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate t times to process each test case\nfor _ in range(t):\n    # Initialize an empty list to store the factors of n\n    out = []\n    # Read the integer n from the input\n    n = int(input())\n    \n    # Initialize d to 2, which will be used to find factors of n\n    d = 2\n    \n    # Start a while loop to find factors of n\n    while d * d <= n:\n        # Check if n is divisible by d\n        if n % d == 0:\n            # If n is divisible by d, append d to the out list\n            out.append(d)\n            # Divide n by d\n            n //= d\n            # If the length of out is 2, break the loop\n            if len(out) == 2:\n                break\n        # Increment d by 1\n        d += 1\n    \n    # Check if the length of out is 2 and if n is greater than the second element in out\n    if len(out) == 2 and n > out[1]:\n        # If the condition is true, print \"YES\" and the elements in out as the factors of n\n        print(\"YES\")\n        print(out[0], out[1], n)\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a for loop.\n3. Read the value of `n` for the current test case from the input.\n4. Initialize an empty list `a` to store the prime factors of `n`.\n5. Initialize a variable `fa` to 1, which will be used to check if `n` is a perfect cube.\n6. Find the smallest prime factor `i` of `n` and divide `n` by `i` until `n` is no longer divisible by `i`. Add `i` to the list `a` each time it is found.\n7. Repeat step 6 for the remaining prime factors of `n`.\n8. Check the length of the list `a`:\n   - If `l` is 0, it means `n` is a prime number greater than 2, so print \"NO\".\n   - If `l` is 1, it means `n` has only one prime factor. Check if `n` can be represented as `a * b * c` by trying all possible combinations of `a`, `b`, and `c`. If a valid combination is found, print \"YES\" and the combination; otherwise, print \"NO\".\n   - If `l` is 2, it means `n` has two prime factors. Check if `n` can be represented as `a * b * c` by trying all possible combinations of `a`, `b`, and `c`. If a valid combination is found, print \"YES\" and the combination; otherwise, print \"NO\".\n   - If `l` is greater than or equal to 3, it means `n` has at least three prime factors. Print \"YES\" and the smallest three prime factors of `n` as `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor xyz in range(t):  # Iterate over each test case\n    n = int(input())  # Read the value of n for the current test case\n    a = []  # Initialize an empty list to store the prime factors of n\n    fa = 1  # Initialize a variable to check if n is a perfect cube\n\n    p = n  # Initialize a variable to store the remaining value of n\n    i = 2  # Initialize a variable to store the smallest prime factor\n\n    while i * i <= p:  # Find the smallest prime factor of n\n        if p % i == 0 and i not in a:  # Check if i is a prime factor of n\n            a.append(i)  # Add i to the list of prime factors\n            p = p // i  # Divide n by i\n            break  # Break the loop as we have found the smallest prime factor\n        i = i + 1  # Increment i to check the next possible prime factor\n\n    while i * i <= p:  # Find the remaining prime factors of n\n        if p % i == 0 and i not in a:  # Check if i is a prime factor of n\n            a.append(i)  # Add i to the list of prime factors\n            p = p // i  # Divide n by i\n        i = i + 1  # Increment i to check the next possible prime factor\n\n    l = len(a)  # Get the length of the list of prime factors\n    if l == 0:  # If n is a prime number greater than 2\n        print('NO')  # Print \"NO\"\n\n    if l == 1:  # If n has only one prime factor\n        f = a[0]  # Get the prime factor\n        s = a[0] * a[0]  # Calculate the square of the prime factor\n        t = n // (f * s)  # Calculate the remaining value of n\n        if f * s * t == n and f!= s and s!= t and t!= f and t > 1:  # Check if n can be represented as a * b * c\n            print('YES')  # Print \"YES\"\n            print(f, s, t)  # Print the combination\n        else:\n            print('NO')  # Print \"NO\"\n\n    if l == 2:  # If n has two prime factors\n        f = min(a)  # Get the smallest prime factor\n        c = a.copy()  # Create a copy of the list of prime factors\n        for i in c:  # Remove the smallest prime factor from the copy\n            if i == f:\n                c.remove(i)\n        s = min(c)  # Get the second smallest prime factor\n        t = n // (f * s)  # Calculate the remaining value of n\n        if f * s * t == n and f!= s and s!= t and t!= f and t > 1:  # Check if n can be represented as a * b * c\n            print('YES')  # Print \"YES\"\n            print(f, s, t)  # Print the combination\n        else:\n            print('NO')  # Print \"NO\"\n\n    if l >= 3:  # If n has at least three prime factors\n        f = min(a)  # Get the smallest prime factor\n        c = a.copy()  # Create a copy of the list of prime factors\n        for i in c:  # Remove the smallest prime factor from the copy\n            if i == f:\n                c.remove(i)\n        s = min(c)  # Get the second smallest prime factor\n        t = n // (f * s)  # Calculate the remaining value of n\n        print('YES')  # Print \"YES\"\n        print(f, s, t)  # Print the combination\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases T.\n2. For each test case, read the integer n.\n3. Initialize an empty list res to store the factors of n.\n4. Iterate from 2 to the cube root of n (inclusive) to find the first factor of n. If a factor is found, append it to res and divide n by this factor.\n5. If no factor is found in step 4, return \"NO\" as it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n6. Iterate from 2 to the square root of the current n (inclusive) to find the second factor of n. If a factor is found and it is not the same as the first factor, append it to res and divide n by this factor.\n7. If no second factor is found in step 6, return \"NO\".\n8. Calculate the third factor c by dividing the original n by the product of the first two factors.\n9. Check if c is 1 or equal to any of the first two factors. If true, return \"NO\".\n10. Append c to res.\n11. Return \"YES\" and the product of the factors in res.\n\nCOMMENTED CODE:\n```python\nimport os,sys,math,random\n\ndef dep(a):\n    # Initialize an empty list to store the factors of n\n    a0 = a\n    res = []\n    \n    # Iterate from 2 to the cube root of n to find the first factor\n    for b in range(2, int(a**(1/3))+1):\n        # If n is divisible by b, it is a factor\n        if a % b == 0:\n            # Append the factor to res and divide n by this factor\n            res.append(b)\n            a /= res[0]\n            break\n    \n    # If no factor is found, return \"NO\"\n    if len(res) == 0:\n        return \"NO\"\n\n    # Iterate from 2 to the square root of the current n to find the second factor\n    for b in range(2, int(a**(1/2))+1):\n        # If n is divisible by b and b is not the same as the first factor, it is a factor\n        if a % b == 0 and b!= res[0]:\n            # Append the factor to res and divide n by this factor\n            res.append(b)\n            break\n    \n    # If no second factor is found, return \"NO\"\n    if len(res) == 1:\n        return \"NO\"\n\n    # Calculate the third factor c by dividing the original n by the product of the first two factors\n    c = int(a0 / res[0] / res[1])\n    \n    # Check if c is 1 or equal to any of the first two factors\n    if c == 1 or c == res[0] or c == res[1]:\n        return \"NO\"\n    \n    # Append c to res\n    res.append(c)\n\n    # Return \"YES\" and the product of the factors in res\n    return \"YES\\n\" + \" \".join(map(str, res))\n\n# Read the number of test cases T\nT = int(input())\n\n# For each test case, read the integer n and print the result\nfor _ in range(T):\n    a = int(input())\n    print(dep(a))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factors of `n` using the `prime(n)` function.\n4. Check if the number of distinct prime factors is at least 3. If yes, calculate `a`, `b`, and `c` as the prime factors raised to their respective powers and print the result.\n5. If the number of distinct prime factors is 2, check if the sum of their powers is at least 4. If yes, calculate `a`, `b`, and `c` as the prime factors raised to their respective powers and print the result. Otherwise, print \"NO\".\n6. If the number of distinct prime factors is 1, check if the power of the prime factor is at least 5. If yes, calculate `a` and `b` as the prime factor raised to the power of 2 and the prime factor itself, respectively, and print the result. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom collections import defaultdict\nimport math\n\n# Function to find prime factors of a number\ndef prime(n):\n    # Initialize an empty list to store prime factors\n    ans = []\n    # Initialize a dictionary to store the powers of prime factors\n    al = defaultdict(int)\n    \n    # Divide n by 2 until it's no longer divisible\n    while n % 2 == 0:\n        al[2] += 1  # Increment the power of 2\n        ans.append(2)  # Add 2 to the list of prime factors\n        n = n // 2  # Divide n by 2\n    \n    # Iterate from 3 to the square root of n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While n is divisible by i, increment the power of i and add i to the list of prime factors\n        while n % i == 0:\n            al[i] += 1\n            ans.append(i)\n            n = n // i\n    \n    # If n is a prime number greater than 2, add it to the list of prime factors\n    if n > 2:\n        al[n] = 1\n        ans.append(n)\n    \n    # Remove duplicates from the list of prime factors\n    ans = list(set(ans))\n    \n    return ans, al\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n\n    n = int(input())\n    \n    # Find the prime factors of n\n    ans, al = prime(n)\n    \n    # Check if the number of distinct prime factors is at least 3\n    if len(ans) >= 3:\n        # Calculate a, b, and c as the prime factors raised to their respective powers\n        a = ans[0] ** al[ans[0]]\n        b = ans[1] ** al[ans[1]]\n        c = n // (a * b)\n        # Print the result\n        print('YES')\n        print(a, b, c)\n    \n    # If the number of distinct prime factors is 2\n    elif len(ans) == 2:\n        # Check if the sum of their powers is at least 4\n        if al[ans[0]] + al[ans[1]] >= 4:\n            # Calculate a, b, and c as the prime factors raised to their respective powers\n            a = ans[0]\n            b = ans[1]\n            c = n // (a * b)\n            # Print the result\n            print('YES')\n            print(a, b, c)\n        else:\n            # Print \"NO\"\n            print('NO')\n    \n    # If the number of distinct prime factors is 1\n    else:\n        # Check if the power of the prime factor is at least 5\n        if al[ans[0]] > 5:\n            # Calculate a and b as the prime factor raised to the power of 2 and the prime factor itself, respectively\n            a = ans[0] * ans[0]\n            b = ans[0]\n            c = n // (a * b)\n            # Print the result\n            print('YES')\n            print(a, b, c)\n        else:\n            # Print \"NO\"\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the cube root of `n` and store it in `l`.\n4. Iterate from 2 to `l` (inclusive) to find a factor `a` of `n` such that `n % a == 0`.\n5. If `a` is 1, it means `n` is a perfect cube, so print \"NO\".\n6. Otherwise, calculate `m` as `n / a`.\n7. Find the square root of `m` and store it in `l`.\n8. Iterate from `a + 1` to `l` (inclusive) to find a factor `b` of `m` such that `m % b == 0`.\n9. Calculate `c` as `m / b`.\n10. Check if `a`, `b`, and `c` are distinct and not equal to 1. If they are, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(0, t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Find the cube root of n and store it in l\n    l = int(n ** (1 / 3))\n\n    # Find a factor a of n such that n % a == 0\n    a = 1\n    for k in range(2, l + 1):\n        if n % k == 0:\n            a = k\n            break\n\n    # If a is 1, it means n is a perfect cube, so print \"NO\"\n    if a == 1:\n        print(\"NO\")\n    else:\n        # Calculate m as n / a\n        m = n / a\n\n        # Find the square root of m and store it in l\n        l = int(m ** (1 / 2))\n\n        # Find a factor b of m such that m % b == 0\n        b = 1\n        for k in range(a + 1, l + 1):\n            if m % k == 0:\n                b = k\n                break\n\n        # Calculate c as m / b\n        c = int(m / b)\n\n        # Check if a, b, and c are distinct and not equal to 1\n        if a!= 1 and b!= 1 and c!= 1 and c!= b:\n            # Print \"YES\" and the values of a, b, and c\n            print(\"YES\")\n            print(a, b, c)\n        else:\n            # Print \"NO\"\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case, read the integer `n` from the input.\n3. For each `n`, find three distinct integers `a`, `b`, `c` such that `2 \u2264 a, b, c` and `a \u22c5 b \u22c5 c = n` or determine that it is impossible to do so.\n4. If such `a`, `b`, `c` exist, print \"YES\" and the values of `a`, `b`, `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef product_of_3_numbers(n):\n    # Iterate over possible values of 'a' from 2 to the square root of 'n'\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        # Check if 'n' is divisible by 'i'\n        if n % i == 0:\n            # Calculate 'd' as 'n' divided by 'i'\n            d = n // i\n            # Iterate over possible values of 'b' from 'i + 1' to the square root of 'd'\n            for j in range(i + 1, int(d ** (1 / 2)) + 1):\n                # Check if 'd' is divisible by 'j' and 'j' is not equal to 'd' divided by 'j'\n                if d % j == 0 and j!= d // j:\n                    # If all conditions are met, print \"YES\" and the values of 'a', 'b', 'c'\n                    print(\"YES\")\n                    print(i, j, d // j)\n                    # Return from the function to avoid processing further test cases\n                    return\n    # If no suitable 'a', 'b', 'c' are found, print \"NO\"\n    print(\"NO\")\n\n\n# Read the number of test cases 't' from the input\nt = int(input())\n# Iterate over each test case\nfor _ in range(t):\n    # Read the integer 'n' from the input\n    n = int(input())\n    # Call the function to find 'a', 'b', 'c' for the current test case\n    product_of_3_numbers(n)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the number `n` from the input.\n3. Initialize an empty list `a` to store the prime factors of `n`.\n4. Iterate through the list of prime numbers `p` up to the square root of `n`.\n5. For each prime number `p[i]`, check if `n` is divisible by `p[i]`. If it is, divide `n` by `p[i]` and append `p[i]` to the list `a`.\n6. If `n` is not divisible by any prime number in the list `p`, break the loop.\n7. If `n` is greater than 1 after the loop, append `n` to the list `a`.\n8. Check if the length of `a` is greater than 2. If it is, proceed to find three distinct integers `a`, `b`, `c` such that `a * b * c = n`.\n9. Initialize an empty list `ans` to store the three distinct integers.\n10. If the second element of `a` is equal to the first element, multiply the second element by the third element and append the result to `ans`.\n11. Initialize a variable `c` to 1 and iterate through the remaining elements of `a` starting from the third element.\n12. Multiply `c` by each element in `a` and check if the result is not equal to the first element and not equal to the second element. If it is not equal to both, append the result to `ans` and sort `ans` in ascending order.\n13. If `ans` has three elements, print \"YES\" and the elements of `ans`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin\nfrom collections import deque\nfrom math import sqrt, floor, ceil, log, log2, log10, pi, gcd, sin, cos, asin\n\ndef ii(): return int(stdin.readline())  # read an integer from the input\n\ndef fi(): return float(stdin.readline())  # read a float from the input\n\ndef mi(): return map(int, stdin.readline().split())  # read multiple integers from the input\n\ndef fmi(): return map(float, stdin.readline().split())  # read multiple floats from the input\n\ndef li(): return list(mi())  # read a list of integers from the input\n\ndef lsi():  # read a list of characters from the input\n    x = list(stdin.readline())\n    x.pop()  # remove the newline character\n    return x\n\ndef si(): return stdin.readline()  # read a string from the input\n\ndef sieve(x):  # generate prime numbers up to x\n    a = [True] * (x + 1)\n    sq = floor(sqrt(x))\n    for i in range(3, sq + 1, 2):\n        if a[i]:\n            for j in range(i * i, x + 1, i):\n                a[j] = False\n    if x > 1:\n        p = [2]\n    else:\n        p = []\n    for i in range(3, x + 1, 2):\n        if a[i]:\n            p.append(i)\n    return p\n\n# generate prime numbers up to 32000\np = sieve(32000)\n\n# iterate through each test case\nfor _ in range(ii()):\n    z = ii()  # read the number for the current test case\n    n = z  # initialize n with the current number\n    a = []  # initialize an empty list to store prime factors\n    i = 0  # initialize a counter for the prime numbers\n\n    # find prime factors of n\n    while n > 1:\n        if not n % p[i]:  # check if n is divisible by p[i]\n            n //= p[i]  # divide n by p[i]\n            a.append(p[i])  # append p[i] to the list of prime factors\n        else:\n            i += 1  # increment the counter\n            if p[i] ** 2 > z:  # check if p[i] squared is greater than n\n                break  # exit the loop if p[i] squared is greater than n\n\n    if n > 1:  # check if n is greater than 1\n        a.append(n)  # append n to the list of prime factors\n\n    f = 0  # initialize a flag to check if three distinct integers are found\n\n    # check if the length of a is greater than 2\n    if len(a) > 2:\n        ans = [a[0]]  # initialize an empty list to store the three distinct integers\n        c = a[1]  # initialize a variable to store the second prime factor\n        x = 2  # initialize a counter for the remaining prime factors\n\n        # check if the second prime factor is equal to the first prime factor\n        if c == ans[0]:\n            c *= a[2]  # multiply the second prime factor by the third prime factor\n            x = 3  # increment the counter\n\n        ans.append(c)  # append the second prime factor to the list of three distinct integers\n        c = 1  # initialize a variable to store the product of the remaining prime factors\n\n        # iterate through the remaining prime factors\n        if x < len(a):\n            for i in a[x:]:\n                c *= i  # multiply the product by each remaining prime factor\n            if c!= ans[0] and c!= ans[1]:  # check if the product is not equal to the first and second prime factors\n                ans.append(c)  # append the product to the list of three distinct integers\n                ans.sort()  # sort the list of three distinct integers in ascending order\n                f = 1  # set the flag to 1\n\n    # print the result\n    if f:\n        print('YES')  # print \"YES\" if three distinct integers are found\n        print(*ans)  # print the three distinct integers\n    else:\n        print('NO')  # print \"NO\" if three distinct integers are not found\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize a flag `br` to 0, which will be used to track whether a valid triplet is found.\n4. Iterate over all numbers `i` from 2 to the square root of `n` (inclusive).\n5. For each `i`, check if `n` is divisible by `i`. If not, move to the next `i`.\n6. If `n` is divisible by `i`, set `x` to `i` and iterate over all numbers `j` from 2 to the square root of `i` (inclusive).\n7. For each `j`, check if `i` is divisible by `j` and if the set of numbers `[j, i//j, n//i]` contains three distinct integers. If both conditions are met, set `br` to 1 and print the triplet.\n8. If `br` is 1, break the loop and move to the next test case.\n9. If no valid triplet is found for `i`, iterate over all numbers `j` from 2 to the square root of `n//i` (inclusive).\n10. For each `j`, check if `(n//i)` is divisible by `j` and if the set of numbers `[i, (n//i)//j, j]` contains three distinct integers. If both conditions are met, set `br` to 1 and print the triplet.\n11. If `br` is 1, break the loop and move to the next test case.\n12. If no valid triplet is found for `i`, move to the next test case.\n13. If no valid triplet is found for all test cases, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom collections import defaultdict as dd\nfrom sys import stdin\ninput=stdin.readline\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n=int(input())\n    \n    # Initialize a flag to track whether a valid triplet is found\n    br=0\n    \n    # Iterate over all numbers i from 2 to the square root of n (inclusive)\n    for i in range(2,int(n**.5)+1):\n        # Check if n is divisible by i\n        if n%i==0:\n            # Set x to i\n            x=i\n            \n            # Iterate over all numbers j from 2 to the square root of i (inclusive)\n            for j in range(2,int(i**.5)+1):\n                # Check if i is divisible by j and if the set of numbers [j, i//j, n//i] contains three distinct integers\n                if i%j==0 and len(set([j,i//j,n//i]))==3:\n                    # Set br to 1 and print the triplet\n                    br=1\n                    print('YES')\n                    print(j,i//j,n//i)\n                    # Break the loop\n                    break\n            \n            # If br is 1, break the loop\n            if br:\n                break\n            \n            # Iterate over all numbers j from 2 to the square root of n//i (inclusive)\n            for j in range(2,int((n//i)**.5)+1):\n                # Check if (n//i) is divisible by j and if the set of numbers [i, (n//i)//j, j] contains three distinct integers\n                if (n//i)%j==0 and len(set([i,(n//i)//j,j]))==3:\n                    # Set br to 1 and print the triplet\n                    br=1\n                    print('YES')\n                    print(i,(n//i)//j,j)\n                    # Break the loop\n                    break\n            \n            # If br is 1, break the loop\n            if br:\n                break\n    \n    # If no valid triplet is found for the current test case, print \"NO\"\n    if br:\n        continue\n    else:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case, reading the integer `n` from the input.\n3. Initialize an empty list `ans` to store the distinct integers `a`, `b`, and `c`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find the first factor `i` of `n`.\n5. If `n` is divisible by `i` and `n//i` is not equal to `i`, add `i` to `ans` and set `o` to `n//i`. Break the loop as we have found the first factor.\n6. Iterate from 2 to the square root of `o` (inclusive) to find the factors of `o`.\n7. If `o` is divisible by `i` and `i` is not already in `ans`, add `i` and `o//i` to `ans`. Break the loop as we have found the second and third factors.\n8. If the length of `ans` is 3, print \"YES\" and the elements of `ans`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the distinct integers a, b, c\n    ans = []\n    \n    # Initialize a variable to store the second factor\n    o = 0\n    \n    # Iterate from 2 to the square root of n (inclusive) to find the first factor\n    for i in range(2, int(n**0.5) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Check if n//i is not equal to i (to avoid perfect squares)\n            if n // i == i:\n                continue\n            # Add i to ans and set o to n//i\n            ans.append(i)\n            o = n // i\n            \n            # Break the loop as we have found the first factor\n            break\n    \n    # Iterate from 2 to the square root of o (inclusive) to find the factors of o\n    for i in range(2, int(o**0.5) + 1):\n        # Check if o is divisible by i\n        if o % i == 0:\n            # Check if i is not already in ans\n            if i not in ans:\n                # Check if i is not equal to o//i (to avoid perfect squares)\n                if i == o // i:\n                    continue\n                # Add i and o//i to ans\n                ans.append(i)\n                ans.append(o // i)\n                \n                # Break the loop as we have found the second and third factors\n                break\n    \n    # Check if the length of ans is 3\n    if len(ans) == 3:\n        # Print \"YES\" and the elements of ans\n        print(\"YES\")\n        print(*ans)\n        continue\n    # Print \"NO\" if the length of ans is not 3\n    print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `factors` to store the prime factors of `n`.\n4. Initialize a variable `found` to `False` to track whether a valid triplet is found.\n5. Iterate from `i = 2` to the square root of `n` (inclusive) to find prime factors.\n6. For each `i`, check if `n` is divisible by `i`. If it is, add `i` to the `factors` list and divide `n` by `i`.\n7. If the length of `factors` is 3 or more, construct a valid triplet by taking the first two prime factors and the remaining value of `n` divided by their product.\n8. If the length of `factors` is 2, construct a valid triplet by taking the two prime factors and the remaining value of `n` divided by their product. Check if the remaining value is a prime factor or 1. If it is, print \"NO\".\n9. If the length of `factors` is 1, check if the single prime factor has a power less than 6. If it does, check if its power is less than 3. If it is, print \"NO\". Otherwise, construct a valid triplet by taking the prime factor and its square, and the remaining value of `n` divided by their product.\n10. If the length of `factors` is 0, print \"NO\".\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\n\ndef yes(factors):  # Function to print a valid triplet\n\tprint('YES')\n\tprint(' '.join(map(str, factors)))  # Print the triplet\n\ndef no():  # Function to print \"NO\"\n\tprint('NO')\n\nfor _ in range(t):  # Iterate over each test case\n\ttemp = n = int(input())  # Read the integer n\n\tfactors = []  # Initialize an empty list to store prime factors\n\ti = 2  # Initialize a variable to iterate from 2 to sqrt(n)\n\tfound = False  # Initialize a flag to track whether a valid triplet is found\n\n\twhile(i <= pow(n, 1/2)):  # Iterate from 2 to sqrt(n)\n\t\twhile(n % i == 0):  # Check if n is divisible by i\n\t\t\tif len(factors) == 0 or i not in factors[-1]:  # Check if i is a new prime factor\n\t\t\t\tfactors.append({i:1})  # Add i to the factors list\n\t\t\telse:\n\t\t\t\tfactors[-1][i] += 1  # Increment the power of i in the factors list\n\n\t\t\tn //= i  # Divide n by i\n\t\ti += 1  # Increment i\n\n\tif len(factors) >= 3:  # If there are 3 or more prime factors\n\t\trv = [list(factors[0].keys())[0], list(factors[1].keys())[0]]  # Take the first two prime factors\n\t\ttemp //= rv[0]  # Divide temp by the first prime factor\n\t\ttemp //= rv[1]  # Divide temp by the second prime factor\n\t\trv.append(temp)  # Add the remaining value to the triplet\n\t\tyes(rv)  # Print the triplet\n\n\telif len(factors) == 2:  # If there are 2 prime factors\n\t\trv = [list(factors[0].keys())[0], list(factors[1].keys())[0]]  # Take the two prime factors\n\t\ttemp //= rv[0]  # Divide temp by the first prime factor\n\t\ttemp //= rv[1]  # Divide temp by the second prime factor\n\t\tif temp == rv[0] or temp == rv[1] or temp == 1:  # Check if the remaining value is a prime factor or 1\n\t\t\tno()  # Print \"NO\"\n\t\telse:\n\t\t\trv.append(temp)  # Add the remaining value to the triplet\n\t\t\tyes(rv)  # Print the triplet\n\n\telif len(factors) == 1:  # If there is 1 prime factor\n\t\tfactor = list(factors[0].keys())[0]  # Take the single prime factor\n\t\tif factors[0][factor] < 6:  # Check if the power of the prime factor is less than 6\n\t\t\tif(factors[0][factor] < 3):  # Check if the power of the prime factor is less than 3\n\t\t\t\tno()  # Print \"NO\"\n\t\t\telse:\n\t\t\t\trv = [factor, factor*factor]  # Construct a valid triplet\n\t\t\t\ttemp //= rv[0]  # Divide temp by the first prime factor\n\t\t\t\ttemp //= rv[1]  # Divide temp by the second prime factor\n\t\t\t\tif temp == rv[0] or temp == rv[1] or temp == 1:  # Check if the remaining value is a prime factor or 1\n\t\t\t\t\tno()  # Print \"NO\"\n\t\t\t\telse:\n\t\t\t\t\trv.append(temp)  # Add the remaining value to the triplet\n\t\t\t\t\tyes(rv)  # Print the triplet\n\n\telse:  # If there are no prime factors\n\t\tno()  # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. First, we need to precompute all prime numbers up to the square root of the maximum possible input number (10^9). This is done to optimize the prime factorization process.\n2. For each test case, we take the input number and perform prime factorization using the precomputed prime numbers.\n3. We keep dividing the input number by the smallest prime factor until it is no longer divisible. This process is repeated until the input number is reduced to 1 or a prime number.\n4. If the input number is reduced to 1, it means that the number is a perfect cube of a prime number, and we print \"NO\".\n5. Otherwise, we have three distinct prime factors (a, b, c) such that a * b * c = n. We print \"YES\" and the three prime factors.\n6. If the input number is reduced to a prime number, we repeat the process with the remaining number (n / a) to find the second prime factor (b).\n7. If the remaining number is reduced to 1, it means that the number is a perfect square of a prime number, and we print \"NO\".\n8. Otherwise, we have two distinct prime factors (b, c) such that b * c = n / a. We print \"YES\" and the three prime factors (a, b, c).\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Precompute all prime numbers up to the square root of the maximum possible input number\nn = int(input())\narr = []  # list to store prime numbers\nroot = math.sqrt(1000000000)\nfor num in range(2, int(root) + 1):\n    isSimple = True  # flag to check if a number is prime\n    for delimiter in range(2, int(math.sqrt(num)) + 1):\n        if num % delimiter == 0:\n            isSimple = False  # if the number is divisible by any number, it's not prime\n            break\n    if isSimple:\n        arr.append(num)  # add prime number to the list\n\ndef foo(num):\n    # Perform prime factorization using the precomputed prime numbers\n    isSimple = True\n    k = 0\n    while k < arr.__len__() and arr[k] <= math.sqrt(num):\n        if num % arr[k] == 0:\n            isSimple = False  # if the number is divisible by a prime number, it's not simple\n            num = num / arr[k]  # divide the number by the prime factor\n            break\n        k += 1\n    return num\n\nfor i in range(n):\n    num = int(input())\n    res = foo(num)\n    if res == num:\n        # if the number is reduced to 1, it means that the number is a perfect cube of a prime number\n        print(\"NO\")\n        continue\n    else:\n        d1 = num / res  # calculate the first prime factor\n        num = res\n\n    res = foo(num)\n    if res == num:\n        # if the remaining number is reduced to 1, it means that the number is a perfect square of a prime number\n        print(\"NO\")\n        continue\n    else:\n        d2 = num / res  # calculate the second prime factor\n        num = res\n\n    if d1 == d2: \n        # if the two prime factors are the same, calculate the third prime factor\n        res = foo(num)\n        if res == num:\n            # if the remaining number is reduced to 1, it means that the number is a perfect cube of a prime number\n            print(\"NO\")\n            continue\n        d2 *= num / res  # calculate the third prime factor\n        num = res\n\n    if d1!= num and d2!= num and d1!= d2:\n        # if we have three distinct prime factors, print \"YES\" and the three prime factors\n        print(\"YES\")\n        print(\"%d %d %d\" % (d1, d2, res))\n    else:\n        # if we don't have three distinct prime factors, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the number `n`.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. Initialize a variable `amult` to store the product of all prime factors except the first and last one.\n5. Check if the number of distinct prime factors is less than 3. If so, print \"NO\".\n6. If the number of distinct prime factors is 2, check if there are at least 4 prime factors. If so, print \"YES\" and the first, last, and `amult` as the three distinct integers.\n7. If the number of distinct prime factors is 1, check if there are at least 6 prime factors. If so, print \"YES\" and the first, twice the first, and `n` divided by the cube of the first as the three distinct integers.\n8. If none of the above conditions are met, print \"NO\".\n9. If a valid solution is found, print \"YES\" and the three distinct integers.\n\nCOMMENTED CODE:\n```python\nimport sys, os, io\n\ndef rs(): return sys.stdin.readline().rstrip()  # read a string\ndef ri(): return int(sys.stdin.readline())  # read an integer\ndef ria(): return list(map(int, sys.stdin.readline().split()))  # read a list of integers\ndef ws(s): sys.stdout.write(s + '\\n')  # write a string\ndef wi(n): sys.stdout.write(str(n) + '\\n')  # write an integer\ndef wia(a): sys.stdout.write(' '.join([str(x) for x in a]) + '\\n')  # write a list of integers\n\ndef primeFactors(n):  # find prime factors of a number\n    pf = []  # initialize an empty list to store prime factors\n    # Print the number of two's that divide n\n    while n % 2 == 0:  # while n is divisible by 2\n        pf.append(2)  # add 2 to the list of prime factors\n        n = n / 2  # divide n by 2\n    # n must be odd at this point\n    # so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):  # iterate from 3 to sqrt(n) with a step of 2\n        # while i divides n, print i and divide n\n        while n % i == 0:  # while n is divisible by i\n            pf.append(int(i))  # add i to the list of prime factors\n            n = n / i  # divide n by i\n    # Condition if n is a prime number greater than 2\n    if n > 2:  # if n is greater than 2\n        pf.append(int(n))  # add n to the list of prime factors\n    return pf  # return the list of prime factors\n\ndef main():\n    starttime = datetime.datetime.now()\n    if (os.path.exists('input.txt')):\n        sys.stdin = open(\"input.txt\", \"r\")\n        sys.stdout = open(\"output.txt\", \"w\")\n\n    # Solving Area Starts-->\n    for _ in range(ri()):  # for each test case\n        n = ri()  # read the number\n        a = primeFactors(n)  # find prime factors of n\n        amult = 1  # initialize amult to 1\n        for i in range(1, len(a) - 1):  # iterate from the second prime factor to the second last prime factor\n            amult = amult * a[i]  # multiply amult by the current prime factor\n\n        # print(a)\n        t = 0  # initialize t to 0\n        if len(a) < 3:  # if the number of prime factors is less than 3\n            print(\"NO\")  # print \"NO\"\n        else:\n            z = len(set(a))  # find the number of distinct prime factors\n            if z >= 3:  # if the number of distinct prime factors is greater than or equal to 3\n                print(\"YES\")  # print \"YES\"\n                ans = [a[0], a[-1], amult]  # initialize ans with the first, last, and amult\n                t = 1  # set t to 1\n            if z == 2:  # if the number of distinct prime factors is 2\n                if len(a) >= 4:  # if there are at least 4 prime factors\n                    print(\"YES\")  # print \"YES\"\n                    ans = [a[0], a[-1], amult]  # initialize ans with the first, last, and amult\n                    t = 1  # set t to 1\n                if t == 0:  # if t is still 0\n                    print(\"NO\")  # print \"NO\"\n            if z == 1:  # if the number of distinct prime factors is 1\n                if len(a) >= 6:  # if there are at least 6 prime factors\n                    print(\"YES\")  # print \"YES\"\n                    ans = [a[0], a[0] * 2, n // (a[0] ** 3)]  # initialize ans with the first, twice the first, and n divided by the cube of the first\n                    t = 1  # set t to 1\n            if t == 1:  # if t is 1\n                print(*ans)  # print the three distinct integers\n\n    # <--Solving Area Ends\n    endtime = datetime.datetime.now()\n    time = (endtime - starttime).total_seconds() * 1000\n    if (os.path.exists('input.txt')):\n        print(\"Time:\", time, \"ms\")\n\nclass FastReader(io.IOBase):\n    newlines = 0\n\n    def __init__(self, fd, chunk_size=1024 * 8):\n        self._fd = fd\n        self._chunk_size = chunk_size\n        self.buffer = io.BytesIO()\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, self._chunk_size))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self, size=-1):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, self._chunk_size if size == -1 else size))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n\nclass FastWriter(io.IOBase):\n\n    def __init__(self, fd):\n        self._fd = fd\n        self.buffer = io.BytesIO()\n        self.write = self.buffer.write\n\n    def flush(self):\n        os.write(self._fd, self.buffer.getvalue())\n        self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass FastStdin(io.IOBase):\n    def __init__(self, fd=0):\n        self.buffer = FastReader(fd)\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nclass FastStdout(io.IOBase):\n    def __init__(self, fd=1):\n        self.buffer = FastWriter(fd)\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.flush = self.buffer.flush\n\n\nif __name__ == '__main__':\n    sys.stdin = FastStdin()\n    sys.stdout = FastStdout()\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize a flag `f` to 0, which will be used to track whether a valid solution is found.\n5. Iterate from 2 to the square root of `n` (inclusive) to find a factor `a` of `n`.\n6. If `n` is divisible by `a`, calculate `k` as `n` divided by `a`.\n7. Iterate from 2 to the square root of `k` (inclusive) to find a factor `b` of `k` such that `b` is not equal to `a` and `k` divided by `b` is not equal to `a` and `b` is not equal to `k` divided by `b`.\n8. If such a factor `b` is found, set `c` as `k` divided by `b`, set `f` to 1, and break the inner loop.\n9. If `f` is 1, break the outer loop.\n10. If `f` is still 0 after the outer loop, print \"NO\".\n11. Otherwise, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor _ in range(t):  # Iterate t times to process each test case\n    n = int(input())  # Read the integer n for the current test case\n    f = 0  # Initialize a flag to track whether a valid solution is found\n    for i in range(2, int(n**0.5)+1):  # Iterate from 2 to the square root of n\n        if n % i == 0:  # Check if n is divisible by i\n            a = i  # Set a as the current factor\n            k = n // a  # Calculate k as n divided by a\n            for j in range(2, int(k ** 0.5)+1):  # Iterate from 2 to the square root of k\n                if k % j == 0 and j!= a and k // j!= a and j!= k // j:  # Check if k has a factor j that meets the conditions\n                    b = j  # Set b as the current factor\n                    c = k // j  # Set c as k divided by b\n                    f = 1  # Set the flag to 1\n                    break  # Break the inner loop\n            if f == 1:  # If a valid solution is found, break the outer loop\n                break\n    if f == 0:  # If no valid solution is found\n        print(\"NO\")  # Print \"NO\"\n    else:  # Otherwise\n        print(\"YES\")  # Print \"YES\"\n        print(a, b, c, sep=\" \")  # Print the values of a, b, and c\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case `l` from 0 to `t-1`.\n3. Read the value of `n` for the current test case.\n4. Find all factors of `n` using the `factors` function.\n5. Iterate over each pair of factors `(factor[i], factor[j])` where `i < j`.\n6. Check if `n` can be represented as the product of `factor[i]`, `factor[j]`, and another distinct factor `k`.\n7. If such a representation is found, print \"YES\" and the values of `factor[i]`, `factor[j]`, and `k`.\n8. If no such representation is found after checking all pairs of factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\ndef factors(n):\n    # Find all factors of n\n    factor = []\n    for i in range(2, int(n**0.5)+1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If divisible, add i to the list of factors\n            factor.append(i)\n    return factor\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor l in range(t):\n    # Read the value of n for the current test case\n    n = int(input())\n    x = 0  # Flag to indicate if a solution is found\n    factor = factors(n)  # Find all factors of n\n    lenfactor = len(factor)  # Get the number of factors\n\n    # Iterate over each pair of factors\n    for i in range(lenfactor):\n        for j in range(i+1, lenfactor):\n            # Calculate the third factor k\n            k = n/(factor[i]*factor[j])\n            # Check if k is an integer and distinct from factor[i] and factor[j]\n            if k%1 == 0 and k!= factor[i] and k!= factor[j]:\n                # If a solution is found, print \"YES\" and the values of factor[i], factor[j], and k\n                print('YES')\n                print(str(factor[i]) +'' + str(factor[j]) +'' + str(int(k)))\n                x = 1  # Set the flag to 1\n                break\n        # If a solution is found, break out of the inner loop\n        if x == 1:\n            break\n    # If no solution is found after checking all pairs of factors, print \"NO\"\n    if x == 0:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Read `t` integers `n` from the input, one per test case.\n3. Generate all prime numbers up to the square root of the maximum `n` using the Sieve of Eratosthenes algorithm.\n4. For each `n`, find its prime factorization using the `get_fact` function.\n5. If the prime factorization has exactly three distinct prime factors or has two prime factors with a combined exponent of more than 2, construct the three integers `a`, `b`, and `c` by selecting the prime factors and their exponents accordingly.\n6. If the prime factorization has only one prime factor with an exponent of at least 6, construct the three integers `a`, `b`, and `c` by selecting the prime factor and its exponent accordingly.\n7. If a valid construction is found, print \"YES\" followed by the constructed integers `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin, stdout\nfrom math import sqrt\nfrom collections import Counter\n\n# Set to store prime numbers and a list to store all prime numbers for easy access\nprimes, primes_list = set([2]), None\ncomposites = set()  # Set to store composite numbers\n\ndef gen_primes(n):\n    # Generate all prime numbers up to n using the Sieve of Eratosthenes algorithm\n    for i in range(3, n+1, 2):\n        if i not in composites:\n            primes.add(i)\n            for j in range(i*2, n+1, i):\n                composites.add(j)\n\ndef get_fact(n):\n    # Find the prime factorization of n\n    fact = []\n    if n not in primes:\n        # If n is not a prime number, find its prime factors\n        for p in primes_list:\n            if n % p == 0:\n                c = 0\n                while n % p == 0:\n                    n //= p\n                    c += 1\n                fact.append((p, c))\n                if n == 1:\n                    break\n                elif len(fact) > 1:\n                    # If n has more than two prime factors, append the remaining prime factor\n                    fact.append((n, 1))\n                    break\n        else:\n            # If n has only one prime factor, append it\n            fact.append((n, 1))\n    return fact\n\n\nt = int(stdin.readline().strip())\nns = [int(stdin.readline().strip()) for _ in range(t)]\n# Generate all prime numbers up to the square root of the maximum n\ngen_primes(int(sqrt(max(ns))) + 1)\nprimes_list = list(primes)\nprimes_list.sort()\n\nfor n in ns:\n    fact = get_fact(n)\n    # Construct the three integers a, b, and c based on the prime factorization\n    div = []\n    if len(fact) == 3 or (len(fact) == 2 and fact[0][1] + fact[1][1] - 2 > 1):\n        # If the prime factorization has exactly three distinct prime factors or has two prime factors with a combined exponent of more than 2\n        a, b = fact[0][0], fact[1][0]\n        div = [a, b, (n // a) // b]\n    elif len(fact) == 1 and fact[0][1] >= 6:\n        # If the prime factorization has only one prime factor with an exponent of at least 6\n        a = fact[0][0]\n        b = a * a\n        div = [a, b, (n // a) // b]\n\n    if div:\n        # If a valid construction is found, print \"YES\" followed by the constructed integers\n        stdout.write(\"YES\\n{} {} {}\\n\".format(*div))\n    else:\n        # Otherwise, print \"NO\"\n        stdout.write(\"NO\\n\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case.\n3. For each test case, read the integer `n` from the input.\n4. Find the smallest divisor `a` of `n` greater than or equal to 2 using the `divide` function.\n5. If `a` is equal to `n`, it means `n` is a prime number and cannot be represented as a product of three distinct integers. Print \"NO\" and move to the next test case.\n6. Divide `n` by `a` to get a new value `n`.\n7. Find the smallest divisor `b` of `n` greater than `a` using the `divide` function.\n8. If `b` is equal to `n`, it means `n` cannot be represented as a product of three distinct integers. Print \"NO\" and move to the next test case.\n9. Divide `n` by `b` to get a new value `n`.\n10. If `n` is less than or equal to `b`, it means `n` cannot be represented as a product of three distinct integers. Print \"NO\" and move to the next test case.\n11. Print \"YES\" and the values of `a`, `b`, and `n`.\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\ndef divide(n, start):\n    # Find the smallest divisor of n starting from start\n    for k in range(start, int(sqrt(n)) + 1):\n        if n % k == 0:\n            return k\n    # If no divisor is found, return n\n    return n\n\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find the smallest divisor a of n greater than or equal to 2\n    a = divide(n, 2)\n    # If a is equal to n, it means n is a prime number and cannot be represented as a product of three distinct integers\n    if a == n:\n        print('NO')\n        continue\n    # Divide n by a to get a new value n\n    n //= a\n    # Find the smallest divisor b of n greater than a\n    b = divide(n, a + 1)\n    # If b is equal to n, it means n cannot be represented as a product of three distinct integers\n    if b == n:\n        print('NO')\n        continue\n    # Divide n by b to get a new value n\n    n //= b\n    # If n is less than or equal to b, it means n cannot be represented as a product of three distinct integers\n    if n <= b:\n        print('NO')\n        continue\n    # Print \"YES\" and the values of a, b, and n\n    print('YES')\n    print(a, b, n)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find the prime factors of `n` using the `primeFactors` function.\n4. Check the number of distinct prime factors:\n   - If there are more than 2 distinct prime factors, it is possible to represent `n` as `a * b * c` for distinct integers `a`, `b`, and `c`. Print \"YES\" and the prime factors `a` and `b`, and the product of `n` divided by `a * b`.\n   - If there is only 1 distinct prime factor, check if its exponent is greater than or equal to 6. If so, it is possible to represent `n` as `a * a * a` for distinct integers `a`. Print \"YES\" and the prime factor `a` repeated twice, and the product of `n` divided by `a * a * a`. Otherwise, print \"NO\".\n   - If there are exactly 2 distinct prime factors, check if the product of the remaining prime factor and one of the prime factors is not a prime factor of `n`. If so, it is possible to represent `n` as `a * b * c` for distinct integers `a`, `b`, and `c`. Print \"YES\" and the two prime factors, and the product of `n` divided by the product of the two prime factors. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\nfrom collections import defaultdict as dq\n\ndef primeFactors(n): \n    # Create a dictionary to store the prime factors and their exponents\n    d = dq(int)\n    \n    # Divide n by 2 until it is no longer divisible\n    while n % 2 == 0: \n        # Increment the exponent of 2 in the dictionary\n        d[2] += 1\n        # Divide n by 2\n        n = n // 2\n\n    # Iterate over odd numbers up to the square root of n\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        # While n is divisible by i, increment the exponent of i in the dictionary and divide n by i\n        while n % i == 0: \n            d[i] += 1\n            n = n // i \n    # If n is greater than 1, it means n is a prime number, so increment its exponent in the dictionary\n    if n > 1:\n        d[n] += 1\n    # Return the dictionary of prime factors and their exponents\n    return d\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find the prime factors of n\n    s = primeFactors(n)\n    \n    # Check the number of distinct prime factors\n    if len(s) > 2:\n        # If there are more than 2 distinct prime factors, it is possible to represent n as a * b * c\n        c = 0\n        li = []\n        for i in s.keys():\n            # Add the prime factor to the list and increment the count\n            li.append(i)\n            c += 1\n            # If we have found 2 prime factors, break the loop\n            if c == 2:\n                break\n        # Print \"YES\" and the two prime factors and the product of n divided by the product of the two prime factors\n        print(\"YES\")\n        print(li[0], li[1], n // (li[0] * li[1]))\n    \n    # Check if there is only 1 distinct prime factor\n    if len(s) == 1:\n        # Get the only prime factor\n        for i in s.keys():\n            c = i\n        # Check if the exponent of the prime factor is greater than or equal to 6\n        if s[c] >= 6:\n            # If so, it is possible to represent n as a * a * a\n            print(\"YES\")\n            print(c, c * c, n // (c * c * c))\n        else:\n            # Otherwise, print \"NO\"\n            print(\"NO\")\n    \n    # Check if there are exactly 2 distinct prime factors\n    if len(s) == 2:\n        # Get the two prime factors\n        li = []\n        for i in s.keys():\n            li.append(i)\n        # Check if the product of the remaining prime factor and one of the prime factors is not a prime factor of n\n        if n // (li[0] * li[1]) in s.keys() or n // (li[0] * li[1]) == 1:\n            # If so, print \"NO\"\n            print(\"NO\")\n        else:\n            # Otherwise, it is possible to represent n as a * b * c\n            print(\"YES\")\n            print(li[0], li[1], n // (li[0] * li[1]))\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `divisorarr` to store the prime factors of `n`.\n5. Iterate from 2 to the square root of `n` (inclusive) to find the prime factors of `n`.\n6. If `n` is divisible by the current divisor, add it to `divisorarr` and keep dividing `n` by the divisor until it's no longer divisible.\n7. If `n` is not 1 after the loop, it means `n` itself is a prime factor, so add it to `divisorarr`.\n8. Check if the length of `divisorarr` is less than 3. If it is, print \"NO\" because it's impossible to find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`.\n9. If the length of `divisorarr` is 3 or more, proceed to find the values of `a`, `b`, and `c`.\n10. Assign the first two elements of `divisorarr` to `a` and `b`.\n11. Iterate from the third element of `divisorarr` to find the value of `c`. Multiply the current element with `b` and update `b` until a different element is found.\n12. Multiply the remaining elements of `divisorarr` to find the value of `c`.\n13. Check if `a`, `b`, and `c` are distinct. If they are not, print \"NO\".\n14. If `a`, `b`, and `c` are distinct, print \"YES\" and the values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\n\nfor i in range(t):  # Iterate over each test case\n    n = int(input())  # Read the integer n for the current test case\n\n    divisorarr = []  # Initialize an empty list to store prime factors\n\n    for divisor in range(2, int(n ** 0.5) + 2):  # Iterate from 2 to sqrt(n)\n        if n % divisor == 0:  # Check if n is divisible by the current divisor\n            while n % divisor == 0:  # Keep dividing n by the divisor until it's no longer divisible\n                n = n // divisor\n                divisorarr.append(divisor)  # Add the divisor to the list\n    if n!= 1:  # If n is not 1 after the loop, it means n itself is a prime factor\n        divisorarr.append(n)  # Add n to the list\n\n    if len(divisorarr) < 3:  # Check if the length of divisorarr is less than 3\n        print('NO')  # If it is, print \"NO\" because it's impossible to find three distinct integers a, b, and c such that a * b * c = n\n    else:\n        a = divisorarr[0]  # Assign the first element of divisorarr to a\n        b = divisorarr[1]  # Assign the second element of divisorarr to b\n        index = 2  # Initialize an index to start iterating from the third element\n        while b == a and index < len(divisorarr) - 1:  # Check if b is equal to a and update b until a different element is found\n            b *= divisorarr[index]  # Multiply b with the current element\n            index += 1  # Increment the index\n        c = 1  # Initialize c to 1\n        for divisor in range(index, len(divisorarr)):  # Multiply the remaining elements of divisorarr to find the value of c\n            c *= divisorarr[divisor]\n        if not a!= b!= c!= a:  # Check if a, b, and c are distinct\n            print('NO')  # If they are not, print \"NO\"\n        else:\n            print('YES')  # If they are distinct, print \"YES\"\n            print(a, b, c)  # Print the values of a, b, and c\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `ans` to store the factors of `n`.\n5. Iterate from 2 to `n-1` to find the first factor of `n`.\n6. If `n` is divisible by the current number `i`, add `i` to `ans` and break the loop.\n7. If `i` squared is greater than `n`, break the loop.\n8. If `ans` is empty or the first element of `ans` squared is greater than or equal to `n`, print \"NO\" and continue to the next test case.\n9. Divide `n` by the first element of `ans` to find the remaining factors.\n10. Iterate from the first element of `ans` to `n//ans[0]` to find the second factor of `n`.\n11. If `n` is divisible by the current number `i` and `i` is not equal to the first element of `ans`, add `i` to `ans` and divide `n` by `i`. Break the loop.\n12. If `i` squared is greater than `n`, break the loop.\n13. If `ans` has only one element, print \"NO\" and continue to the next test case.\n14. If the remaining value of `n` is not equal to the first element of `ans` and not equal to the second element of `ans`, add `n` to `ans`.\n15. Print \"YES\" and the elements of `ans`.\n16. If the remaining value of `n` is equal to the first element of `ans` or the second element of `ans`, print \"NO\".\n\nCOMMENTED CODE:\n```python\nI  = input # Import the input function\n\n# Iterate t times to process each test case\nfor _ in [0]*int(I()):\n    # Read the integer n from the input\n    temp = int(I())\n    # Initialize an empty list ans to store the factors of n\n    ans = []\n    \n    # Iterate from 2 to n-1 to find the first factor of n\n    for i in range(2,temp,1):\n        # If n is divisible by the current number i\n        if(temp % i == 0):\n            # Add i to ans and break the loop\n            ans.append(i)\n            break\n        # If i squared is greater than n, break the loop\n        elif i *i > temp:\n            break\n    \n    # If ans is empty or the first element of ans squared is greater than or equal to n\n    if(len(ans) == 0 or ans[0]*ans[0] >= temp):\n        # Print \"NO\" and continue to the next test case\n        print(\"NO\");continue\n    \n    # Divide n by the first element of ans to find the remaining factors\n    temp //= ans[0]\n    \n    # Iterate from the first element of ans to n//ans[0] to find the second factor of n\n    for i in range(ans[0],int(temp),1):\n        # If n is divisible by the current number i and i is not equal to the first element of ans\n        if(int(temp) % i == 0 and i!= ans[0]):\n            # Add i to ans and divide n by i. Break the loop\n            ans.append(i)\n            temp //= i\n            break\n        # If i squared is greater than n, break the loop\n        elif i *i > temp:\n            break\n    \n    # If ans has only one element, print \"NO\" and continue to the next test case\n    if(len(ans) == 1):\n        print(\"NO\");continue\n    \n    # If the remaining value of n is not equal to the first element of ans and not equal to the second element of ans\n    if(int(temp)!= ans[0] and int(temp)!= ans[1]):\n        # Add n to ans\n        ans.append(int(temp))\n        # Print \"YES\" and the elements of ans\n        print(\"YES\")\n        for i in ans:\n            print(i,end ='')\n        print('')\n    else:\n        # Print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the number `n`.\n4. Initialize an empty list `fac` to store the prime factors of `n`.\n5. Iterate from 2 to the square root of `n` to find its prime factors.\n6. For each prime factor `i`, count the number of times it divides `n` and store it in `fac`.\n7. If `n` is greater than 1 after the loop, it means `n` itself is a prime factor, so add it to `fac`.\n8. Check if `n` can be represented as a product of three distinct integers.\n9. If `n` has more than two prime factors or the sum of the powers of its two prime factors is greater than 3, it can be represented as a product of three distinct integers.\n10. If `n` has only one prime factor and its power is greater than or equal to 6, it can be represented as a product of three distinct integers.\n11. If none of the above conditions are met, print \"NO\".\n12. Otherwise, print \"YES\" and the three distinct integers.\n\nCOMMENTED CODE:\n```python\nt = int(input())  # Read the number of test cases\nfor _ in range(t):  # Iterate over each test case\n    n = int(input())  # Read the number for the current test case\n    nn = n  # Store the original value of n\n    fac = []  # Initialize an empty list to store prime factors\n    i = 2  # Initialize the variable to find prime factors\n    while i * i <= n:  # Iterate from 2 to the square root of n\n        cnt = 0  # Initialize the counter for the current prime factor\n        while n % i == 0:  # Count the number of times the current prime factor divides n\n            cnt += 1\n            n //= i\n        if cnt:  # If the current prime factor is found\n            fac.append((i, cnt))  # Store the prime factor and its power in fac\n        i += 1  # Move to the next potential prime factor\n    if n > 1:  # If n is greater than 1 after the loop, it means n itself is a prime factor\n        fac.append((n, 1))  # Store n as a prime factor with power 1\n    ok = False  # Initialize a flag to check if n can be represented as a product of three distinct integers\n    ans = None  # Initialize the variable to store the three distinct integers\n    if len(fac) > 2 or (len(fac) == 2 and fac[0][1] + fac[1][1] > 3):  # Check if n can be represented as a product of three distinct integers\n        ok = True  # Set the flag to True\n        ans = (fac[0][0], fac[1][0])  # Store the two distinct integers\n    elif len(fac) == 1 and fac[0][1] >= 6:  # Check if n can be represented as a product of three distinct integers with one prime factor\n        ok = True  # Set the flag to True\n        ans = (fac[0][0], int(fac[0][0] ** 2))  # Store the two distinct integers\n    if not ok:  # If n cannot be represented as a product of three distinct integers\n        print(\"NO\")  # Print \"NO\"\n    else:  # If n can be represented as a product of three distinct integers\n        print(\"YES\")  # Print \"YES\"\n        print(ans[0], ans[1], nn // ans[0] // ans[1])  # Print the three distinct integers\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `arr` to store the factors of `n`.\n4. Iterate from 2 to `n` (exclusive) to find factors of `n`.\n5. If `n` is divisible by the current number `i`, add `i` to `arr` and divide `n` by `i`.\n6. If `arr` has two elements or `n` is less than the square of the current number `i`, break the loop.\n7. Check if `n` is greater than 1 and not equal to the elements in `arr`. If true, print \"NO\".\n8. If `arr` has two elements and `n` is not equal to any element in `arr`, print \"YES\" and the elements in `arr` along with `n`.\n\nCOMMENTED CODE:\n```python\n\"\"\"\nAuthor : Aman Thakur\nmantra: chor kya hi kar sakte hai!!\n\"\"\"\nimport math\n\nclass Solution:\n    def __init__(self):\n        # Initialize an empty list to store factors of n\n        self.arr = []\n\n    def solution(self):\n        # Read the integer n for the current test case\n        n = int(input())\n\n        # Iterate from 2 to n (exclusive) to find factors of n\n        for i in range(2, n):\n            # Check if n is divisible by the current number i\n            if n % i == 0:\n                # Add i to arr and divide n by i\n                self.arr.append(i)\n                n //= i\n            # If arr has two elements or n is less than the square of the current number i, break the loop\n            if len(self.arr) == 2 or n < i*i:\n                break\n\n        # Check if n is greater than 1 and not equal to the elements in arr\n        if len(self.arr) == 2 and n!= self.arr[0] and n!= self.arr[1] and n > 1:\n            # Print \"YES\" and the elements in arr along with n\n            print('YES')\n            print(self.arr[0], self.arr[1], n)\n        else:\n            # Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c\n            print('NO')\n\n\nif __name__ == '__main__':\n    # Read the number of test cases t\n    for _ in range(int(input())):\n        # Create an instance of the Solution class\n        ob = Solution()\n        # Call the solution method for the current test case\n        ob.solution()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case, reading the integer `n` from the input.\n3. Initialize variables `j` to 2, `count` to 0, and an empty list `num`.\n4. Use a while loop to find the prime factors of `n`. The loop continues as long as `j` squared is less than or equal to `n`.\n5. Inside the loop, check if `n` is divisible by `j`. If it is, add `j` to the `num` list and increment `count`.\n6. If `count` reaches 2, break out of the loop.\n7. If `count` remains less than 2 after the loop, print \"NO\" and continue to the next test case.\n8. If `count` is 2, calculate the remaining factor `val` by dividing `n` by the product of the two factors in `num`.\n9. Check if `val` is a factor of `n` and if it is not already in `num`. If either condition is false, print \"NO\" and continue to the next test case.\n10. If both conditions are true, print \"YES\" and the three factors `num[0]`, `num[1]`, and `val`.\n\nCOMMENTED CODE:\n```python\nfrom math import *\n\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize variables\n    j = 2  # starting factor\n    count = 0  # count of factors found\n    num = []  # list to store factors\n    \n    # Find prime factors of n\n    while j**2 <= n:\n        # Check if n is divisible by j\n        if n % j == 0:\n            # Add j to the list of factors and increment count\n            num.append(j)\n            count += 1\n            \n            # If we've found two factors, break out of the loop\n            if count == 2:\n                break\n        # Increment j to check the next factor\n        j += 1\n    \n    # If we didn't find two factors, print \"NO\" and continue\n    if count < 2:\n        print(\"NO\")\n        continue\n    \n    # If we found two factors, calculate the remaining factor\n    if count == 2:\n        val = n // (num[0] * num[1])\n        \n        # Check if val is a factor of n and not already in num\n        if val in num:\n            print(\"NO\")\n            continue\n        if val * num[0] * num[1]!= n:\n            print(\"NO\")\n            continue\n        \n        # If both conditions are true, print \"YES\" and the three factors\n        print(\"YES\")\n        print(num[0], num[1], val)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty list `arr` to store the factors of `n`.\n4. Iterate from 2 to `n` (exclusive) to find factors of `n`.\n5. If `n` is divisible by the current number `i`, add `i` to `arr` and divide `n` by `i`.\n6. If `arr` has two elements or `n` is less than the square of the current number `i`, break the loop.\n7. Check if `n` is greater than 1 and not equal to the elements in `arr`. If true, print \"NO\".\n8. If `arr` has two elements and `n` is not equal to any element in `arr`, print \"YES\" and the elements in `arr` along with `n`.\n\nCOMMENTED CODE:\n```python\n\"\"\"\nAuthor : Aman Thakur\nmantra: chor kya hi kar sakte hai!!\n\"\"\"\nimport math\n\nclass Solution:\n    def __init__(self):\n        # Initialize an empty list to store factors\n        self.arr = []\n        # Initialize a counter for the number of factors found\n        self.c = 0\n\n    def solution(self):\n        # Read the integer n for the current test case\n        n = int(input())\n\n        # Iterate from 2 to n (exclusive) to find factors\n        for i in range(2, n):\n            # Check if n is divisible by the current number i\n            if n % i == 0:\n                # Add i to the list of factors\n                self.arr.append(i)\n                # Divide n by i\n                n //= i\n            # If arr has two elements or n is less than the square of i, break the loop\n            if len(self.arr) == 2 or n < i*i:\n                break\n\n        # Check if n is greater than 1 and not equal to any element in arr\n        if len(self.arr) == 2 and n!= self.arr[0] and n!= self.arr[1] and n > 1:\n            # Print \"YES\" and the elements in arr along with n\n            print('YES')\n            print(self.arr[0], self.arr[1], n)\n        else:\n            # Print \"NO\" if it's impossible to represent n as a * b * c\n            print('NO')\n\n\nif __name__ == '__main__':\n    # Read the number of test cases\n    for _ in range(int(input())):\n        # Create an instance of the Solution class\n        ob = Solution()\n        # Call the solution method for the current test case\n        ob.solution()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Calculate the square root of `n` and add 1 to it. This will be used as an upper bound for the loop.\n5. Initialize an empty list `a` to store the factors of `n`.\n6. Initialize an empty dictionary `d` to store the factor pairs of `n`.\n7. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n8. For each factor `i`, check if `n` is divisible by `i`. If it is, calculate `x` as `n` divided by `i`.\n9. Add `i` to the list `a` and store the factor pair `(i, x)` in the dictionary `d`.\n10. Initialize a flag `ch` to 1, which will be used to track whether a valid factorization is found.\n11. Iterate over the list `a` to find three distinct factors `a`, `b`, and `c` such that `a * b * c = n`.\n12. For each pair of factors `i` and `j` in `a`, check if the product `i * j` has a corresponding factor `x` in `d`. If it does, and `x` is not equal to `i` or `j`, set `ch` to 2 and break the loop.\n13. If `ch` is 2, print \"YES\" and the factorization `x`, `i`, and `j`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Calculate the square root of n and add 1 to it\n    sq = int(n ** 0.5 + 1)\n    \n    # Initialize an empty list to store the factors of n\n    a = []\n    \n    # Initialize an empty dictionary to store the factor pairs of n\n    d = {}\n    \n    # Iterate from 2 to the square root of n to find factors of n\n    for i in range(2, sq):\n        # Check if n is divisible by i\n        if (n % i) == 0:\n            # Calculate x as n divided by i\n            x = n // i\n            \n            # Add i to the list of factors\n            a.append(i)\n            \n            # Store the factor pair (i, x) in the dictionary\n            d[i] = x\n            d[x] = i\n    \n    # Initialize a flag to track whether a valid factorization is found\n    ch = 1\n    \n    # Iterate over the list of factors to find three distinct factors\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            try:\n                # Check if the product i * j has a corresponding factor x in d\n                x = d[a[i] * a[j]]\n                \n                # Check if x is not equal to i or j\n                if (x!= a[i]) and (x!= a[j]):\n                    # Set ch to 2 and break the loop\n                    ch = 2\n                    break\n            except:\n                # If x is not found in d, continue to the next iteration\n                continue\n        # If ch is 2, break the loop\n        if (ch == 2):\n            break\n    \n    # If a valid factorization is found, print \"YES\" and the factorization\n    if (ch == 2):\n        print(\"YES\")\n        print(x, a[i], a[j])\n    # Otherwise, print \"NO\"\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, find the square root of the given number `n` and iterate from 2 to the square root to find the first divisor `a` of `n`.\n3. If no divisor is found, it means `n` is a prime number, so print \"NO\" and move to the next test case.\n4. Iterate from `a + 1` to the square root of `n` to find the second divisor `b` such that `n` is divisible by `a * b`.\n5. If no such divisor is found, print \"NO\" and move to the next test case.\n6. Check if the third divisor `c` is distinct from `a` and `b` by verifying if `n / (a * b)` is not equal to 1 or either `a` or `b`.\n7. If `c` is distinct, print \"YES\" and the values of `a`, `b`, and `c`.\n8. If `c` is not distinct, print \"NO\" and move to the next test case.\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef ans(n):\n    # Find the first divisor 'a' of 'n'\n    a, b = -1, -1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:  # Check if 'i' is a divisor of 'n'\n            a = i  # Store the first divisor 'a'\n            break\n\n    # If no divisor is found, 'n' is a prime number\n    if a == -1:\n        print('NO')  # Print \"NO\" for prime numbers\n        return\n\n    # Find the second divisor 'b' such that 'n' is divisible by 'a * b'\n    for i in range(a + 1, int(math.sqrt(n)) + 1):\n        if (n % i == 0) & (n % (a * i) == 0):  # Check if 'i' is a divisor of 'n' and 'n' is divisible by 'a * i'\n            b = i  # Store the second divisor 'b'\n            break\n\n    # If no such divisor is found, print \"NO\"\n    if b == -1:\n        print('NO')\n        return\n\n    # Check if the third divisor 'c' is distinct from 'a' and 'b'\n    if (n / (a * b)!= 1) & (n / (a * b)!= a) & (n / (a * b)!= b):\n        print('YES')  # Print \"YES\" if 'c' is distinct\n        print(a, b, int(n / (a * b)))  # Print the values of 'a', 'b', and 'c'\n        return\n    print('NO')  # Print \"NO\" if 'c' is not distinct\n    return\n\nt = int(input())  # Read the number of test cases\nwhile t:\n    t -= 1  # Decrement the test case counter\n    n = int(input())  # Read the input number 'n' for the current test case\n    ans(n)  # Call the 'ans' function to process the test case\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, denoted as 't'.\n2. For each test case, read the integer 'n'.\n3. Initialize an empty dictionary 'd' to store the prime factors of 'n' and their respective counts.\n4. Iterate from 2 to the square root of 'n' (inclusive) to find its prime factors.\n5. For each prime factor 'i', divide 'n' by 'i' as long as 'n' is divisible by 'i'. Increment the count of 'i' in the dictionary 'd'.\n6. If 'n' is greater than 2 after the above loop, it means 'n' itself is a prime factor. Add it to the dictionary 'd' with a count of 1.\n7. Check the length of the dictionary 'd'.\n8. If the length is 0, it means 'n' is a prime number greater than 2, so print \"NO\".\n9. If the length is 1, it means 'n' has only one prime factor. If the count of this factor is greater than or equal to 6, print \"YES\" and the three numbers as the cube of the factor, the square of the factor, and the factor raised to the power of the remaining count.\n10. If the length is 2, it means 'n' has two prime factors. If the sum of their counts is greater than or equal to 4, print \"YES\" and the three numbers as the product of the two factors and the quotient of 'n' divided by the product of the two factors.\n11. If the length is greater than 2, it means 'n' has at least three prime factors. Print \"YES\" and the three numbers as the product of the first two factors raised to their respective powers, and the product of the remaining factors.\n\nCOMMENTED CODE:\n```python\nimport sys\nimport math\nfrom math import gcd\nfrom heapq import heappop\nfrom heapq import heappush\nfrom heapq import heapify\nfrom bisect import insort\nfrom bisect import bisect_right\nfrom bisect import bisect_left\nfrom sys import stdin,stdout\nfrom collections import defaultdict, deque\nfrom math import log2, ceil, floor\n\n# Read the number of test cases\nfor _ in range(inp()):\n    # Read the integer 'n'\n    n = inp()\n    # Initialize an empty dictionary 'd' to store the prime factors of 'n' and their respective counts\n    x = n\n    d = {}\n    # Iterate from 2 to the square root of 'n' (inclusive) to find its prime factors\n    i = 2 \n    while i*i <= x:\n        # Initialize the count of the current prime factor to 0\n        cnt = 0\n        # Divide 'n' by 'i' as long as 'n' is divisible by 'i'\n        while(n%i==0 and n!=0):\n            n = n//i\n            # Increment the count of 'i' in the dictionary 'd'\n            cnt += 1\n            d[i] = cnt \n        # Increment 'i' by 1\n        i += 1\n    # If 'n' is greater than 2 after the above loop, it means 'n' itself is a prime factor\n    if n>2:\n       # Add 'n' to the dictionary 'd' with a count of 1\n       d[n] = 1 \n    # Check the length of the dictionary 'd'\n    if len(d)==0:\n        # If the length is 0, it means 'n' is a prime number greater than 2, so print \"NO\"\n        print(\"NO\")\n    elif len(d)==1:\n        # If the length is 1, it means 'n' has only one prime factor\n        l = list(d.keys())\n        # If the count of this factor is greater than or equal to 6, print \"YES\" and the three numbers as the cube of the factor, the square of the factor, and the factor raised to the power of the remaining count\n        if d[l[0]]>=6:\n            print(\"YES\")\n            print(l[0],pow(l[0],2),pow(l[0],d[l[0]]-3))\n        else:\n            # Otherwise, print \"NO\"\n            print(\"NO\")\n    elif len(d)==2:\n        # If the length is 2, it means 'n' has two prime factors\n        l = list(d.keys())\n        # If the sum of their counts is greater than or equal to 4, print \"YES\" and the three numbers as the product of the two factors and the quotient of 'n' divided by the product of the two factors\n        if d[l[0]]+d[l[1]]>=4:\n            print(\"YES\")\n            print(l[0],l[1],x//(l[0]*l[1]))\n        else:\n            # Otherwise, print \"NO\"\n            print(\"NO\")\n\n    else:\n        # If the length is greater than 2, it means 'n' has at least three prime factors\n        l = list(d.keys())\n        # Print \"YES\" and the three numbers as the product of the first two factors raised to their respective powers, and the product of the remaining factors\n        print(\"YES\")\n        print(pow(l[0],d[l[0]]),pow(l[1],d[l[1]]),end=\" \")\n        ans = 1 \n        for i in range(2,len(l)):\n            ans *= pow(l[i],d[l[i]])\n        print(ans)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `lt` to store the prime factors of `n`.\n4. While `n` is divisible by 2, append 2 to `lt` and divide `n` by 2.\n5. Iterate from 3 to the square root of `n` (inclusive) with a step of 2. For each `i` in this range, while `n` is divisible by `i`, append `i` to `lt` and divide `n` by `i`.\n6. If `n` is greater than 2, append `n` to `lt`.\n7. Check the length of `lt` to determine the possible combinations of `a`, `b`, and `c`.\n8. If `lt` has more than 5 elements, print \"YES\" and the first three elements of `lt` as `a`, `b`, and `c`.\n9. If `lt` has less than 3 elements, print \"NO\" and move to the next test case.\n10. If `lt` has exactly 3 elements, check if they are distinct. If not, print \"NO\". Otherwise, print \"YES\" and the elements of `lt` as `a`, `b`, and `c`.\n11. If `lt` has exactly 4 elements, check if they are distinct. If not, print \"NO\". Otherwise, print \"YES\" and the elements of `lt` as `a`, `b`, `c`.\n12. If `lt` has exactly 5 elements, check the distinctness and combinations of the elements. Based on the combinations, print \"YES\" and the corresponding values of `a`, `b`, and `c`.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Initialize a tuple (n, 1) and an empty list lt\n    p = tuple((n, 1))\n    lt = []\n    \n    # While n is divisible by 2, append 2 to lt and divide n by 2\n    while n % 2 == 0: \n        lt.append(2) \n        n = n / 2\n    \n    # Iterate from 3 to the square root of n (inclusive) with a step of 2\n    for i in range(3,int(math.sqrt(n))+1,2): \n        # While n is divisible by i, append i to lt and divide n by i\n        while n % i== 0: \n            lt.append(i), \n            n = n / i\n    \n    # If n is greater than 2, append n to lt\n    if n > 2: \n        lt.append(int(n)) \n    \n    # If lt has more than 5 elements, print \"YES\" and the first three elements of lt as a, b, and c\n    if len(lt)>5:\n        print('YES')\n        print(lt[0], end =' ')\n        print(lt[1]*lt[2], end =' ')\n        print(int(p[0]/(lt[0]*lt[1]*lt[2])))\n    \n    # If lt has less than 3 elements, print \"NO\" and move to the next test case\n    if len(lt)<3:\n        print('NO')\n        continue\n    \n    # If lt has exactly 3 elements, check if they are distinct\n    if len(lt)==3:\n        if (lt[0]==lt[1] or lt[1]==lt[2] or lt[0]==lt[2]):\n            print('NO')\n            continue\n        else:\n            print('YES')\n            print(lt[0], end=' ')\n            print(lt[1], end=' ')\n            print(lt[2])\n            continue\n    \n    # If lt has exactly 4 elements, check if they are distinct\n    if len(lt)==4:\n        a=lt[0]\n        b=lt[1]*lt[2]\n        c=lt[3]\n        if a!=b and b!=c and c!=a:\n            print('YES')\n            print(a, end =' ')\n            print(b, end =' ')\n            print(c)\n            continue\n        else:\n            print('NO')\n            continue\n    \n    # If lt has exactly 5 elements, check the distinctness and combinations of the elements\n    if len(lt)==5:\n        if len(set(lt))==1:\n            print('NO')\n            continue\n        if len(set(lt))==2:\n            if lt[0]==lt[1]==lt[2]==lt[3]:\n                print('YES')\n                print(lt[0], end =' ')\n                print(lt[0]**3, end =' ')\n                print(lt[-1])\n                continue\n            elif lt[0]==lt[1]==lt[2] and lt[3]==lt[4]:\n                print('YES')\n                print(lt[0], lt[1]*lt[2], lt[3]*lt[4])\n            elif lt[0]==lt[1]and lt[2]==lt[3]==lt[4]:\n                print('YES')\n                print(lt[0]**2, lt[2], lt[2]**2)\n            else:\n                print('YES')\n                print(lt[0], end =' ')\n                print(lt[1]**3, end =' ')\n                print(lt[1])\n                continue\n        if len(set(lt))==3:\n            if lt[0]==lt[1]==lt[2]:\n                print('YES')\n                print(lt[0]**3, lt[-2], lt[-1])\n                continue\n            if lt[1]!=lt[0] and lt[2]==lt[1] and lt[3]==lt[4]:\n                print(\"YES\")\n                print(lt[0], lt[1]*lt[2], lt[3]*lt[4])\n                continue\n            if lt[0]==lt[1] and lt[3]==lt[4]:\n                print('YES')\n                print(lt[0]*lt[1], lt[2], lt[3]*lt[4])\n                continue\n            if lt[0]==lt[1] and lt[3]==lt[2]:\n                print(\"YES\")\n                print(lt[0]*lt[1], lt[2]*lt[3], lt[4])\n            if lt[1]==lt[2]==lt[3]:\n                print('YES')\n                print(lt[0], lt[1]**3, lt[-1])\n                continue\n            if lt[-1]==lt[-2]==lt[-3]:\n                print('YES')\n                print(lt[0], lt[1], lt[2]**3)\n                continue\n        if len(set(lt))==4:\n            print('YES')\n            print(lt[0], lt[2]*lt[1], lt[3]*lt[4])\n            continue\n        if len(set(lt))==5:\n            print('YES')\n            print(lt[0],lt[1], lt[2]*lt[3]*lt[4])\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Find the smallest divisor `a` of `n` greater than or equal to 2 using the `min_del` function.\n5. Calculate `ab` by dividing `n` by `a`.\n6. Find the smallest divisor `b` of `ab` greater than `a` using the `min_del` function.\n7. Calculate `c` by dividing `n` by `b` and `a`.\n8. Check if `c` is distinct from `a` and `b` and greater than 1.\n9. If the condition in step 8 is true, print \"YES\" and the values of `a`, `b`, and `c`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom collections import Counter\n\n# Function to find the smallest divisor of n greater than or equal to mn\ndef min_del(n, mn):\n    # Iterate from max(2, mn) to the square root of n (inclusive)\n    for x in range(max(2, mn), int(n **.5) + 1):\n        # Check if n is divisible by x\n        if n % x == 0:\n            # If divisible, return x as the smallest divisor\n            return x\n    # If no divisor is found, return n itself\n    return n\n\n# Read the number of test cases\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Find the smallest divisor a of n greater than or equal to 2\n    a = min_del(n, 1)\n    \n    # Calculate ab by dividing n by a\n    ab = n // a\n    \n    # Find the smallest divisor b of ab greater than a\n    b = min_del(ab, a + 1)\n    \n    # Calculate c by dividing n by b and a\n    c = n // b // a\n    \n    # Check if c is distinct from a and b and greater than 1\n    if c!= a and c!= b and c > 1:\n        # If the condition is true, print \"YES\" and the values of a, b, and c\n        print(\"YES\")\n        print(a, b, c)\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Initialize an empty list `k` to store the factors of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n5. If `n` is divisible by `i`, add `i` to the list `k`. If `n` is divisible by `i` and `n//i` is equal to `i`, it means `i` is a perfect square root, so add it to `k` only once.\n6. If the length of `k` is less than 3, it means `n` cannot be represented as a product of three distinct integers, so print \"NO\".\n7. Otherwise, generate all possible combinations of three distinct elements from `k` using the `combinations` function from the `itertools` module.\n8. Iterate over the generated combinations and check if the product of the three elements is equal to `n`. If a matching combination is found, print \"YES\" and the combination, then break the loop.\n9. If no matching combination is found after iterating over all combinations, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom itertools import combinations as com\nfrom math import sqrt\n\n# Read the number of test cases\nfor _ in range(int(input())):\n\n    # Initialize an empty list to store factors of n\n    k = []\n\n    # Read the integer n from the input\n    a = int(input())\n\n    # Iterate from 2 to the square root of n to find factors of n\n    for i in range(2, int(sqrt(a)) + 1):\n        # Check if n is divisible by i\n        if a % i == 0:\n            # If n is divisible by i and n//i is equal to i, it means i is a perfect square root\n            if a // i == i:\n                # Add i to the list k only once\n                k.append(i)\n            else:\n                # Add i and n//i to the list k\n                k.append(i)\n                k.append(a // i)\n\n    # Check if the length of k is less than 3\n    if len(k) < 3:\n        # If yes, print \"NO\"\n        print(\"NO\")\n    else:\n        # Generate all possible combinations of three distinct elements from k\n        p = com(k, 3)\n\n        # Iterate over the generated combinations\n        for i in p:\n            # Check if the product of the three elements is equal to n\n            if i[0] * i[1] * i[2] == a:\n                # If yes, print \"YES\" and the combination, then break the loop\n                print(\"YES\")\n                print(i[0], i[1], i[2])\n                break\n        else:\n            # If no matching combination is found, print \"NO\"\n            print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `n`.\n2. Iterate through each test case.\n3. For each test case, read the number `m`.\n4. Initialize an empty list `p` to store the factors of `m`.\n5. Initialize a variable `c` to 2, which will be used to check for factors of `m`.\n6. While the length of `p` is less than 3 and `c` is less than or equal to the square root of `m`, check if `m` is divisible by `c`.\n7. If `m` is divisible by `c`, divide `m` by `c` and append `c` to `p`.\n8. If `m` is not divisible by `c`, increment `c` by 1 or 2 (depending on whether `c` is 2 or not).\n9. After the loop, check the length of `p`.\n10. If `p` has exactly 3 elements, check if the first two elements are the same. If they are, multiply the second element by the third element to make them distinct.\n11. Update the third element of `p` to be `m` divided by the product of the first two elements.\n12. If `p` has exactly 2 elements, append `m` divided by the product of the first two elements to `p`.\n13. Check if `p` has exactly 3 elements, and if the third element is greater than 1 and all elements in `p` are distinct.\n14. If the conditions in step 13 are met, print \"YES\" and the elements of `p`.\n15. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Read the number of test cases\nn = int(input())\n\n# Iterate through each test case\nfor i in range(n):\n    # Read the number for the current test case\n    m = int(input())\n    \n    # Initialize an empty list to store the factors of m\n    p = []\n    \n    # Initialize a variable to check for factors of m\n    c = 2\n    \n    # While the length of p is less than 3 and c is less than or equal to the square root of m\n    while len(p) < 3 and c <= sqrt(m):\n        # Check if m is divisible by c\n        if m % c == 0:\n            # If m is divisible by c, divide m by c and append c to p\n            m = m // c\n            p.append(c)\n        else:\n            # If m is not divisible by c, increment c by 1 or 2 (depending on whether c is 2 or not)\n            if c == 2:\n                c = c + 1\n            else:\n                c = c + 2\n    \n    # After the loop, check the length of p\n    if len(p) == 3:\n        # Check if the first two elements of p are the same\n        if p[0] == p[1]:\n            # If they are the same, multiply the second element by the third element to make them distinct\n            p[1] = p[1] * p[2]\n        # Update the third element of p to be m divided by the product of the first two elements\n        p[2] = m1 // p[0] // p[1]\n    elif len(p) == 2:\n        # If p has exactly 2 elements, append m divided by the product of the first two elements to p\n        p.append(m1 // p[0] // p[1])\n    \n    # Check if p has exactly 3 elements, and if the third element is greater than 1 and all elements in p are distinct\n    if len(p) == 3 and p[2] > 1 and p[0]!= p[2] and p[1]!= p[2] and p[0]!= p[1]:\n        # If the conditions are met, print \"YES\" and the elements of p\n        print('YES')\n        print(*p)\n    else:\n        # Otherwise, print \"NO\"\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case, read the integer `n`.\n3. Initialize an empty list `ans` to store the factors of `n`.\n4. Iterate from 2 to the square root of `n` (inclusive) to find the first factor `f1` of `n`.\n5. If `f1` is a factor of `n`, add it to `ans` and break the loop.\n6. If no factor is found in step 4, it means `n` is a prime number, so continue to the next test case.\n7. Calculate `m` as `n` divided by `f1`.\n8. Iterate from `f1 + 1` to the square root of `m` (inclusive) to find the second factor `f2` of `m`.\n9. If `f2` is a factor of `m`, add it to `ans` and break the loop.\n10. If no factor is found in step 8, it means `m` is a prime number, so continue to the next test case.\n11. Calculate `f3` as `n` divided by the product of `f1` and `f2`.\n12. If `f3` is not equal to either `f1` or `f2`, it means we have found three distinct factors of `n`, so print \"YES\" and the factors.\n13. If `f3` is equal to either `f1` or `f2`, it means we have not found three distinct factors of `n`, so print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin, stdout\nfrom collections import defaultdict\nimport math\n\n# Read the number of test cases\ncases = int(input())\n\n# Iterate over each test case\nfor line in stdin:\n    # Read the integer n for the current test case\n    n = int(line)\n    \n    # Initialize an empty list to store the factors of n\n    ans = []\n    \n    # Iterate from 2 to the square root of n to find the first factor f1 of n\n    f1 = 2 \n    while f1 <= math.sqrt(n):\n        # Check if f1 is a factor of n\n        if n % f1 == 0:\n            # Add f1 to ans and break the loop\n            ans.append(f1)\n            break\n        # Increment f1 by 1\n        f1 += 1\n    \n    # If no factor is found, it means n is a prime number, so continue to the next test case\n    if len(ans) == 0:\n        stdout.write(\"NO\\n\")\n        continue\n    \n    # Calculate m as n divided by f1\n    m = n//f1\n    \n    # Iterate from f1 + 1 to the square root of m to find the second factor f2 of m\n    f2 = f1 + 1\n    while f2 <= math.sqrt(m):\n        # Check if f2 is a factor of m\n        if m % f2 == 0:\n            # Add f2 to ans and break the loop\n            ans.append(f2)\n            break\n        # Increment f2 by 1\n        f2 += 1\n    \n    # If no factor is found, it means m is a prime number, so continue to the next test case\n    if len(ans) == 1:\n        stdout.write(\"NO\\n\")\n        continue\n    \n    # Calculate f3 as n divided by the product of f1 and f2\n    f3 = n//(f1*f2)\n    \n    # Check if f3 is not equal to either f1 or f2\n    if f3 not in {f1, f2}:\n        # Print \"YES\" and the factors\n        stdout.write(\"YES\\n\")\n        stdout.write(\" \".join((str(x) for x in [f1, f2, f3])))\n        stdout.write(\"\\n\")\n    else:\n        # Print \"NO\"\n        stdout.write(\"NO\\n\")\n            \nif __name__ == \"__main__\":\n    main()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate `t` times to process each test case.\n3. For each test case, read the integer `n` from the input.\n4. Initialize variables to store the result: `flag` to track if a solution is found, and `a1`, `a2`, `a3` to store the distinct integers.\n5. Iterate from `2` to the square root of `n` (inclusive) to find factors of `n`.\n6. For each factor `i`, check if `n` is divisible by `i`. If it is, calculate `tmp` as `n` divided by `i`.\n7. Iterate from `2` to the square root of `tmp` (inclusive) to find factors of `tmp`.\n8. For each factor `j` of `tmp`, check if `tmp` is divisible by `j`. If it is, calculate `a2` as `j` and `a3` as `tmp` divided by `j`.\n9. Check if `a1`, `a2`, and `a3` are distinct integers. If they are, set `flag` to `1` and break the loop.\n10. If `flag` is `1`, print \"YES\" and the values of `a1`, `a2`, and `a3`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom sys import stdin\nfrom functools import reduce\n\ndef solve():\n    # Read the number of test cases\n    for _ in range(int(stdin.readline())):\n        # Read the integer n for the current test case\n        n = int(stdin.readline())\n        \n        # Initialize variables to store the result\n        flag, a1, a2, a3, tmp = 0, 0, 0, 0, 0\n        \n        # Iterate from 2 to the square root of n to find factors\n        for i in range(2, int(n **.5) + 1):\n            # Check if n is divisible by i\n            if n % i == 0:\n                # Calculate tmp as n divided by i\n                tmp = n // i\n                # Store i as a1\n                a1 = i\n                \n                # Iterate from 2 to the square root of tmp to find factors\n                for j in range(2, int((tmp) **.5) + 1):\n                    # Check if tmp is divisible by j\n                    if tmp % j == 0:\n                        # Calculate a2 as j and a3 as tmp divided by j\n                        a2 = j\n                        a3 = tmp // j\n                        \n                        # Check if a1, a2, and a3 are distinct integers\n                        if a1!= a2 and a2!= a3 and a3!= a1:\n                            # Set flag to 1 and break the loop\n                            flag = 1\n                            break\n        \n        # Check if a solution is found\n        if flag == 1:\n            # Print \"YES\" and the values of a1, a2, and a3\n            print('YES')\n            print(a1, a2, a3, sep=' ')\n        else:\n            # Print \"NO\"\n            print('NO')\n        \nsolve()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases, t.\n2. Iterate through each test case.\n3. For each test case, read the number n.\n4. Initialize a flag f to 0, which will be used to check if a valid triplet is found.\n5. Iterate from 2 to the square root of n (inclusive) to find factors of n.\n6. For each factor i, check if n/i is also a factor of n.\n7. If n/i is a factor, create a list a to store the factors.\n8. Add i to the list a.\n9. Add n/i to the list a.\n10. Iterate from 2 to the square root of n/i (inclusive) to find factors of n/i.\n11. For each factor j, check if j is not already in the list a and if n/i is divisible by j.\n12. If j is not in the list a and n/i is divisible by j, add j to the list a and n/i/j to the list a.\n13. Check if the length of the list a is 3 (i.e., if we have found a valid triplet).\n14. If the length of the list a is 3, print \"YES\" and the elements of the list a.\n15. If a valid triplet is found, set the flag f to 1 and break the loop.\n16. If no valid triplet is found after iterating through all factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Author: ghoshashis545 -Ashis Ghosh\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\nfrom math import ceil,sqrt\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nabc='abcdefghijklmnopqrstuvwxyz'\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef fact(n):\n    f=1\n    for i in range(1,n+1):\n        f*=i\n    return f\ndef f(n):\n    a=[]\n    a.append(1)\n    for i in range(2,int(sqrt(n))+1):\n        if(n%i==0):\n            if(i==n//i):\n                a.append(i)\n            else:\n                a.append(i)\n                a.append(n//i)\n    return a\n''''''''''''''''''''''''''''''''''''''''''''''''''''''\nt=ii()\nwhile(t):\n    t-=1\n    n=ii()\n    # Initialize flag f to 0\n    f=0\n    # Iterate from 2 to the square root of n (inclusive) to find factors of n\n    for i in range(2,int(sqrt(n))+1):\n        if(n%i==0):\n            # Create a list a to store the factors\n            a=[]\n            a.append(i)\n            # Calculate n/i\n            x=n//i\n            # Iterate from 2 to the square root of n/i (inclusive) to find factors of n/i\n            for j in range(2,int(sqrt(x))+1):\n                # Check if j is not already in the list a and if n/i is divisible by j\n                if(x%j==0 and j not in a):\n                    # Add j to the list a\n                    a.append(j)\n                    # Add n/i/j to the list a\n                    a.append(x//j)\n                    # Check if the length of the list a is 3 (i.e., if we have found a valid triplet)\n                    if(len(set(a))==3):\n                        # Print \"YES\" and the elements of the list a\n                        print(\"YES\")\n                        print(*a)\n                        # Set the flag f to 1 and break the loop\n                        f=1\n                        break\n            # If a valid triplet is found, break the loop\n            if(f==1):\n                break\n            # If no valid triplet is found, reset the list a\n            a=[]\n            # Add n/i to the list a\n            a.append(n//i)\n            # Calculate i\n            x=i\n            # Iterate from 2 to the square root of i (inclusive) to find factors of i\n            for j in range(2,int(sqrt(x))+1):\n                # Check if j is not already in the list a and if i is divisible by j\n                if(x%j==0 and j not in a):\n                    # Add j to the list a\n                    a.append(j)\n                    # Add i/j to the list a\n                    a.append(x//j)\n                    # Check if the length of the list a is 3 (i.e., if we have found a valid triplet)\n                    if(len(set(a))==3):\n                        # Print \"YES\" and the elements of the list a\n                        print(\"YES\")\n                        print(*a)\n                        # Set the flag f to 1 and break the loop\n                        f=1\n                        break\n            # If a valid triplet is found, break the loop\n            if(f==1):\n                break\n    # If no valid triplet is found, print \"NO\"\n    if(f==0):\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a loop that runs `t` times.\n3. For each test case, read the integer `n` from the input.\n4. Initialize an empty list `a` to store the prime factors of `n`.\n5. Initialize a counter `count` to keep track of the number of prime factors found.\n6. Initialize a flag `flag` to check if it's impossible to represent `n` as a product of three distinct integers.\n7. Iterate from 2 to the square root of `n` (inclusive) to find prime factors.\n8. For each number `j` in the range, check if `n` is divisible by `j`.\n9. If `n` is divisible by `j`, add `j` to the list `a` and divide `n` by `j`.\n10. Increment the counter `count` by 1.\n11. If `count` is 3, it means we have found three distinct prime factors, so print \"YES\" and the prime factors.\n12. If `count` is 2 and `n` is not a prime factor, it means we have found two prime factors, so print \"YES\" and the prime factors.\n13. If `count` is 2 and `n` is a prime factor, it means we have found two prime factors and the remaining number is also a prime factor, so print \"YES\" and the prime factors.\n14. If `count` is less than 2 and `flag` is 0, it means we couldn't find three distinct prime factors, so print \"NO\".\n\nCOMMENTED CODE:\n```python\nt = int(input()) # Read the number of test cases\n\nfor i in range(t): # Iterate over each test case\n    count = 0 # Initialize the counter for prime factors\n    flag = 0 # Initialize the flag to check if it's impossible to represent n as a product of three distinct integers\n    a = [] # Initialize an empty list to store the prime factors\n    n = int(input()) # Read the integer n for the current test case\n\n    for j in range(2,int(n**0.5)+1): # Iterate from 2 to the square root of n\n        if (count == 2 and n < j): # If we have found two prime factors and n is less than j, it's impossible to represent n as a product of three distinct integers\n            print(\"NO\") # Print \"NO\"\n            flag = 1 # Set the flag to 1\n            break # Break the loop\n        elif (count == 2 and n>j): # If we have found two prime factors and n is greater than j, we have found three distinct prime factors\n            print(\"YES\") # Print \"YES\"\n            for x in a: # Print the prime factors\n                print(x,end = \" \") # Print each prime factor followed by a space\n            print(int(n)) # Print the remaining number\n            count = count + 1 # Increment the counter by 1\n            break # Break the loop\n        elif(count == 2 and n == j): # If we have found two prime factors and n is equal to j, we have found three distinct prime factors\n            if j in a: # Check if j is already in the list of prime factors\n                print(\"NO\") # Print \"NO\"\n                flag = 1 # Set the flag to 1\n                break # Break the loop\n            else: # If j is not in the list of prime factors\n                print(\"YES\") # Print \"YES\"\n                for x in a: # Print the prime factors\n                    print(x,end = \" \") # Print each prime factor followed by a space\n                print(int(n)) # Print the remaining number\n                count = count + 1 # Increment the counter by 1\n                break # Break the loop\n        if( n % j == 0): # Check if n is divisible by j\n            if j not in a: # Check if j is not already in the list of prime factors\n                n = n/j # Divide n by j\n                count += 1 # Increment the counter by 1\n                a.append(j) # Add j to the list of prime factors\n\n    if (count <=2 and flag == 0): # If we couldn't find three distinct prime factors and the flag is 0\n        print(\"NO\") # Print \"NO\"\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate over each test case.\n3. For each test case, read the integer `n`.\n4. Find the smallest factor `a` of `n` greater than or equal to 2.\n5. If `a` is found, find the smallest factor `b` of `n//a` greater than `a`.\n6. If `b` is found, calculate `c` as `n//(a*b)`.\n7. Check if `c` is a valid factor (not equal to 1, `a`, or `b`) and print the result accordingly.\n\nCOMMENTED CODE:\n```python\nimport sys\nfrom math import sqrt\ninput=sys.stdin.readline\n# Define a lambda function to read input as a list of integers\nf=lambda :list(map(int, input().split()))\n\n# Iterate over each test case\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n=int(input())\n    \n    # Initialize a variable to store the smallest factor a\n    a=0\n    \n    # Iterate from 2 to the square root of n to find the smallest factor a\n    for i in range(2, int(sqrt(n))+1):\n        # Check if n is divisible by i\n        if n%i==0:\n            # If divisible, store i as the smallest factor a and break the loop\n            a=i\n            break\n    \n    # Initialize a variable to store the smallest factor b\n    b=0\n    \n    # If a is found, iterate from a+1 to the square root of n//a to find the smallest factor b\n    if a:\n        for i in range(a+1, int(sqrt(n//a))+1):\n            # Check if (n//a) is divisible by i\n            if (n//a)%i==0:\n                # If divisible, store i as the smallest factor b and break the loop\n                b=i\n                break\n    \n    # Initialize a variable to store the factor c\n    c=0\n    \n    # If b is found and n is divisible by a*b, calculate c as n//(a*b)\n    if b and n%(a*b)==0:\n        c=n//(a*b)\n    \n    # Check if c is a valid factor (not equal to 1, a, or b) and print the result accordingly\n    if c and c!=1 and c!=a and c!=b:\n        print('YES\\n', a, b, c)\n    else:\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case.\n3. Read the number `n` for the current test case.\n4. Initialize three variables `ans1`, `ans2`, and `ans3` to 1, which will store the three distinct integers.\n5. Start with the smallest prime number `p = 2` and divide `n` by `p` as long as it's divisible. Distribute the factors to `ans1`, `ans2`, and `ans3` in a way that they remain distinct.\n6. Move to the next prime number `p = 3` and repeat step 5. Increment `p` by 2 in each iteration to check only odd numbers, as even numbers have already been covered.\n7. If `n` is not 1 after the above steps, it means `n` is a prime number. Distribute `n` to one of the variables `ans1`, `ans2`, or `ans3`.\n8. Check if all three variables `ans1`, `ans2`, and `ans3` are not equal to 1. If they are, it means it's impossible to represent `n` as a product of three distinct integers.\n9. If `ans1`, `ans2`, and `ans3` are distinct, print \"YES\" and the values of `ans1`, `ans2`, and `ans3`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nfor i in range(int(input())):\n    # Read the number for the current test case\n    n = int(input())\n    \n    # Initialize three variables to store the three distinct integers\n    ans1 = 1\n    ans2 = 1\n    ans3 = 1\n    \n    # Start with the smallest prime number p = 2\n    p = 2\n    while n % p == 0:\n        # Distribute the factors to ans1, ans2, and ans3 in a way that they remain distinct\n        if ans1 == 1:\n            ans1 *= p\n        elif ans2 == 1 or ans2 == ans1:\n            ans2 *= p\n        else:\n            ans3 *= p\n        # Divide n by p\n        n //= p\n    \n    # Move to the next prime number p = 3\n    p = 3\n    while p <= n ** 0.5:\n        # Repeat the process for odd numbers\n        while n % p == 0:\n            if ans1 == 1:\n                ans1 *= p\n            elif ans2 == 1 or ans2 == ans1:\n                ans2 *= p\n            else:\n                ans3 *= p\n            n //= p\n        # Increment p by 2\n        p += 2\n    \n    # If n is not 1, it means n is a prime number\n    if n!= 1:\n        # Distribute n to one of the variables ans1, ans2, or ans3\n        if ans1 == 1:\n            ans1 *= n\n        elif ans2 == 1 or ans2 == ans1:\n            ans2 *= n\n        else:\n            ans3 *= n\n    \n    # Check if all three variables are not equal to 1\n    if ans1!= 1 and ans2!= 1 and ans3!= 1:\n        # Check if ans1, ans2, and ans3 are distinct\n        if ans1!= ans2 and ans1!= ans3 and ans2!= ans3:\n            # Print \"YES\" and the values of ans1, ans2, and ans3\n            print('YES')\n            print(ans1, ans2, ans3)\n        else:\n            # Print \"NO\" if the integers are not distinct\n            print('NO')\n    else:\n        # Print \"NO\" if it's impossible to represent n as a product of three distinct integers\n        print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case. For each test case:\n   a. Read the number `n` from the input.\n   b. Initialize an empty list `ans` to store the factors of `n`.\n   c. Iterate from 2 to the square root of `n` (inclusive) to find factors of `n`.\n      i. If `ans` already has two elements and `n` is greater than the last element in `ans`, append `n` to `ans` and set `n` to 1 to break the loop.\n      ii. If `n` is divisible by the current number `i`, append `i` to `ans` and divide `n` by `i`.\n      iii. If `n` becomes 1, break the loop.\n      iv. If `ans` is not empty and `n` is less than or equal to the last element in `ans`, break the loop.\n   d. If `n` is not 1 or `ans` has less than three elements, print \"NO\".\n   e. Otherwise, print \"YES\" and the factors of `n` (except the last one) and the product of the remaining factor and `n`.\n\nCOMMENTED CODE:\n```python\nfrom math import sqrt\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number n for the current test case\n    n = int(input())\n    \n    # Initialize an empty list to store the factors of n\n    ans = []\n    \n    # Iterate from 2 to the square root of n to find factors of n\n    for i in range(2, int(sqrt(n))+1):\n        # If ans already has two elements and n is greater than the last element in ans, append n to ans and set n to 1 to break the loop\n        if len(ans) == 2 and n > ans[-1]:\n            ans.append(n)\n            n = 1\n            break\n        # If n is divisible by the current number i, append i to ans and divide n by i\n        elif n % i == 0:\n            ans.append(i)\n            n //= i\n        # If n becomes 1, break the loop\n        if n == 1:\n            break\n        # If ans is not empty and n is less than or equal to the last element in ans, break the loop\n        if len(ans) and n <= ans[-1]:\n            break\n    \n    # If n is not 1 or ans has less than three elements, print \"NO\"\n    if n!= 1 or len(ans) < 3:\n        print(\"NO\")\n    # Otherwise, print \"YES\" and the factors of n (except the last one) and the product of the remaining factor and n\n    else:\n        print(\"YES\")\n        # Calculate the product of the remaining factor and n\n        prod = 1\n        for i in range(2, len(ans)):\n            prod *= ans[i]\n        # Print the factors of n (except the last one) and the product of the remaining factor and n\n        print(ans[0], ans[1], prod)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n\n1. Read the number of test cases `T` from the input.\n2. Iterate over each test case.\n3. Read the number `N` for the current test case.\n4. Initialize a flag `zz` to track whether a solution is found.\n5. Iterate from 2 to the square root of `N` (inclusive) to find the first prime factor `i` of `N`.\n6. If `i` is a factor of `N`, divide `N` by `i` and repeat the process to find the next prime factor `j`.\n7. If `j` is a factor of `N` and `j` is not equal to `i`, divide `N` by `j` and check if the remaining value `n` is a prime number or can be further factored into two distinct numbers.\n8. If a solution is found, print \"YES\" and the three distinct numbers `i`, `j`, and `n`. Set `zz` to `True` to exit the inner loop.\n9. If no solution is found after iterating over all possible factors, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport math\nfrom operator import mul\nfrom functools import reduce \n\ndef isPrime(n) : \n    # Check if a number is prime\n    # Corner cases \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop \n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n  \n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n  \n    return True\n\n\n\nT = int(input())\n\nfor _ in range(T):\n    N = int(input())\n    n = N\n    zz = False\n    # Iterate from 2 to the square root of N to find the first prime factor\n    for i in range(2, math.floor(n**.5) + 1):\n        if n % i == 0:\n            n = n//i\n            # Find the next prime factor\n            for j in range(2, math.floor(n**.5) + 1):\n                if n % j == 0 and j!= i:\n                    n = n//j\n                    # Check if the remaining value n is a prime number or can be further factored\n                    if n!= i and n!= j and n > 1:\n                        print ('YES')\n                        print ('{} {} {}'.format(i, j, n))\n                        zz=True\n                        break \n            if zz:\n                break \n\n    if zz:\n        continue\n    print ('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the number `n` and find its prime factors using the `primeFactors` function.\n3. If the number of prime factors is less than 3, it's impossible to represent `n` as a product of three distinct integers, so print \"NO\".\n4. Otherwise, sort the prime factors in ascending order.\n5. If the first two prime factors are the same, create a list `ans` with the first prime factor, the product of the first two prime factors, and the product of the remaining prime factors.\n6. If the length of the set of `ans` is not 3, it means there are duplicate values, so print \"NO\".\n7. Otherwise, print \"YES\" and the values in `ans`.\n8. If the first two prime factors are different, create a list `ans` with the first prime factor, the second prime factor, and the product of the remaining prime factors.\n9. If the length of the set of `ans` is not 3, it means there are duplicate values, so print \"NO\".\n10. Otherwise, print \"YES\" and the values in `ans`.\n\nCOMMENTED CODE:\n```python\nimport math \n\n# Function to find prime factors of a number\ndef primeFactors(n):\n    # Initialize an empty list to store prime factors\n    temp = []\n    \n    # Divide n by 2 until it's no longer divisible\n    while n % 2 == 0: \n        # Append 2 to the list of prime factors\n        temp.append(2)\n        # Update n\n        n = n / 2\n    \n    # Iterate from 3 to the square root of n (inclusive) in steps of 2\n    for i in range(3, int(math.sqrt(n))+1,2): \n        # While n is divisible by i, append i to the list of prime factors and update n\n        while n % i== 0: \n            temp.append(i)\n            n = n / i \n    \n    # If n is greater than 2, it's a prime number, so append it to the list\n    if n > 2: \n        temp.append(int(n))\n    \n    # Return the list of prime factors\n    return temp\n    \n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nwhile t:\n    # Decrement t\n    t += -1\n    \n    # Read the number for the current test case\n    n = int(input())\n    \n    # Find the prime factors of the number\n    prime = primeFactors(n)\n    \n    # If the number of prime factors is less than 3, it's impossible to represent n as a product of three distinct integers\n    if len(prime) < 3: \n        print(\"NO\")\n    else:\n        # Sort the prime factors in ascending order\n        prime.sort()\n        \n        # Initialize an empty list to store the result\n        ans = [prime[0]]\n        \n        # If the first two prime factors are the same\n        if prime[0] == prime[1]:\n            # Append the product of the first two prime factors to the result list\n            ans.append(prime[1] * prime[2])\n            # Initialize a variable to store the product of the remaining prime factors\n            p = 1\n            # Iterate over the remaining prime factors\n            for i in range(3, len(prime)):\n                # Multiply the product by the current prime factor\n                p *= prime[i]\n            # If the product is not 1, append it to the result list\n            if p!= 1: \n                ans.append(p)\n            # If the length of the set of the result list is not 3, it means there are duplicate values\n            if len(set(ans))!= 3: \n                print(\"NO\")\n            else:\n                # Print \"YES\" and the values in the result list\n                print(\"YES\")\n                print(*ans)\n        else:\n            # Append the second prime factor to the result list\n            ans.append(prime[1])\n            # Initialize a variable to store the product of the remaining prime factors\n            p = 1\n            # Iterate over the remaining prime factors\n            for i in range(2, len(prime)):\n                # Multiply the product by the current prime factor\n                p *= prime[i]\n            # If the product is not 1, append it to the result list\n            if p!= 1: \n                ans.append(p)\n            # If the length of the set of the result list is not 3, it means there are duplicate values\n            if len(set(ans))!= 3: \n                print(\"NO\")\n            else:\n                # Print \"YES\" and the values in the result list\n                print(\"YES\")\n                print(*ans)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. Iterate through each test case.\n3. For each test case, read the integer `n`.\n4. Initialize three variables `n1`, `n2`, and `n3` to store the three distinct integers.\n5. Iterate from 2 to the square root of `n` (inclusive) to find the first factor `n1` of `n`.\n6. If `n` is divisible by `n1`, calculate `n3` as `n` divided by `n1`.\n7. If no factor is found in step 5, continue to the next test case.\n8. Iterate from `n1 + 1` to the square root of `n3` (inclusive) to find the second factor `n2` of `n3`.\n9. If `n3` is divisible by `n2` and `n2` is not equal to `n3` divided by `n1`, calculate `n3` as `n3` divided by `n2`.\n10. If no second factor is found in step 8, print \"NO\" for the current test case.\n11. If a second factor is found, print \"YES\" and the three distinct integers `n1`, `n2`, and `n3`.\n\nCOMMENTED CODE:\n```python\nimport math\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor i in range(0, t):\n    # Read the integer n for the current test case\n    n = int(input())\n\n    # Initialize three variables to store the three distinct integers\n    n1 = 0\n    n2 = 0\n    n3 = 0\n\n    # Iterate from 2 to the square root of n to find the first factor n1 of n\n    for j in range(2, int(math.ceil((math.sqrt(n))))):\n        # Check if n is divisible by j\n        if n % j == 0:\n            # Store j as the first factor n1\n            n1 = j\n            # Calculate n3 as n divided by n1\n            n3 = n / j\n            # Break the loop as we have found the first factor\n            break\n        else:\n            # Continue to the next iteration if n is not divisible by j\n            continue\n\n    # Initialize a flag to check if a second factor is found\n    z = 0\n\n    # Iterate from n1 + 1 to the square root of n3 to find the second factor n2 of n3\n    for j in range(n1 + 1, (int(math.ceil((math.sqrt(n3)))))):\n        # Check if n3 is divisible by j and j is not equal to n3 divided by n1\n        if n3 % j == 0 and j!= n3 / j and (n3 / j)!= n1:\n            # Set the flag to 1 to indicate that a second factor is found\n            z = 1\n            # Store j as the second factor n2\n            n2 = j\n            # Calculate n3 as n3 divided by n2\n            n3 = int(n3 / j)\n            # Break the loop as we have found the second factor\n            break\n        else:\n            # Continue to the next iteration if the conditions are not met\n            continue\n\n    # Check if a second factor is found\n    if z == 0:\n        # Print \"NO\" if no second factor is found\n        print(\"NO\")\n    else:\n        # Print \"YES\" and the three distinct integers n1, n2, and n3\n        print(\"YES\")\n        print(n1, n2, n3)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. Iterate over each test case using a `for` loop.\n3. Read the value of `n` for each test case from the input.\n4. Initialize variables `i` to 2 and `a` to `n`.\n5. Use a `while` loop to find the prime factors of `n`.\n6. Inside the loop, check if `n` is divisible by `i` using the modulo operator (`a%i == 0`).\n7. If `n` is divisible by `i`, append `i` to the `ans` list and divide `n` by `i` using integer division (`a //= i`).\n8. Increment `i` by 1 and check if the length of `ans` is 2. If it is, break the loop.\n9. After the loop, check if the length of `ans` is not equal to 2. If it's not, print \"NO\".\n10. If the length of `ans` is 2, check if `a` is equal to either of the elements in `ans`. If it is, print \"NO\".\n11. If none of the above conditions are met, print \"YES\" and the elements of `ans` along with `a`.\n\nCOMMENTED CODE:\n```python\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor y in range(t):\n    # Read the value of n for each test case\n    n = int(input())\n    \n    # Initialize variables i to 2 and a to n\n    i = 2\n    a = n\n    ans = []  # List to store prime factors\n    \n    # Use a while loop to find the prime factors of n\n    while(i*i <= n):\n        # Check if n is divisible by i\n        if(a%i == 0):\n            # If n is divisible by i, append i to the ans list and divide n by i\n            ans.append(i)\n            a //= i\n        # Increment i by 1\n        i += 1\n        # Check if the length of ans is 2. If it is, break the loop\n        if len(ans) == 2: \n            break\n    \n    # Check if the length of ans is not equal to 2. If it's not, print \"NO\"\n    if(len(ans)!= 2):\n        print(\"NO\")\n    # If the length of ans is 2, check if a is equal to either of the elements in ans. If it is, print \"NO\"\n    elif(a == ans[0] or a == ans[1]):\n        print(\"NO\")\n    # If none of the above conditions are met, print \"YES\" and the elements of ans along with a\n    else:\n        print(\"YES\")\n        print(ans[0],ans[1],a)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize an empty dictionary `dic` to store the prime factors of `n`.\n4. While `n` is divisible by 2, divide `n` by 2 and increment the count of 2 in `dic`.\n5. Iterate from 3 to the square root of `n` (inclusive) with a step of 2. For each `i` in this range, while `n` is divisible by `i`, divide `n` by `i` and increment the count of `i` in `dic`.\n6. If `n` is greater than 2 after the above steps, increment the count of `n` in `dic`.\n7. Check the length of `dic`. If it's greater than or equal to 3, print \"YES\" and find three distinct integers `a`, `b`, and `c` such that `a * b * c = n`. This can be done by iterating over the items in `dic` and constructing `a`, `b`, and `c` accordingly.\n8. If the length of `dic` is 2, check if either of the prime factors has a count greater than 2. If so, print \"YES\" and construct `a`, `b`, and `c` accordingly. Otherwise, check if both prime factors have a count of 2. If so, print \"YES\" and construct `a`, `b`, and `c` accordingly. If none of the above conditions are met, print \"NO\".\n9. If the length of `dic` is 1, check if the count of the prime factor is greater than 5. If so, print \"YES\" and construct `a`, `b`, and `c` accordingly. Otherwise, print \"NO\".\n10. If the length of `dic` is 0, print \"NO\".\n\nCOMMENTED CODE:\n```python\nimport sys\nfrom collections import defaultdict\nimport math\n\n# Initialize a dictionary to store prime factors\ndic = defaultdict(int)\n\n# Read the number of test cases\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    # Reset the dictionary for each test case\n    dic = defaultdict(int)\n\n    # Read the integer n for the current test case\n    m = int(sys.stdin.readline())\n\n    # Initialize a variable to store the remaining value of n after dividing out 2s\n    d = m\n\n    # While n is divisible by 2, divide n by 2 and increment the count of 2 in dic\n    while m % 2 == 0:\n        m = m // 2\n        dic[2] += 1\n\n    # Iterate from 3 to the square root of n (inclusive) with a step of 2\n    for i in range(3, int(math.sqrt(d)) + 1, 2):\n        # While n is divisible by i, divide n by i and increment the count of i in dic\n        while m % i == 0:\n            dic[i] += 1\n            m = m // i\n\n    # If n is greater than 2 after the above steps, increment the count of n in dic\n    if m > 2:\n        dic[m] += 1\n\n    # Check the length of dic\n    if len(dic) >= 3:\n        # If the length of dic is greater than or equal to 3, print \"YES\" and find three distinct integers a, b, and c such that a * b * c = n\n        print(\"YES\")\n        l = []\n        for i in dic:\n            l.append(i)\n            if len(l) == 2:\n                break\n        l.append(d // (l[0] * l[1]))\n        print(*l)\n\n    # If the length of dic is 2, check if either of the prime factors has a count greater than 2\n    elif len(dic) == 2:\n        a = []\n        for i in dic:\n            a.append(i)\n        z = True\n        if dic[a[0]] > 2 and z:\n            # If the count of a[0] is greater than 2, print \"YES\" and construct a, b, and c accordingly\n            l = [a[0], a[0] ** (dic[a[0]] - 1)]\n            l.append(d // (l[0] * l[1]))\n            print(\"YES\")\n            print(*l)\n            z = False\n        elif dic[a[1]] > 2 and z:\n            # If the count of a[1] is greater than 2, print \"YES\" and construct a, b, and c accordingly\n            l = [a[1], a[1] ** (dic[a[1]] - 1)]\n            l.append(d // (l[0] * l[1]))\n            print(\"YES\")\n            print(*l)\n            z = False\n        elif dic[a[1]] == dic[a[0]] == 2 and z:\n            # If both prime factors have a count of 2, print \"YES\" and construct a, b, and c accordingly\n            l = [a[0], a[1], a[0] * a[1]]\n            print(\"YES\")\n            print(*l)\n            z = False\n        else:\n            # If none of the above conditions are met, print \"NO\"\n            print(\"NO\")\n\n    # If the length of dic is 1, check if the count of the prime factor is greater than 5\n    elif len(dic) == 1:\n        for i in dic:\n            if dic[i] > 5:\n                # If the count of the prime factor is greater than 5, print \"YES\" and construct a, b, and c accordingly\n                print(\"YES\")\n                l = [i, i ** 2, d // (i ** 3)]\n                print(*l)\n            else:\n                # If the count of the prime factor is not greater than 5, print \"NO\"\n                print(\"NO\")\n\n    # If the length of dic is 0, print \"NO\"\n    else:\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Initialize a dictionary `d` to store the prime factors of `n`.\n4. While `n` is divisible by 2, increment the count of 2 in `d` and divide `n` by 2.\n5. Iterate from 3 to the square root of `n` (inclusive) with a step of 2. For each `i` in this range, while `n` is divisible by `i`, increment the count of `i` in `d` and divide `n` by `i`.\n6. If `n` is greater than 1, it means `n` is a prime number, so add it to `d`.\n7. Check the conditions based on the number of distinct prime factors in `d`:\n   - If there is only one prime factor and the total count is less than 6, it is impossible to represent `n` as `a * b * c`.\n   - If there is only one prime factor, calculate `a`, `b`, and `c` as `a = d.keys()[0]`, `b = a * 2`, and `c = n // (a * b)`.\n   - If there are two prime factors and the total count is less than 4, it is impossible to represent `n` as `a * b * c`.\n   - Otherwise, calculate `a`, `b`, and `c` as `a = d.keys()[0]`, `b = d.keys()[1]`, and `c = n // (a * b)`.\n\nCOMMENTED CODE:\n```python\nimport sys\nfrom collections import defaultdict\nfrom math import sqrt\ninput=sys.stdin.readline\n\nfor _ in range(int(input())):\n    # Read the integer n for the current test case\n    n=int(input())\n    nn=n  # Store the original value of n\n    d=defaultdict(int)  # Initialize a dictionary to store prime factors\n    while n%2==0:\n        # While n is divisible by 2, increment the count of 2 in d and divide n by 2\n        d[2]+=1\n        n//=2\n    for i in range(3,int(sqrt(n))+1,2):\n        # Iterate from 3 to the square root of n (inclusive) with a step of 2\n        while n%i==0:\n            # While n is divisible by i, increment the count of i in d and divide n by i\n            d[i]+=1\n            n//=i\n    if n>1:\n        # If n is greater than 1, it means n is a prime number, so add it to d\n        d[n]=1\n\n    if len(d)==1 and sum(d.values())<6:\n        # If there is only one prime factor and the total count is less than 6, it is impossible to represent n as a * b * c\n        print(\"NO\")\n        continue\n    if len(d)==1:\n        # If there is only one prime factor, calculate a, b, and c\n        a=list(d.keys())[0]\n        b=a*2\n        c=nn//(a*b)\n        print(\"YES\")\n        print(a,b,c)\n        continue\n    if len(d)==2 and sum(d.values())<4:\n        # If there are two prime factors and the total count is less than 4, it is impossible to represent n as a * b * c\n        print(\"NO\")\n        continue\n    x=list(d.keys())\n    # If there are more than two prime factors or the total count is greater than or equal to 4, calculate a, b, and c\n    a=x[0]\n    b=x[1]\n    c=nn//(a*b)\n    print(\"YES\")\n    print(a,b,c)\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find all factors of `n` using the `factors` function.\n4. If the number of factors is less than 3, print \"NO\" and move to the next test case.\n5. Iterate through the factors to find three distinct factors `a`, `b`, and `c` such that `a * b * c = n`.\n6. If such factors are found, print \"YES\" and the factors `a`, `b`, and `c`. Otherwise, print \"NO\".\n7. Repeat steps 2-6 for all test cases.\n\nCOMMENTED CODE:\n```python\n# Import the reduce function from the functools module\nfrom functools import reduce\n\n# Define a function to find all factors of a given number n\ndef factors(n):\n    # Initialize an empty list to store the factors\n    k = []\n    # Iterate from 1 to the square root of n (inclusive)\n    for i in range(1, int(n**0.5 + 1)):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If divisible, add i and n//i to the list of factors\n            k.extend([i, n // i])\n    # Remove duplicates by converting the list to a set and then back to a list\n    k = sorted(list(set(k)))\n    # Return the list of factors (excluding 1 and n)\n    return k[1:]\n\n# Define a function to solve the problem for a given test case\ndef solve():\n    # Read the integer n for the current test case\n    n = int(input())\n    # Find all factors of n\n    f = factors(n)\n    # Check if the number of factors is less than 3\n    if len(f) < 3:\n        # If less than 3, print \"NO\"\n        print('NO')\n    else:\n        # Initialize variables to store the result\n        sss = 'NO'\n        a, b, c = -1, -1, -1\n        # Iterate through the factors to find three distinct factors\n        for i in range(0, len(f)):\n            for j in range(i + 1, len(f)):\n                # Calculate the remaining factor\n                temp = n // f[i] // f[j]\n                # Check if the remaining factor is in the list of factors and is distinct from the current two factors\n                if temp in f and temp!= f[i] and temp!= f[j]:\n                    # If found, update the result and break the inner loop\n                    a, b, c = f[i], f[j], temp\n                    sss = 'YES'\n                    break\n            # If the result is found, break the outer loop\n            if sss == 'YES':\n                break\n        # Print the result\n        if sss == 'YES':\n            print(sss)\n            print(a, b, c)\n        else:\n            print(sss)\n\n# Read the number of test cases\nt = int(input())\n# Iterate through the test cases\nfor _ in range(0, t):\n    # Solve the problem for the current test case\n    solve()\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t`.\n2. For each test case, read the integer `n`.\n3. Find the prime factorization of `n` using the `prime_factorize` function.\n4. Check if the prime factorization has one key with a count greater than 5, or if it has two keys with at least one count greater than or equal to 3. If so, construct the answer `ans` accordingly.\n5. If the prime factorization has more than two keys, construct the answer `ans` by multiplying the remaining prime factors together.\n6. If `ans` is not empty, print \"YES\" and `ans`. Otherwise, print \"NO\".\n\nCOMMENTED CODE:\n```python\nfrom collections import Counter\n\n# Function to find the prime factorization of a number\ndef prime_factorize(n):\n    # Initialize an empty list to store prime factors\n    a = []\n    \n    # Divide n by 2 as long as it's divisible evenly\n    while n % 2 == 0:\n        a.append(2)  # Add 2 to the list of prime factors\n        n //= 2  # Divide n by 2\n    \n    # Start checking for odd prime factors from 3\n    f = 3\n    while f * f <= n:\n        # If n is divisible by f, add f to the list of prime factors\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            # If n is not divisible by f, increment f by 2 (to check the next odd number)\n            f += 2\n    \n    # If n is not 1, it means n itself is a prime factor\n    if n!= 1:\n        a.append(n)\n    \n    # Count the occurrences of each prime factor\n    a = Counter(a)\n    \n    return a\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor i in range(t):\n    # Read the integer n for the current test case\n    n = int(input())\n    \n    # Find the prime factorization of n\n    a = prime_factorize(n)\n    \n    # Flag to track if a valid answer is found\n    flag = True\n    \n    # Initialize an empty string to store the answer\n    ans = \"\"\n\n    # Check if the prime factorization has one key with a count greater than 5\n    if len(a.keys()) == 1:\n        for k, v in a.items():\n            # If the count of the key is less than or equal to 5, set the flag to False\n            if v <= 5:\n                flag = False\n            else:\n                # Construct the answer by cubing the key and taking the square of the remaining count\n                ans = \"{} {} {}\".format(k, k**2, k**(v-3))\n    \n    # Check if the prime factorization has two keys\n    elif len(a.keys()) == 2:\n        # Store the counts and keys of the prime factors in separate lists\n        v_pair = []\n        vk_pair = []\n        for k, v in a.items():\n            v_pair.append(v)\n            vk_pair.append((v, k))\n        \n        # Check if the maximum count is greater than or equal to 3, or if both counts are greater than or equal to 2\n        if max(v_pair) >= 3 or (v_pair[0] >= 2 and v_pair[1] >= 2):\n            # Construct the answer by taking the keys and cubing the remaining counts\n            ans = \"{} {} {}\".format(\n                vk_pair[0][1], vk_pair[1][1], vk_pair[0][1] ** (vk_pair[0][0] - 1) * vk_pair[1][1] ** (vk_pair[1][0] - 1))\n        else:\n            # Set the flag to False if the conditions are not met\n            flag = False\n    \n    # If the prime factorization has more than two keys\n    else:\n        # Initialize a variable to store the product of the remaining prime factors\n        b = 1\n        # Iterate over the prime factors and their counts\n        for j, (k, v) in enumerate(a.items()):\n            # If it's the first or second prime factor, add it to the answer\n            if j <= 1:\n                ans += \"{} \".format(str(k ** v))\n            else:\n                # Multiply the remaining prime factors together\n                b *= k ** v\n        # Add the product of the remaining prime factors to the answer\n        ans += \"{}\".format(b)\n    \n    # If a valid answer is found, print \"YES\" and the answer\n    if flag:\n        print(\"YES\")\n        print(ans)\n    else:\n        # Otherwise, print \"NO\"\n        print(\"NO\")\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    },
    {
        "instruction": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a \u22c5 b \u22c5 c for some distinct integers a, b, c such that 2 \u2264 a, b, c.\n\nOtherwise, print \"YES\" and any possible such representation.\n\nExample\n\nInput\n\n\n5\n64\n32\n97\n2\n12345\n\n\nOutput\n\n\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823 ",
        "output": "SOLUTION STEPS:\n1. Read the number of test cases `t` from the input.\n2. For each test case, read the integer `n` from the input.\n3. Find all the divisors of `n` and store them in a dictionary `factors` where the keys are the divisors and the values are their respective counts.\n4. Convert the dictionary keys to a list `factors_list` and sort it in ascending order.\n5. If the length of `factors_list` is less than 3, it is impossible to represent `n` as a product of three distinct integers, so print 'NO'.\n6. Otherwise, iterate through the list of factors to find three distinct factors `a`, `b`, and `c` such that `a * b * c = n`.\n7. For each pair of factors `(a, b)` in the list, check if `n / (a * b)` is also a factor of `n`. If it is, print 'YES' and the three factors `a`, `b`, and `n / (a * b)`.\n8. If no such factors are found after iterating through the entire list, print 'NO'.\n\nCOMMENTED CODE:\n```python\nimport math\n\ndef printDivisors(n) : \n    # Find all the divisors of n and store them in a dictionary\n    i = 2\n    factors = {}  # Dictionary to store divisors and their counts\n    while i <= math.sqrt(n): \n        # Check if i is a divisor of n\n        if (n % i == 0) : \n            # If n // i is equal to i, it means i is a perfect square divisor\n            if (n // i == i) : \n                factors[i] = 1  # Increment the count of i in the dictionary\n            else : \n                # If n // i is not equal to i, it means i and n // i are both divisors\n                factors[n//i] = 1  # Increment the count of n // i in the dictionary\n                factors[i] = 1  # Increment the count of i in the dictionary\n        i = i + 1\n    return factors\n\nfor t in range(int(input())):\n    n = int(input())\n    f = printDivisors(n)\n    factors = list(f.keys())  # Convert the dictionary keys to a list\n    factors.sort()  # Sort the list of factors in ascending order\n    if len(factors) < 3:\n        # If the length of factors is less than 3, it is impossible to represent n as a product of three distinct integers\n        print('NO')\n    else:\n        i = 1\n        flag = False  # Flag to check if a valid triplet is found\n        while i < len(factors)//2:\n            # Iterate through the list of factors to find three distinct factors a, b, and c such that a * b * c = n\n            temp = factors[0]*factors[i]\n            try:\n                x = f[temp]\n                # Check if n // temp is a factor of n and not equal to factors[0] or factors[i]\n                if n//temp!= factors[0] and n//temp!= factors[i]:\n                    # If a valid triplet is found, print 'YES' and the three factors\n                    print('YES')\n                    print(factors[0], factors[i], n//temp)\n                    flag = True\n                    break\n                else:\n                    # If n // temp is equal to factors[0] or factors[i], increment i\n                    i += 1\n            except KeyError:\n                # If temp is not a key in the dictionary, increment i\n                i += 1\n        if not(flag):\n            # If no valid triplet is found after iterating through the entire list, print 'NO'\n            print('NO')\n```",
        "system": "You are a competitive programming expert. Your task is to break down the problem-solving approach into detailed, structured steps. And then write valid code to solve the problem"
    }
]